---
title: "1. Truth Tables, Normal Forms (DNF, CNF)"
author: "Zakhar Podyakov"
date: "September 17, 2025"
format: html
engine: knitr
---

#### **1. Summary**

##### **1.1 Propositions and Logical Values**
In logic, a **proposition** is a statement that can be definitively determined as either *True* or *False*, but not both. It is the fundamental building block of logical expressions. For example, "The sky is blue" is a proposition. "What time is it?" is not, because it's a question and cannot be assigned a truth value. In discrete mathematics and computing, we represent these values numerically:

*   **True** is represented by **1**.
*   **False** is represented by **0**.

##### **1.2 Logical Operators**
Logical operators are symbols used to connect propositions and form more complex logical expressions. Each operator has a specific rule for determining the truth value of the expression it forms.

*   **1.2.1 Negation (NOT)**
    The **Negation** operator, denoted by `¬` (e.g., `¬P`), inverts the truth value of a proposition. If `P` is true, `¬P` is false. If `P` is false, `¬P` is true. It corresponds to the word "not".

*   **1.2.2 Conjunction (AND)**
    The **Conjunction** operator, denoted by `&` or `∧` (e.g., `P ∧ Q`), connects two propositions. The result is *True* only if **both** propositions are true. If either or both are false, the result is false. It corresponds to the word "and".

*   **1.2.3 Disjunction (OR)**
    The **Disjunction** operator, denoted by `∨` (e.g., `P ∨ Q`), connects two propositions. The result is *True* if **at least one** of the propositions is true. It is only false when both propositions are false. This is also known as an *inclusive OR*.

*   **1.2.4 Implication (IF...THEN)**
    The **Implication** operator, denoted by `→` (e.g., `P → Q`), represents a conditional statement. It is read as "if P, then Q". The expression `P → Q` is only *False* when `P` is true and `Q` is false. In all other cases, it is true. This can seem counter-intuitive. Think of it as a promise: "If I pass the exam (`P`), then I will celebrate (`Q`)". The only way the promise is broken is if I pass the exam but do not celebrate. If I don't pass the exam, the promise is not broken, regardless of whether I celebrate or not.

*   **1.2.5 Equivalence (IF AND ONLY IF)**
    The **Equivalence** operator, denoted by `↔` (e.g., `P ↔ Q`), is also known as a biconditional. The result is *True* only when both propositions have the **same truth value** (both true or both false).

##### **1.3 Truth Tables**
A **truth table** is a tool used to systematically determine the truth value of a complex logical formula for every possible combination of truth values of its component propositions.

*   **Construction**: To build a truth table for a formula with `n` distinct propositional variables, you need $2^n$ rows to cover all possible scenarios.
*   **Structure**: The initial columns list all combinations of truth values for the variables. Subsequent columns break down the complex formula into smaller parts, building up to the final result in the last column.

<!-- DIAGRAM HERE -->

##### **1.4 Normal Forms**
A *normal form* in logic is a standardized way of writing a logical formula. Having a standard representation is useful for comparing formulas, simplifying them, and for automated processing in computer science. The two most common are Disjunctive Normal Form (DNF) and Conjunctive Normal Form (CNF).

*   **1.4.1 Disjunctive Normal Form (DNF)**
    A formula is in **Disjunctive Normal Form (DNF)** if it is a *disjunction* (ORs) of *conjuncts* (ANDs of literals). A **literal** is a variable or its negation.
    *   **Structure**: $(A \land \neg B) \lor (C \land D) \lor (\neg E)$
    *   **Intuition**: Think of DNF as describing the specific conditions that make the formula **True**. Each conjunct represents one "true" scenario. The entire formula is true if any one of these scenarios is met.

*   **Algorithm to Find DNF from a Truth Table:**
    1.  Identify all rows in the truth table where the final result is **1 (True)**.
    2.  For each of these rows, create a **conjunct** (an AND clause).
    3.  Within each conjunct, if a variable's value in that row is **1**, use the variable directly (e.g., `A`).
    4.  If a variable's value is **0**, use its negation (e.g., `¬A`).
    5.  Connect all the resulting conjuncts with the **disjunction** (`∨`) operator.

*   **1.4.2 Conjunctive Normal Form (CNF)**
    A formula is in **Conjunctive Normal Form (CNF)** if it is a *conjunction* (ANDs) of *disjuncts* (ORs of literals).
    *   **Structure**: $(A \lor \neg B) \land (C \lor D) \land (\neg E)$
    *   **Intuition**: Think of CNF as a set of rules or constraints, all of which must be satisfied for the formula to be true. The formula is made false if any single clause is false.

*   **Algorithm to Find CNF from a Truth Table:**
    1.  Identify all rows in the truth table where the final result is **0 (False)**.
    2.  For each of these rows, create a **disjunct** (an OR clause).
    3.  Within each disjunct, if a variable's value in that row is **0**, use the variable directly (e.g., `A`).
    4.  If a variable's value is **1**, use its negation (e.g., `¬A`). (This is the opposite of the DNF rule).
    5.  Connect all the resulting disjuncts with the **conjunction** (`∧`) operator.

#### **2. Definitions**

*   **Proposition**: A declarative statement that is unambiguously either true or false.
*   **Truth Table**: A table that displays the truth values of a logical formula for all possible combinations of truth values of its component variables.
*   **Literal**: A propositional variable (e.g., `A`) or its negation (e.g., `¬A`).
*   **Conjunct (Minterm)**: A conjunction (AND) of one or more literals. For example, `A ∧ ¬B ∧ C`.
*   **Disjunct (Maxterm)**: A disjunction (OR) of one or more literals. For example, `A ∨ ¬B ∨ C`.
*   **Disjunctive Normal Form (DNF)**: A logical formula written as a disjunction of conjuncts. It is an OR of ANDs.
*   **Conjunctive Normal Form (CNF)**: A logical formula written as a conjunction of disjuncts. It is an AND of ORs.

#### **3. Formulas**

*   **Implication Equivalence**: The implication `P → Q` is logically equivalent to `¬P ∨ Q`.
*   **Biconditional Equivalence**: The equivalence `P ↔ Q` is logically equivalent to `(P → Q) ∧ (Q → P)`, which further expands to `(¬P ∨ Q) ∧ (P ∨ ¬Q)`.
*   **De Morgan's Laws**:
    *   `¬(P ∧ Q) ≡ ¬P ∨ ¬Q`
    *   `¬(P ∨ Q) ≡ ¬P ∧ ¬Q`
*   **General Formula for DNF**: For a function $f(x_1, ..., x_n)$:
    $$ f = \bigvee_{f(\sigma_1, ..., \sigma_n)=1} (x_1^{\sigma_1} \land ... \land x_n^{\sigma_n}) $$
    *Where $x^1$ means $x$ and $x^0$ means $\neg x$.*
*   **General Formula for CNF**: For a function $f(x_1, ..., x_n)$:
    $$ f = \bigwedge_{f(\sigma_1, ..., \sigma_n)=0} (x_1^{\overline{\sigma_1}} \lor ... \lor x_n^{\overline{\sigma_n}}) $$
    *Where $x^{\overline{1}}$ means $\neg x$ and $x^{\overline{0}}$ means $x$.*

#### **4. Mistakes**

*   **Confusing the Direction of Implication:** Assuming that if `P → Q` is true, then `Q → P` must also be true. **Why it's wrong:** "If it is raining, the ground is wet" is true. However, "If the ground is wet, it is raining" is not necessarily true (e.g., a sprinkler could be on). The implication is not symmetric.
*   **Incorrectly Negating Expressions:** Writing `¬(A ∧ B)` as `¬A ∧ ¬B`. **Why it's wrong:** This violates De Morgan's laws. The correct negation is `¬A ∨ ¬B`. The negation of "it is cold AND raining" is "it is NOT cold OR it is NOT raining".
*   **Mixing up DNF and CNF Creation Rules:** Using the wrong rule for variables when constructing normal forms from a truth table. For example, using `A` for a `1` when building a CNF clause. **Why it's wrong:** The rules are inverted. For CNF, you look at the `0` (false) rows, and a `1` in the input corresponds to a negated literal (`¬A`) in the clause.
*   **Creating Invalid Normal Form Structures:** Writing a DNF with disjunctions (ORs) inside the conjuncts, such as `(A ∨ B) ∧ C`. **Why it's wrong:** A DNF must be strictly an OR of ANDs. The term `(A ∨ B)` is not a valid conjunct.
*   **Forgetting Rows in a Truth Table:** Not listing all $2^n$ possible combinations of inputs. **Why it's wrong:** An incomplete truth table can lead to an incorrect analysis of the formula and incorrect DNF/CNF representations.
*   **Misinterpreting the `P → Q` case where P is False:** Believing that if the premise `P` is false, the implication `P → Q` is also false. **Why it's wrong:** In classical logic, an implication with a false premise is always considered true. This is known as the principle of "ex falso quodlibet" (from falsehood, anything follows).

#### **5. Examples**

##### **5.1. Construct a Truth Table**
**Question:** Construct the full truth table for the expression `(A ∨ B) → ¬A`.

<details>
<summary>Click to see the solution</summary>

1.  **Set up columns:** We need columns for the variables `A` and `B`, the intermediate expression `A ∨ B`, the negation `¬A`, and the final expression `(A ∨ B) → ¬A`.
2.  **List input combinations:** For two variables, there are $2^2=4$ combinations.
3.  **Evaluate `A ∨ B`:** This is true if `A` or `B` (or both) are true.
4.  **Evaluate `¬A`:** This is the opposite of the value of `A`.
5.  **Evaluate the final implication:** The result is false only when the left side (`A ∨ B`) is true and the right side (`¬A`) is false.

| A | B | A ∨ B | ¬A | (A ∨ B) → ¬A |
|---|---|---|---|---|
| 0 | 0 | 0     | 1  | 1            |
| 0 | 1 | 1     | 1  | 1            |
| 1 | 0 | 1     | 0  | 0            |
| 1 | 1 | 1     | 0  | 0            |

**Answer:** The final truth values for the expression are **(1, 1, 0, 0)**.
</details>

##### **5.2. Truth Table with Equivalence**
**Question:** Construct the truth table for `(A → B) ↔ (¬B → ¬A)`.

<details>
<summary>Click to see the solution</summary>

1.  **Set up columns:** We need columns for `A`, `B`, `A → B`, `¬B`, `¬A`, `¬B → ¬A`, and the final expression.
2.  **List input combinations:** Four rows for variables `A` and `B`.
3.  **Evaluate `A → B`:** False only when `A=1` and `B=0`.
4.  **Evaluate negations:** `¬A` and `¬B`.
5.  **Evaluate `¬B → ¬A`:** False only when `¬B=1` and `¬A=0` (which means `B=0` and `A=1`).
6.  **Evaluate the final equivalence:** The result is true when `A → B` and `¬B → ¬A` have the same truth value.

| A | B | A → B | ¬B | ¬A | ¬B → ¬A | (A → B) ↔ (¬B → ¬A) |
|---|---|---|---|---|---|---|
| 0 | 0 | 1     | 1  | 1  | 1       | 1                     |
| 0 | 1 | 1     | 0  | 1  | 1       | 1                     |
| 1 | 0 | 0     | 1  | 0  | 0       | 1                     |
| 1 | 1 | 1     | 0  | 0  | 1       | 1                     |

**Answer:** The expression is a tautology; its truth values are **(1, 1, 1, 1)**.
</details>

##### **5.3. Find DNF from a Truth Table**
**Question:** A function of two variables, `T(x, y)`, has the truth table result `(0, 1, 1, 0)`. Find its Disjunctive Normal Form (DNF). The input order is `(0,0), (0,1), (1,0), (1,1)`.

<details>
<summary>Click to see the solution</summary>

1.  **Identify the 'True' rows:** The function `T(x, y)` is true (1) for the input combinations `(x=0, y=1)` and `(x=1, y=0)`.
2.  **Create a conjunct for the first 'True' row `(0, 1)`:**
    *   `x` is 0, so we use `¬x`.
    *   `y` is 1, so we use `y`.
    *   The conjunct is `(¬x ∧ y)`.
3.  **Create a conjunct for the second 'True' row `(1, 0)`:**
    *   `x` is 1, so we use `x`.
    *   `y` is 0, so we use `¬y`.
    *   The conjunct is `(x ∧ ¬y)`.
4.  **Combine the conjuncts with OR:** Join the terms from steps 2 and 3 with `∨`.

**Answer:** The DNF is **`(¬x ∧ y) ∨ (x ∧ ¬y)`**. (This is the formula for XOR).
</details>

##### **5.4. Find CNF from a Truth Table**
**Question:** A function of two variables, `T(x, y)`, has the truth table result `(0, 1, 1, 0)`. Find its Conjunctive Normal Form (CNF).

<details>
<summary>Click to see the solution</summary>

1.  **Identify the 'False' rows:** The function `T(x, y)` is false (0) for the input combinations `(x=0, y=0)` and `(x=1, y=1)`.
2.  **Create a disjunct for the first 'False' row `(0, 0)`:**
    *   `x` is 0, so we use `x`.
    *   `y` is 0, so we use `y`.
    *   The disjunct is `(x ∨ y)`.
3.  **Create a disjunct for the second 'False' row `(1, 1)`:**
    *   `x` is 1, so we use `¬x`.
    *   `y` is 1, so we use `¬y`.
    *   The disjunct is `(¬x ∨ ¬y)`.
4.  **Combine the disjuncts with AND:** Join the terms from steps 2 and 3 with `∧`.

**Answer:** The CNF is **`(x ∨ y) ∧ (¬x ∨ ¬y)`**.
</details>

##### **5.5. DNF and CNF for Three Variables**
**Question:** Find both the DNF and CNF for the function `T(A, B, C)` given by the result vector `(0, 1, 0, 1, 1, 0, 1, 0)`.

<details>
<summary>Click to see the solution</summary>

**Part 1: Disjunctive Normal Form (DNF)**

1.  **Identify 'True' rows:** The output is 1 for inputs: `(0,0,1)`, `(0,1,1)`, `(1,0,0)`, and `(1,1,0)`.
2.  **Create conjuncts for each 'True' row:**
    *   `(0,0,1)` → `(¬A ∧ ¬B ∧ C)`
    *   `(0,1,1)` → `(¬A ∧ B ∧ C)`
    *   `(1,0,0)` → `(A ∧ ¬B ∧ ¬C)`
    *   `(1,1,0)` → `(A ∧ B ∧ ¬C)`
3.  **Combine with OR:**
    `(¬A ∧ ¬B ∧ C) ∨ (¬A ∧ B ∧ C) ∨ (A ∧ ¬B ∧ ¬C) ∨ (A ∧ B ∧ ¬C)`

**Part 2: Conjunctive Normal Form (CNF)**

1.  **Identify 'False' rows:** The output is 0 for inputs: `(0,0,0)`, `(0,1,0)`, `(1,0,1)`, and `(1,1,1)`.
2.  **Create disjuncts for each 'False' row:**
    *   `(0,0,0)` → `(A ∨ B ∨ C)`
    *   `(0,1,0)` → `(A ∨ ¬B ∨ C)`
    *   `(1,0,1)` → `(¬A ∨ B ∨ ¬C)`
    *   `(1,1,1)` → `(¬A ∨ ¬B ∨ ¬C)`
3.  **Combine with AND:**
    `(A ∨ B ∨ C) ∧ (A ∨ ¬B ∨ C) ∧ (¬A ∨ B ∨ ¬C) ∧ (¬A ∨ ¬B ∨ ¬C)`

**Answer:**
*   **DNF:** **`(¬A ∧ ¬B ∧ C) ∨ (¬A ∧ B ∧ C) ∨ (A ∧ ¬B ∧ ¬C) ∨ (A ∧ B ∧ ¬C)`**
*   **CNF:** **`(A ∨ B ∨ C) ∧ (A ∨ ¬B ∨ C) ∧ (¬A ∨ B ∨ ¬C) ∧ (¬A ∨ ¬B ∨ ¬C)`**
</details>

##### **5.6. Convert Formula to DNF**
**Question:** Convert the formula `P → (P ∧ Q)` to its DNF by first creating its truth table.

<details>
<summary>Click to see the solution</summary>

1.  **Create the truth table:**

| P | Q | P ∧ Q | P → (P ∧ Q) |
|---|---|---|---|
| 0 | 0 | 0     | 1             |
| 0 | 1 | 0     | 1             |
| 1 | 0 | 0     | 0             |
| 1 | 1 | 1     | 1             |

2.  **Identify the 'True' rows:** The final expression is true for inputs `(0,0)`, `(0,1)`, and `(1,1)`.
3.  **Create conjuncts:**
    *   `(0,0)` → `(¬P ∧ ¬Q)`
    *   `(0,1)` → `(¬P ∧ Q)`
    *   `(1,1)` → `(P ∧ Q)`
4.  **Combine with OR:**
    `(¬P ∧ ¬Q) ∨ (¬P ∧ Q) ∨ (P ∧ Q)`

**Answer:** The DNF is **`(¬P ∧ ¬Q) ∨ (¬P ∧ Q) ∨ (P ∧ Q)`**.
</details>

##### **5.7. Convert Formula to CNF**
**Question:** Convert the formula `P ↔ ¬Q` to its CNF by first creating its truth table.

<details>
<summary>Click to see the solution</summary>

1.  **Create the truth table:**

| P | Q | ¬Q | P ↔ ¬Q |
|---|---|---|---|
| 0 | 0 | 1  | 0        |
| 0 | 1 | 0  | 1        |
| 1 | 0 | 1  | 1        |
| 1 | 1 | 0  | 0        |

2.  **Identify the 'False' rows:** The final expression is false for inputs `(0,0)` and `(1,1)`.
3.  **Create disjuncts:**
    *   `(0,0)` → `(P ∨ Q)`
    *   `(1,1)` → `(¬P ∨ ¬Q)`
4.  **Combine with AND:**
    `(P ∨ Q) ∧ (¬P ∨ ¬Q)`

**Answer:** The CNF is **`(P ∨ Q) ∧ (¬P ∨ ¬Q)`**.
</details>