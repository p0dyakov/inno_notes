---
title: "Logical Equivalence, Normal Forms"
author: "Zakhar Podyakov"
date: "September 17, 2025"
format: html
engine: knitr
---

#### **1. Summary**

##### **1.1 Logical Formulas and Operators**
In logic, a **formula** (or proposition) is a statement that can be definitively determined as either *true* or *false*. Simple formulas, often represented by variables like $p$ or $q$, can be combined using **logical operators** to form more complex formulas.

*   **Negation (`$\neg$`):** Reverses the truth value of a formula. `$\neg p$` is read as "not p". If $p$ is true, `$\neg p$` is false.
*   **Conjunction (`$\land$` or `$&$`):** Represents logical "AND". The formula `$p \land q$` is true only if *both* $p$ and $q$ are true.
*   **Disjunction (`$\lor$`):** Represents logical "OR". The formula `$p \lor q$` is true if *at least one* of $p$ or $q$ is true. It is only false when both are false.
*   **Implication (`$\to$`):** Represents an "if-then" statement. `$p \to q$` is read as "if p, then q". It is only false when $p$ is true and $q$ is false. In all other cases, it is true.
*   **Bi-implication (`$\leftrightarrow$`):** Represents "if and only if". `$p \leftrightarrow q$` is true only when $p$ and $q$ have the *same truth value* (both true or both false).

##### **1.2 Classification of Logical Formulas**
Formulas can be classified based on their truth values across all possible interpretations of their variables.

<!-- DIAGRAM HERE -->

*   **Tautology:** A formula that is *always true*, regardless of the truth values of its constituent variables. For example, the formula `$p \lor \neg p$` is always true because a proposition must be either true or false.
*   **Contradiction:** A formula that is *always false*. For example, `$p \land \neg p$` is a contradiction because a proposition cannot be both true and false at the same time.
*   **Contingency:** A formula that is neither a tautology nor a contradiction. Its truth value *depends on* the truth values of its variables. For example, `$p \lor q$` is a contingency because its truth depends on whether $p$ or $q$ is true.
*   **Satisfiability:** A formula is considered **satisfiable** if there exists at least one assignment of truth values to its variables that makes the entire formula true. Tautologies and contingencies are satisfiable, while contradictions are not. The problem of determining if a formula is satisfiable is a famous problem in computer science known as the Boolean Satisfiability Problem (SAT), which the **Cook-Levin theorem** proved to be NP-complete.

##### **1.3 Logical Equivalence**
Two formulas are **logically equivalent** if they have identical truth tables. This means that for every possible combination of truth values for their variables, the two formulas produce the same result. This relationship is denoted by the symbol `$\equiv$`. Understanding these equivalences is crucial for simplifying and manipulating logical expressions.

*   **Identity Laws:** A variable OR-ed with false is the variable itself. A variable AND-ed with true is the variable itself.
    *   `$p \lor F \equiv p$`
    *   `$p \land T \equiv p$`
*   **Domination Laws:** Any variable OR-ed with true is always true. Any variable AND-ed with false is always false.
    *   `$p \lor T \equiv T$`
    *   `$p \land F \equiv F$`
*   **Idempotent Laws:** OR-ing or AND-ing a variable with itself does not change its value.
    *   `$p \lor p \equiv p$`
    *   `$p \land p \equiv p$`
*   **Double Negation Law:** Negating a negation cancels out.
    *   `$\neg(\neg p) \equiv p$`
*   **Commutative Laws:** The order of variables does not matter for AND and OR operations.
    *   `$p \lor q \equiv q \lor p$`
    *   `$p \land q \equiv q \land p$`
*   **Associative Laws:** The grouping of variables does not matter for a sequence of the same operator (AND or OR).
    *   `$(p \lor q) \lor r \equiv p \lor (q \lor r)$`
    *   `$(p \land q) \land r \equiv p \land (q \land r)$`
*   **Distributive Laws:** An operator can be distributed over another within parentheses.
    *   `$p \land (q \lor r) \equiv (p \land q) \lor (p \land r)$`
    *   `$p \lor (q \land r) \equiv (p \lor q) \land (p \lor r)$`
*   **De Morgan's Laws:** These laws describe how to negate a conjunction or a disjunction. To do this, you negate each term and flip the operator.
    *   `$\neg(p \land q) \equiv \neg p \lor \neg q$`
    *   `$\neg(p \lor q) \equiv \neg p \land \neg q$`
*   **Absorption Laws:** These laws simplify expressions where a variable is combined with an expression containing that same variable.
    *   `$p \lor (p \land q) \equiv p$`
    *   `$p \land (p \lor q) \equiv p$`
*   **Implication and Bi-implication Equivalences:** These are fundamental for rewriting conditional statements.
    *   **Implication:** `$p \to q \equiv \neg p \lor q$`
    *   **Contrapositive:** `$p \to q \equiv \neg q \to \neg p$`
    *   **Bi-implication:** `$p \leftrightarrow q \equiv (p \to q) \land (q \to p)$` and `$p \leftrightarrow q \equiv (p \land q) \lor (\neg p \land \neg q)$`

##### **1.4 Normal Forms**
A **normal form** in logic is a standardized way of writing a formula. Two of the most common are Disjunctive Normal Form (DNF) and Conjunctive Normal Form (CNF).

*   **Disjunctive Normal Form (DNF):** A formula is in DNF if it is a *disjunction (ORs) of conjunctions (ANDs) of literals*. A **literal** is a variable or its negation (e.g., $p$ or `$\neg p$`).
    *   Example: `$(p \land q) \lor (\neg p \land r)$`
    *   To create a DNF from a truth table, you identify all rows where the output is **true**. For each such row, you create a conjunction (an AND clause) that is true for that specific combination of inputs. Finally, you connect all these conjunctions with disjunctions (ORs).
*   **Conjunctive Normal Form (CNF):** A formula is in CNF if it is a *conjunction (ANDs) of disjunctions (ORs) of literals*.
    *   Example: `$(p \lor q) \land (\neg p \lor r)$`
    *   To create a CNF from a truth table, you identify all rows where the output is **false**. For each such row, you create a disjunction (an OR clause) that is false for that specific combination. Finally, you connect all these disjunctions with conjunctions (ANDs).

##### **1.5 Algebraic Normal Form (ANF)**
**Algebraic Normal Form (ANF)**, also known as a **Zhegalkin polynomial**, is a unique way to represent any logical formula using only two operators: XOR (`$\oplus$`) and AND (`$\cdot$`). The calculations are performed *modulo 2*, which means that `1 + 1 = 0`. This form is a polynomial where variables can only have a power of 1 (since `$x \cdot x = x$`).

The key conversion formulas are:
*   `$\neg p \equiv p \oplus 1$`
*   `$p \land q \equiv p \cdot q` (or just `$pq$`)
*   `$p \lor q \equiv p \oplus q \oplus pq$`
*   `$p \to q \equiv 1 \oplus p \oplus pq$`
*   `$p \leftrightarrow q \equiv 1 \oplus x \oplus y$`

Important properties in modulo 2 arithmetic include:
*   `$p \oplus p \equiv 0$`
*   `$p \cdot p \equiv p$` (or `$p^2 \equiv p$`)

---

#### **2. Definitions**

*   **Tautology**: A logical formula that is always true for any assignment of truth values to its variables.
*   **Contradiction**: A logical formula that is always false for any assignment of truth values to its variables.
*   **Contingency**: A logical formula that can be either true or false depending on the truth values of its variables.
*   **Satisfiability**: The property of a formula for which there is at least one assignment of truth values that makes it true.
*   **Logical Equivalence**: The relationship between two formulas that have identical truth tables.
*   **Literal**: A propositional variable or its negation (e.g., $p$ or `$\neg p$`).
*   **Disjunctive Normal Form (DNF)**: A logical formula expressed as a disjunction (OR) of one or more conjunctions (ANDs) of literals.
*   **Conjunctive Normal Form (CNF)**: A logical formula expressed as a conjunction (AND) of one or more disjunctions (ORs) of literals.
*   **Algebraic Normal Form (ANF)**: A canonical representation of a logical formula as a polynomial over a two-element field, using XOR (addition) and AND (multiplication). Also known as a Zhegalkin polynomial.

---

#### **3. Formulas**

*   **Double Negation:** `$\neg(\neg p) \equiv p$`
*   **De Morgan's Laws:**
    *   `$\neg(p \lor q) \equiv \neg p \land \neg q$`
    *   `$\neg(p \land q) \equiv \neg p \lor \neg q$`
*   **Distributive Laws:**
    *   `$p \land (q \lor r) \equiv (p \land q) \lor (p \land r)$`
    *   `$p \lor (q \land r) \equiv (p \lor q) \land (p \lor r)$`
*   **Implication Equivalence:** `$p \to q \equiv \neg p \lor q$`
*   **Bi-implication Equivalence:** `$p \leftrightarrow q \equiv (p \land q) \lor (\neg p \land \neg q)$`
*   **ANF Conversions (Modulo 2):**
    *   `$\neg p \equiv p \oplus 1$`
    *   `$p \lor q \equiv p \oplus q \oplus pq$`
    *   `$p \to q \equiv 1 \oplus p \oplus pq$`
    *   `$p \leftrightarrow q \equiv 1 \oplus p \oplus y$`
    *   `$p \oplus p \equiv 0$`
    *   `$p \cdot p \equiv p$`

---

#### **4. Mistakes**

*   **Incorrectly Applying De Morgan's Law:** A common error is only negating the variables but forgetting to flip the operator. For example, stating that `$\neg(p \lor q)$` is equivalent to `$\neg p \lor \neg q$`. **Why it's wrong:** De Morgan's Law requires both negating the terms *and* inverting the connective, so the correct equivalence is `$\neg p \land \neg q$`.
*   **Confusing the Distributive Laws:** Incorrectly distributing OR over AND, or vice-versa. For example, assuming `$p \lor (q \land r)` simplifies to `$(p \lor q) \land r$`. **Why it's wrong:** The distribution must apply to both terms inside the parentheses, resulting in the correct form: `$(p \lor q) \land (p \lor r)$`.
*   **Treating Implication as Commutative:** Assuming that `$p \to q$` is the same as `$q \to p$`. **Why it's wrong:** These are different statements. `$p \to q$` is the original implication, while `$q \to p$` is its converse. They do not have the same truth table and are not logically equivalent.
*   **Errors in ANF Arithmetic:** Forgetting that all arithmetic in ANF is modulo 2. For instance, simplifying `$p \oplus p$` to `$2p$` instead of `$0$`. **Why it's wrong:** The XOR operation corresponds to addition in a field with only two elements, {0, 1}, where `$1+1=0$`.
*   **Incorrectly Constructing DNF/CNF:** Using the "false" rows of a truth table to construct DNF, or the "true" rows for CNF. **Why it's wrong:** DNF is a disjunction of terms representing the *true* outcomes, so each term must correspond to a row where the function is true. CNF is a conjunction of clauses that rule out the *false* outcomes, so each clause must correspond to a row where the function is false.
*   **Simplifying `$\neg a \to \neg b$` to `$a \to b$`:** Assuming that negating both sides of an implication preserves the original meaning. **Why it's wrong:** The statement `$\neg a \to \neg b$` is the inverse of `$a \to b$`, not an equivalent form. The correct logical equivalence is the contrapositive: `$b \to a$`.

---

#### **5. Examples**

##### **5.1. Proving Equivalence with a Truth Table**
**Question:** Prove the equivalence `$p \to q \equiv \neg p \lor q$`.
<details>
<summary>Click to see the solution</summary>

1.  **Set up the table:** Create columns for the variables $p$ and $q$, and for the expressions `$p \to q$` and `$\neg p \lor q$`. Include an intermediate column for `$\neg p$`.
2.  **List all possible truth value combinations** for $p$ and $q$.
3.  **Evaluate `$\neg p$`:** Fill in the column for `$\neg p$` based on the values in the $p$ column.
4.  **Evaluate `$p \to q$`:** This is false only when $p$ is true and $q$ is false.
5.  **Evaluate `$\neg p \lor q$`:** This is true if either `$\neg p$` is true or $q$ is true.
6.  **Compare the final columns:** Check if the columns for `$p \to q$` and `$\neg p \lor q$` are identical.

| $p$ | $q$ | `$\neg p$` | `$p \to q$` | `$\neg p \lor q$` |
|:---:|:---:|:---:|:---:|:---:|
| T | T | F | **T** | **T** |
| T | F | F | **F** | **F** |
| F | T | T | **T** | **T** |
| F | F | T | **T** | **T** |

**Answer:** Since the truth columns for `$p \to q$` and `$\neg p \lor q$` are identical, the two expressions are **logically equivalent**.
</details>

##### **5.2. Simplifying a Logical Expression**
**Question:** Simplify the expression `$\neg(p \lor (\neg p \land q))$`.
<details>
<summary>Click to see the solution</summary>

1.  **Apply De Morgan's Law** to the outermost negation:
    $$ \neg p \land \neg(\neg p \land q) $$
2.  **Apply De Morgan's Law** to the second part of the expression:
    $$ \neg p \land (\neg(\neg p) \lor \neg q) $$
3.  **Apply the Double Negation Law** to `$\neg(\neg p)$`:
    $$ \neg p \land (p \lor \neg q) $$
4.  **Apply the Distributive Law:**
    $$ (\neg p \land p) \lor (\neg p \land \neg q) $$
5.  **Apply the Contradiction Law** (`$\neg p \land p \equiv F$`):
    $$ F \lor (\neg p \land \neg q) $$
6.  **Apply the Identity Law** (`$F \lor A \equiv A$`):
    $$ \neg p \land \neg q $$

**Answer:** The simplified expression is **`$\neg p \land \neg q$`**.
</details>

##### **5.3. Finding Disjunctive Normal Form (DNF)**
**Question:** Find the DNF for the function `$\Phi(p, q, r)$` defined by the following truth table:

| $p$ | $q$ | $r$ | `$\Phi$` |
|:---:|:---:|:---:|:---:|
| T | T | T | **T** |
| T | T | F | F |
| T | F | T | **T** |
| T | F | F | F |
| F | T | T | F |
| F | T | F | F |
| F | F | T | **T** |
| F | F | F | F |

<details>
<summary>Click to see the solution</summary>

1.  **Identify the 'true' rows:** The function `$\Phi$` is true for the input combinations (T, T, T), (T, F, T), and (F, F, T).
2.  **Create a conjunction for each 'true' row:**
    *   For (T, T, T), the term is `$p \land q \land r$`.
    *   For (T, F, T), the term is `$p \land \neg q \land r$`.
    *   For (F, F, T), the term is `$\neg p \land \neg q \land r$`.
3.  **Combine the conjunctions with disjunctions (ORs):**
    $$ (p \land q \land r) \lor (p \land \neg q \land r) \lor (\neg p \land \neg q \land r) $$

**Answer:** The DNF is **`$(p \land q \land r) \lor (p \land \neg q \land r) \lor (\neg p \land \neg q \land r)$`**.
</details>

##### **5.4. Finding Conjunctive Normal Form (CNF)**
**Question:** Find the CNF for the function `$\Psi(p, q)$` defined by `$p \leftrightarrow q$`.

| $p$ | $q$ | `$p \leftrightarrow q$` |
|:---:|:---:|:---:|
| T | T | T |
| T | F | **F** |
| F | T | **F** |
| F | F | T |

<details>
<summary>Click to see the solution</summary>

1.  **Identify the 'false' rows:** The function is false for the input combinations (T, F) and (F, T).
2.  **Create a disjunction for each 'false' row** that is false for that specific input. To do this, negate the literals from the 'true' row equivalent.
    *   For (T, F), the 'true' equivalent term is `$p \land \neg q$`. The negated disjunction is `$\neg p \lor q$`.
    *   For (F, T), the 'true' equivalent term is `$\neg p \land q$`. The negated disjunction is `$p \lor \neg q$`.
3.  **Combine the disjunctions with conjunctions (ANDs):**
    $$ (\neg p \lor q) \land (p \lor \neg q) $$

**Answer:** The CNF is **`$(\neg p \lor q) \land (p \lor \neg q)$`**.
</details>

##### **5.5. Converting to Algebraic Normal Form (ANF)**
**Question:** Convert the expression `$(a \land \neg b) \to a$` to ANF.
<details>
<summary>Click to see the solution</summary>

1.  **Substitute the logical operators with their ANF equivalents.**
    *   `$\neg b \equiv b \oplus 1$`
    *   `$X \to Y \equiv 1 \oplus X \oplus XY$`
2.  **First, convert the term inside the parenthesis, `$a \land \neg b$**:
    $$ a \land (b \oplus 1) = a(b \oplus 1) = ab \oplus a $$
3.  **Now, substitute this result into the implication formula, where `$X = ab \oplus a$` and `$Y = a$`**:
    $$ 1 \oplus (ab \oplus a) \oplus (ab \oplus a)a $$
4.  **Distribute the final `$a$` term:**
    $$ 1 \oplus ab \oplus a \oplus (aba \oplus aa) $$
5.  **Simplify using `$a \cdot a = a^2 = a$`:**
    $$ 1 \oplus ab \oplus a \oplus (ab \oplus a) $$
6.  **Group like terms. Remember that `$X \oplus X = 0$` in modulo 2 arithmetic:**
    $$ 1 \oplus (ab \oplus ab) \oplus (a \oplus a) $$
    $$ 1 \oplus 0 \oplus 0 $$
7.  **Final simplification:**
    $$ 1 $$

**Answer:** The ANF is **`$1$`**, which means the original expression is a tautology.
</details>

##### **5.6. Negating a Complex Expression**
**Question:** Apply De Morgan's laws to negate and simplify the expression `$(\neg a \lor b) \land (c \lor \neg d)$`.
<details>
<summary>Click to see the solution</summary>

1.  **Enclose the entire expression in a negation:**
    $$ \neg((\neg a \lor b) \land (c \lor \neg d)) $$
2.  **Apply De Morgan's Law to the central AND (`$\land$`) operator. This splits the negation and flips the operator to OR (`$\lor$`):**
    $$ \neg(\neg a \lor b) \lor \neg(c \lor \neg d) $$
3.  **Apply De Morgan's Law to the first part, `$\neg(\neg a \lor b)$`:**
    $$ (\neg(\neg a) \land \neg b) \lor \neg(c \lor \neg d) $$
4.  **Apply the Double Negation Law to `$\neg(\neg a)$`:**
    $$ (a \land \neg b) \lor \neg(c \lor \neg d) $$
5.  **Apply De Morgan's Law to the second part, `$\neg(c \lor \neg d)$`:**
    $$ (a \land \neg b) \lor (\neg c \land \neg(\neg d)) $$
6.  **Apply the Double Negation Law to `$\neg(\neg d)$`:**
    $$ (a \land \neg b) \lor (\neg c \land d) $$

**Answer:** The negated and simplified expression is **`$(a \land \neg b) \lor (\neg c \land d)$`**.
</details>

##### **5.7. Simplification Using Logical Laws**
**Question:** Prove that `$(p \to q) \land (p \to r) \equiv p \to (q \land r)$`.
<details>
<summary>Click to see the solution</summary>

1.  **Start with the left-hand side (LHS) and convert implications to their `$\neg p \lor q$` form:**
    $$ (\neg p \lor q) \land (\neg p \lor r) $$
2.  **This expression is in the form `$(A \lor B) \land (A \lor C)$`. We can use the Distributive Law in reverse, where `$A = \neg p$`, `$B = q$`, and `$C = r$`:**
    $$ \neg p \lor (q \land r) $$
3.  **Now, convert this expression back from its OR form into an implication, using `$A \lor B \equiv \neg(\neg A) \lor B \equiv \neg A \to B$` which is a form of implication equivalence:**
    $$ p \to (q \land r) $$
4.  **This matches the right-hand side (RHS) of the original statement.**

**Answer:** Since the left-hand side can be transformed into the right-hand side using logical equivalence laws, the equivalence **is proven**.
</details>