[
  {
    "objectID": "Mathematical Analysis I/lec_1.html",
    "href": "Mathematical Analysis I/lec_1.html",
    "title": "1. Real Analysis, Complex Numbers",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 What is Real Analysis?\n\n1.1.1 The Foundation of Calculus\nReal analysis is the branch of mathematics that provides the rigorous, theoretical foundation for calculus. While introductory calculus teaches you how to use rules like the chain rule or L’Hopital’s rule, real analysis explains why these rules are true. It builds the entire framework of calculus from a small set of fundamental truths, or axioms. The primary goal is to gain a deep understanding of concepts like the limit, the derivative, and the integral.\n\n\n1.1.2 The Dangers of Applying Rules Blindly\nTo study mathematics effectively, one must know not just what is true, but why it is true. Applying familiar algebraic rules without understanding their underlying principles and limitations can lead to logical disasters.\n\nExample 1: Hidden Division by Zero: In the equation \\(x(x+1) = x^2\\), one might be tempted to cancel an x from both sides to get \\(x+1 = x\\), which implies the absurdity \\(1=0\\). The error is canceling x without first checking if it is zero.\nExample 2: Invalid Operations on Infinite Sequences: An incorrect manipulation of limits can “prove” that the sequence \\(1, 2, 4, 8, ...\\) converges to zero. The operations used in the faulty proof are only valid if the limit exists in the first place, which it does not for this sequence.\nExample 3: Manipulating Infinite Series: The same algebraic trick can be used to show that \\(1 + 1/2 + 1/4 + ... = 2\\) (which is correct) and that \\(1 + 2 + 4 + ... = -1\\) (which is nonsensical). This demonstrates that rules for finite sums do not automatically apply to infinite series.\n\n\n\n\n1.2 Essential Tools: Logic and Set Theory\n\n1.2.1 Logical Symbols and Statements\nAnalysis relies on precise language. A statement is something that is either true or false, but not both.\n\nConjunction (\\(\\land\\)): Read as “and”.\nDisjunction (\\(\\lor\\)): Read as “or”.\nImplication (\\(\\Rightarrow\\)): “A implies B” or “If A, then B”.\nEquivalence (\\(\\Leftrightarrow\\)): “A if and only if B”.\nQuantifiers: ∀ reads as “for all”. ∃ reads as “there exists”.\n\n\n\n1.2.2 Fundamentals of Set Theory\nA set is a well-defined collection of distinct objects, called elements.\n\nEmpty Set (\\(\\emptyset\\)): The set containing no elements.\nSubset (\\(\\subseteq\\)): A set A is a subset of B if every element of A is also in B.\nUnion (\\(\\cup\\)): \\(A \\cup B\\) is the set of all elements in A, or in B, or in both.\nIntersection (\\(\\cap\\)): \\(A \\cap B\\) is the set containing only elements common to both A and B.\nComplement (\\(A^c\\)): Relative to a universal set U, the complement of A is the set of all elements in U that are not in A.\nDe Morgan’s Laws: \\((A \\cup B)^c = A^c \\cap B^c\\) and \\((A \\cap B)^c = A^c \\cup B^c\\).\n\n\n\n\n\n1.3 The Real Number System (\\(\\mathbb{R}\\))\n\n1.3.1 The Axiomatic Foundation\nThe real numbers (\\(\\mathbb{R}\\)) are defined rigorously by a set of axioms.\n\nField Axioms (Algebraic): These define standard arithmetic (commutativity, associativity, identities, inverses, distributivity).\nOrder Axioms: These establish the properties of inequality (&lt;, &gt;), ensuring that any two real numbers can be compared.\nCompleteness Axiom: This is the key axiom that ensures there are no “holes” on the number line. Its most common form is the Least Upper Bound Property: every non-empty set of real numbers that is bounded above has a least upper bound (a supremum).\n\n\n\n1.3.2 Properties and Consequences of the Axioms\n\nAbsolute Value: The absolute value of x, denoted \\(|x|\\), is its distance from zero. Its most important property is the Triangle Inequality: \\(|x + y| \\le |x| + |y|\\).\nArchimedean Property: A consequence of completeness, this states that for any real number x, there exists a natural number n such that \\(n &gt; x\\).\nDensity: Both the rational numbers (\\(\\mathbb{Q}\\)) and the irrational numbers are dense in the real number line, meaning between any two real numbers, you can always find one of each.\n\n\n\n\n1.4 Sizing Infinity: Cardinality and the Continuum\n\n1.4.1 Countable vs. Uncountable Sets\n\nCountable Set: An infinite set that can be put into a one-to-one correspondence with the natural numbers (\\(\\mathbb{N}\\)). The rational numbers (\\(\\mathbb{Q}\\)) are a key example of a countable set.\nUncountable Set: An infinite set that is too large to be put into a one-to-one correspondence with \\(\\mathbb{N}\\).\n\n\n\n1.4.2 The Continuum\nThe set of real numbers (\\(\\mathbb{R}\\)) is uncountable, a fact proven by Cantor’s diagonalization argument. An infinite set that has the same cardinality (size) as the real numbers is said to have the cardinality of the continuum. This reveals that there are different, distinct sizes of infinity.\n\n\n\n1.5 Introduction to Complex Numbers\nA complex number extends the real number system by introducing the imaginary unit, \\(i\\), defined by \\(i^2 = -1\\). \\[ z = a + bi \\]\n\n\\(a\\) is the real part and \\(b\\) is the imaginary part.\nComplex numbers are visualized on a two-dimensional complex plane (or Argand plane).\n\n\n\n1.5.1 Geometric Properties\n\nModulus (\\(|z|\\)): The distance from the origin to the point \\((a, b)\\). Calculated as \\(|z| = \\sqrt{a^2 + b^2}\\).\nArgument (\\(\\theta\\)): The angle the line from the origin to \\((a, b)\\) makes with the positive real axis.\nThe equation \\(|z - c| = r\\) represents a circle of radius r centered at the complex number c. This leads to several important geometric sets:\n\n\\(|z - c| \\le r\\) describes a closed disk (the circle and its interior).\n\\(|z - c| &lt; r\\) describes an open disk (the interior of the circle only).\n\\(|z - c| \\ge r\\) describes the exterior of a disk, including its boundary.\n\n\n\n\n1.5.2 Trigonometric and Exponential Forms\nUsing the modulus r and argument \\(\\theta\\), a complex number can be expressed in two other crucial forms:\n\nTrigonometric Form: \\(z = r(\\cos\\theta + i\\sin\\theta)\\)\nExponential (Polar) Form: Using Euler’s Formula, \\(e^{i\\theta} = \\cos\\theta + i\\sin\\theta\\), we get the compact form \\(z = re^{i\\theta}\\).\n\n\n\n\n1.6 De Moivre’s Theorem\nThis theorem provides a straightforward way to calculate powers and roots of complex numbers.\n\nPowers: For any integer n, the n-th power of a complex number is: \\[ z^n = r^n(\\cos(n\\theta) + i\\sin(n\\theta)) \\]\nRoots: A complex number has exactly n distinct n-th roots, given by: \\[ \\sqrt[n]{z} = \\sqrt[n]{r} \\left( \\cos\\left(\\frac{\\theta + 2k\\pi}{n}\\right) + i\\sin\\left(\\frac{\\theta + 2k\\pi}{n}\\right) \\right) \\] for \\(k = 0, 1, 2, \\dots, n-1\\).\n\n\n\n1.7 The Principle of Mathematical Induction\n\n1.7.1 A Tool for Deductive Proof\nMathematical induction is a rigorous proof technique used to establish that a statement holds for all natural numbers. It is a deductive method and should not be confused with inductive reasoning (generalizing from patterns).\n\n\n1.7.2 The Domino Effect: Base Case and Inductive Step\nA proof by induction requires two parts:\n\nBase Case: Prove the statement is true for the first value (e.g., \\(n=1\\)).\nInductive Step: Assume the statement is true for an arbitrary integer \\(k\\) (the Inductive Hypothesis), and use this assumption to prove the statement is also true for \\(k+1\\).\n\n\n\n\n1.7.3 A Cautionary Tale: Moser’s Circle Problem\nThe danger of relying on patterns is shown by Moser’s circle problem. If you place n points on a circle and connect them, the number of regions appears to be \\(2^{n-1}\\) for \\(n=1, ..., 5\\). However, this pattern fails at \\(n=6\\). This illustrates why a rigorous proof like induction is essential.\n\n\n\n\n2. Definitions\n\nSet: A well-defined collection of distinct objects.\nSubset: A set A is a subset of B if all elements of A are also elements of B.\nCountable Set: An infinite set whose elements can be put into a one-to-one correspondence with the natural numbers.\nUncountable Set: An infinite set that is not countable (e.g., the real numbers).\nContinuum: The cardinality (size) of the set of real numbers.\nSupremum (sup): The least upper bound of a set of real numbers.\nInfimum (inf): The greatest lower bound of a set of real numbers.\nComplex Number: A number of the form \\(a + bi\\), where \\(a, b \\in \\mathbb{R}\\) and \\(i = \\sqrt{-1}\\).\nComplex Plane: A two-dimensional plane for representing complex numbers.\nModulus (\\(|z|\\)): The magnitude of a complex number; its distance from the origin.\nArgument (\\(\\theta\\)): The angle of a complex number’s vector on the complex plane.\nEuler’s Formula: The identity \\(e^{i\\theta} = \\cos\\theta + i\\sin\\theta\\).\nDe Moivre’s Theorem: A formula for computing powers and roots of complex numbers.\nMathematical Induction: A proof technique used to establish the truth of a statement for all natural numbers.\n\n\n\n3. Formulas\n\nDe Morgan’s Laws: \\((A \\cup B)^c = A^c \\cap B^c\\) and \\((A \\cap B)^c = A^c \\cup B^c\\)\nTriangle Inequality: \\(|x + y| \\le |x| + |y|\\)\nBernoulli’s Inequality: For \\(x &gt; -1\\) and integer \\(n \\ge 1\\), \\((1+x)^n \\ge 1+nx\\).\nModulus of a Complex Number: \\(|z| = \\sqrt{a^2 + b^2}\\)\nTrigonometric Form: \\(z = r(\\cos\\theta + i\\sin\\theta)\\)\nEuler’s Formula: \\(e^{i\\theta} = \\cos\\theta + i\\sin\\theta\\)\nExponential (Polar) Form: \\(z = re^{i\\theta}\\)\nDe Moivre’s Theorem (Powers): \\(z^n = r^n(\\cos(n\\theta) + i\\sin(n\\theta))\\)\nDe Moivre’s Theorem (Roots): \\(\\sqrt[n]{z} = \\sqrt[n]{r} \\left( \\cos\\left(\\frac{\\theta + 2k\\pi}{n}\\right) + i\\sin\\left(\\frac{\\theta + 2k\\pi}{n}\\right) \\right)\\) for \\(k = 0, \\dots, n-1\\)\n\n\n\n4. Mistakes\n\nConfusing Inductive Reasoning with Mathematical Induction: Observing a pattern for a few cases (e.g., Moser’s circle problem) and concluding it holds for all cases. Why it’s wrong: Patterns can break. Mathematical induction is a rigorous proof that establishes a logical link between successive cases.\nApplying Familiar Rules Blindly: Manipulating infinite series as if they were finite sums or cancelling terms without checking for division by zero. Why it’s wrong: The rules of finite arithmetic do not always apply to infinite processes and require rigorous justification from analysis.\nForgetting the Quadrant for the Argument: Using \\(\\theta = \\tan^{-1}(b/a)\\) without checking the signs of a and b. Why it’s wrong: The arctan function has a limited range. You must adjust the angle to place it in the correct quadrant, otherwise all subsequent calculations will be incorrect.\nFinding Only One n-th Root: When asked for the roots of a complex number, only calculating the principal root (for \\(k=0\\)). Why it’s wrong: A complex number has exactly n distinct n-th roots. You must iterate through \\(k = 0, 1, \\dots, n-1\\).\nSkipping the Base Case in Induction: Starting an induction proof with the inductive hypothesis without first proving the statement is true for the initial value. Why it’s wrong: The entire logical chain depends on the first “domino” falling. Without a valid base case, the proof is meaningless.\nAssuming P(k+1) is True in the Inductive Step: Starting the inductive step by writing down the statement for \\(k+1\\). Why it’s wrong: This is circular reasoning. The correct method is to start with the assumption for k and logically derive the statement for \\(k+1\\).\n\n\n\n5. Examples\n\n5.1. Irrationality Proof\nQuestion: Prove that \\(\\sqrt{2}\\) is an irrational number.\n\n\nClick to see the solution\n\n\nAssume the opposite: Assume \\(\\sqrt{2}\\) is rational, so \\(\\sqrt{2} = p/q\\) where \\(p, q\\) are integers with no common factors.\nSquare both sides: \\(2 = p^2/q^2 \\implies p^2 = 2q^2\\).\nDeduce properties of p: \\(p^2\\) is even, so p must be even. Let \\(p = 2k\\).\nSubstitute and deduce properties of q: \\((2k)^2 = 2q^2 \\implies 4k^2 = 2q^2 \\implies q^2 = 2k^2\\). So \\(q^2\\) is even, which means q is even.\nContradiction: Both p and q are even, contradicting that they have no common factors. Answer: Therefore, \\(\\sqrt{2}\\) is irrational.\n\n\n\n\n5.2. Finding Supremum and Infimum\nQuestion: Find the supremum and infimum of the set \\(E = \\{ \\frac{1}{n} : n \\in \\mathbb{N} \\}\\).\n\n\nClick to see the solution\n\n\nList elements: The set is \\(\\{1, \\frac{1}{2}, \\frac{1}{3}, ...\\}\\).\nFind bounds: The largest element is 1. As n grows, the elements approach 0 but never reach it.\nIdentify sup and inf: The least upper bound is 1. The greatest lower bound is 0.\nCheck for max/min: The supremum (1) is in the set, so it is a maximum. The infimum (0) is not in the set, so there is no minimum. Answer: \\(\\sup(E) = 1\\), \\(\\inf(E) = 0\\).\n\n\n\n\n5.3. Complex Number Division\nQuestion: Find the values of \\(P\\) and \\(Q\\) if \\(P+Qi = \\frac{3-i}{1+i}\\).\n\n\nClick to see the solution\n\n\nMultiply by the complex conjugate of the denominator, which is \\(1-i\\). \\[ \\frac{3-i}{1+i} \\times \\frac{1-i}{1-i} = \\frac{3 - 3i - i + i^2}{1^2 - i^2} \\]\nSimplify: \\[ \\frac{3 - 4i - 1}{1 - (-1)} = \\frac{2 - 4i}{2} = 1 - 2i \\]\nIdentify P and Q: Comparing \\(1-2i\\) with \\(P+Qi\\), we find \\(P=1\\) and \\(Q=-2\\). Answer: \\(P=1\\), \\(Q=-2\\).\n\n\n\n\n5.4. Powers of Complex Numbers\nQuestion: Compute \\((1 - i)^{8}\\) using De Moivre’s Theorem.\n\n\nClick to see the solution\n\n\nConvert to trigonometric form: For \\(z = 1-i\\), the modulus is \\(r = \\sqrt{1^2 + (-1)^2} = \\sqrt{2}\\). The argument is \\(\\theta = 7\\pi/4\\) (or \\(-\\pi/4\\)). So \\(z = \\sqrt{2}(\\cos(7\\pi/4) + i\\sin(7\\pi/4))\\).\nApply De Moivre’s Theorem with \\(n=8\\): \\[ z^8 = (\\sqrt{2})^8 \\left( \\cos\\left(8 \\cdot \\frac{7\\pi}{4}\\right) + i\\sin\\left(8 \\cdot \\frac{7\\pi}{4}\\right) \\right) \\]\nSimplify: \\[ z^8 = 16 ( \\cos(14\\pi) + i\\sin(14\\pi) ) = 16(1 + i \\cdot 0) = 16 \\] Answer: 16.\n\n\n\n\n5.5. Roots of Complex Numbers\nQuestion: Find the three cube roots of \\(z = -8i\\).\n\n\nClick to see the solution\n\n\nConvert to trigonometric form: For \\(z=-8i\\), \\(r=8\\) and \\(\\theta=3\\pi/2\\).\nApply the n-th root formula with \\(n=3\\), \\(k=0, 1, 2\\): \\[ w_k = \\sqrt[3]{8} \\left( \\cos\\left(\\frac{3\\pi/2 + 2k\\pi}{3}\\right) + i\\sin\\left(\\frac{3\\pi/2 + 2k\\pi}{3}\\right) \\right) \\]\nCalculate for \\(k=0\\): \\(w_0 = 2(\\cos(\\pi/2) + i\\sin(\\pi/2)) = 2i\\).\nCalculate for \\(k=1\\): \\(w_1 = 2(\\cos(7\\pi/6) + i\\sin(7\\pi/6)) = -\\sqrt{3} - i\\).\nCalculate for \\(k=2\\): \\(w_2 = 2(\\cos(11\\pi/6) + i\\sin(11\\pi/6)) = \\sqrt{3} - i\\). Answer: The three cube roots are \\(2i\\), \\(-\\sqrt{3} - i\\), and \\(\\sqrt{3} - i\\).\n\n\n\n\n5.6. Geometric Set Description\nQuestion: Describe the set of points in the complex plane satisfying \\(1 \\le |z + 2| &lt; 3\\).\n\n\nClick to see the solution\n\n\nInterpret the expression: \\(|z+2|\\) is \\(|z - (-2)|\\), the distance from \\(z\\) to the point \\(-2\\).\nInterpret the inequalities: The distance must be greater than or equal to 1, and less than 3.\nCombine: This describes an annulus (a ring) centered at \\(-2\\), with an inner radius of 1 (inclusive) and an outer radius of 3 (exclusive). Answer: The set is an annulus centered at \\(-2+0i\\), including the inner circle of radius 1 and excluding the outer circle of radius 3.\n\n\n\n\n5.7. Induction with Divisibility\nQuestion: Prove that \\(4^n - 1\\) is divisible by 3 for all integers \\(n \\ge 1\\).\n\n\nClick to see the solution\n\n\nBase Case (\\(n=1\\)): \\(4^1 - 1 = 3\\), which is divisible by 3. True.\nInductive Hypothesis: Assume for some integer \\(k \\ge 1\\), \\(4^k - 1 = 3m\\) for some integer \\(m\\).\nInductive Step: We must prove \\(4^{k+1} - 1\\) is divisible by 3. \\[ 4^{k+1} - 1 = 4 \\cdot 4^k - 1 \\] From the hypothesis, \\(4^k = 3m + 1\\). Substitute this in. \\[ 4(3m + 1) - 1 = 12m + 4 - 1 = 12m + 3 = 3(4m + 1) \\] This is a multiple of 3. Answer: By the principle of mathematical induction, the statement is true for all integers \\(n \\ge 1\\).",
    "crumbs": [
      "Mathematical Analysis I",
      "1. Real Analysis, Complex Numbers"
    ]
  },
  {
    "objectID": "Computer Architecture/lec_1.html",
    "href": "Computer Architecture/lec_1.html",
    "title": "1. Computer Architecture, CPU Principles, Memory Hierarchy, FPGA Boards",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 What is a Computer?\nA computer is an electronic machine designed to automatically execute a sequence of arithmetic or logical operations based on a given program. It processes input data and produces an output result. Fundamentally, computers operate on binary data—strings of zeros and ones—manipulating this input to generate a binary output according to a predefined sequence of instructions.\n\n\n\n1.2 The Problem Solution Stack\nSolving a problem with a computer involves multiple layers of abstraction, from the physical world to the software application. This is often visualized as a stack.\n\nProblem to Solve: The high-level goal.\nAlgorithm + Data Structures: The conceptual solution.\nUser Program: The implementation in a high-level language (e.g., C++, Python).\nSystem Programs: The operating system and compilers that translate the user program into machine instructions.\nProcessor Instruction Set Architecture (ISA): The specific set of low-level instructions the hardware can execute. This is the interface between hardware and software.\nMicroarchitecture: The specific implementation of the ISA in hardware (e.g., how the CPU components are arranged and connected).\nLogic Circuits: The fundamental building blocks, like AND and OR gates, that implement the microarchitecture.\nElectrons, Photons, etc.: The underlying physics that makes the circuits work.\n\nComputer architecture is the study of the layers from the Instruction Set Architecture down to the logic circuits, including how they interact with system software.\n\n\n1.3 What is Computer Architecture?\nComputer Architecture is a field of computer science and engineering that covers three main areas:\n\nHardware organization of computer systems: How components like the CPU, memory, and I/O devices are structured and interconnected.\nHardware/Software interaction principles: The rules and methods by which software controls the hardware, primarily through the instruction set.\nPerformance-related computer aspects: Analyzing and designing systems to optimize for speed, power efficiency, and cost.\n\nStudying architecture helps us understand how to design efficient hardware, write high-performance software, and customize computing systems for specific tasks.\n\n\n1.4 Core Components of a Computer\nA modern computer’s architecture is built around several key interacting components.\n\n1.4.1 CPU (Central Processing Unit)\nThe “brain” of the computer, the CPU executes program instructions. It is a complex electrical circuit with several key parts:\n\nControl Unit (CU): Fetches instructions from memory, decodes them, and directs the other components to carry them out.\nArithmetic-Logic Unit (ALU): Performs all arithmetic (e.g., addition, subtraction) and logical (e.g., AND, OR) operations.\nRegisters: A small number of extremely fast memory locations located directly within the CPU. They hold data that is being actively processed, such as the arguments for an ALU operation or its result.\n\n\n\n\n1.4.2 The Processor Principle\nA processor operates by receiving electrical signals on its input pins and producing a result on its output pins. The inputs consist of:\n\nInstruction Code: A binary code that tells the processor which operation to perform (e.g., 0 for logical OR, 1 for logical AND).\nInput Arguments: The data values on which the operation will be performed.\n\nThe combination of the instruction code and its arguments forms a machine instruction (e.g., the binary string 010 could mean “OR the values 1 and 0”).\n\n\n1.4.3 System Memory (RAM)\nRandom Access Memory is the computer’s main workspace. It stores program instructions and data for the CPU to access quickly. RAM is volatile, meaning its contents are lost when power is cut.\n\n\n1.4.4 Storage Devices:\nThese provide long-term, non-volatile storage for the operating system, applications, and files. Examples include Solid-State Drives (SSDs) and hard disk drives (HDDs). Data is loaded from storage into RAM for execution.\n\n\n1.4.5 Input/Output (I/O) Devices\nPeripherals that allow the computer to interact with the world, such as keyboards, monitors, printers, and network interfaces.\n\n\n1.4.6 Communication Bus\nThe set of electrical pathways connecting all components, allowing them to communicate and exchange data. Bus speed is a critical factor in system performance. Significant delays in data transfer between the CPU and memory lead to the “memory wall problem,” a key performance limitation in modern computers.\n\n\n1.5 The Memory Hierarchy\nTo balance speed, cost, and capacity, computers organize memory in a hierarchy. Data is moved between levels based on how frequently the CPU needs it.\n\nRegisters (inside the CPU): Fastest access (&lt;1 nanosecond), smallest capacity (hundreds of bytes).\nCPU Cache (L1, L2, L3): Very fast memory on or near the CPU. It stores copies of frequently used data from RAM.\n\nL1 Cache: Embedded in each CPU core, fastest cache, smallest capacity (tens of kilobytes).\nL2 Cache: Slower but larger than L1.\nL3 Cache (LLC - Last Level Cache): Shared among all CPU cores, slowest and largest cache (megabytes).\n\nSystem Memory (RAM): Much larger capacity (gigabytes) but significantly slower than cache.\nStorage Devices (SSD/HDD): Largest capacity (terabytes) but the slowest access speeds.\n\n\n\n\n1.6 CPU Architectures and Multicore Systems\nA CPU’s design is defined by its Instruction Set Architecture (ISA).\n\n1.6.1 Widely-known Architectures\n\nIntel x86 / AMD64: Dominant in desktop and server computers (CISC - Complex Instruction Set Computer).\nARM: Dominant in mobile and embedded devices (RISC - Reduced Instruction Set Computer).\nRISC-V: A modern, open-standard RISC architecture gaining popularity.\nOthers include Baikal and Elbrus.\n\n\n\n1.6.2 Multicore Systems\nModern CPUs are multicore processors, meaning a single chip contains multiple independent processing units (cores). Each core has its own ALU, CU, and L1 cache, while typically sharing an L3 cache and main memory. This allows for parallel execution of tasks but introduces challenges in coordinating, or scheduling, work across the cores.\n\n\n\n1.7 Processors vs. FPGAs\nA standard CPU is a general-purpose processor with a fixed, unchangeable hardware design. An FPGA (Field-Programmable Gate Array) is an integrated circuit containing a grid of configurable logic blocks that can be reprogrammed by the user after manufacturing.\n\n1.7.1 Key Differences\n\nProgrammability: A CPU’s hardware is fixed; it executes software. An FPGA’s hardware itself is reconfigured to create a custom circuit.\nInstruction Set: A CPU has a fixed instruction set defined by its manufacturer. An FPGA has no inherent instruction set; you design the digital logic circuits directly.\nComputation Speed: For general tasks, CPUs are optimized and efficient. For highly specific, parallelizable tasks, an FPGA’s custom hardware can be much faster.\nPower Consumption: FPGAs typically consume more power than a CPU for the same task due to their programmable nature.\nCost: FPGAs are generally more expensive than mass-produced CPUs.\n\n\n\n1.7.2 Use Cases for FPGAs\nFPGAs are used for prototyping new processor designs, high-frequency trading, real-time signal processing, and other tasks requiring massive parallelism and low latency.\n\n\n\n1.8 FPGA Programming and Development Boards\nFPGAs are programmed using a Hardware Description Language (HDL) like Verilog or VHDL. These languages describe the structure of hardware circuits rather than a sequence of software instructions. A tool like Intel Quartus Prime Lite is used to synthesize the HDL code into a configuration file that is then loaded onto the FPGA.\nEducational boards like the DE10-Lite MAX 10 include an FPGA chip along with various I/O devices for hands-on learning, such as:\n\nLEDs and Switches\nPush Buttons\n7-Segment Displays\nVGA Output\nAccelerometer (G-Sensor)\nGPIO (General-Purpose Input/Output) pins\n\n\n\n\n2. Definitions\n\nComputer: An electronic device that processes data by executing a sequence of instructions defined in a program.\nComputer Architecture: The design and operational structure of a computer system, defining its hardware components, their interconnections, and the hardware-software interface (the instruction set).\nCPU (Central Processing Unit): The component of a computer that executes program instructions and performs arithmetic, logic, and control operations.\nALU (Arithmetic-Logic Unit): A digital circuit within the CPU that performs arithmetic and bitwise logic operations.\nCU (Control Unit): The component of the CPU that directs the processor by interpreting instructions and generating control signals.\nRegister: A small, high-speed storage location directly within the CPU.\nInstruction Set Architecture (ISA): The specific set of commands that a CPU can execute, acting as the interface between the hardware and the software.\nSystem Memory (RAM): Volatile memory that stores data and machine code currently in use.\nCPU Cache: A small, fast volatile memory that stores copies of frequently used data from main memory to reduce access times.\nMemory Hierarchy: A tiered structure of memory and storage devices that balances speed, cost, and capacity.\nFPGA (Field-Programmable Gate Array): An integrated circuit with configurable logic blocks and programmable interconnects that can be rewired by the user after manufacturing.\nVerilog HDL: A hardware description language (HDL) used to model and design digital electronic systems.\nMulticore Processor: A single CPU chip that contains two or more independent processing units called “cores.”\n\n\n\n3. Mistakes\n\nConfusing an FPGA with a CPU: Treating an FPGA as just a “faster CPU.” Why it’s wrong: They are fundamentally different. A CPU is a fixed processor that runs software instructions, while an FPGA is a blank slate of configurable hardware. An FPGA is only faster for tasks that can be efficiently implemented in custom, parallel hardware.\nIgnoring the Memory Hierarchy: Writing code without considering how data moves between CPU cache and main memory. Why it’s wrong: The “memory wall”—the large speed gap between the CPU and RAM—is a primary performance bottleneck. Programs that access memory without locality will perform poorly as the CPU constantly stalls waiting for data.\nTreating Verilog like a software programming language: Writing Verilog code sequentially and expecting it to execute line by line. Why it’s wrong: Verilog is a hardware description language. It describes physical circuits that operate in parallel. This misunderstanding leads to designs that don’t synthesize into working hardware or behave unexpectedly.\nBelieving a processor’s functionality can be changed with software: Thinking you can add new hardware-level instructions to a CPU through a software update. Why it’s wrong: A CPU’s instruction set is physically etched into its silicon circuits during manufacturing and cannot be altered.\nUnderestimating the Communication Bus: Focusing only on CPU speed while ignoring the performance of the bus connecting the CPU to RAM. Why it’s wrong: A slow bus will starve a fast CPU of data, creating a massive bottleneck. The entire system’s performance depends on the ability of the bus to transfer data efficiently.\n\n\n\n4. Examples\n\n4.1 Simple Logic in Verilog\nQuestion: Write a Verilog module that implements a simple AND gate. It should take two single-bit inputs, a and b, and produce one single-bit output, y.\n\n\nClick to see the solution\n\n\nDefine the module: Start by declaring a module with a name (e.g., simple_and) and list its input and output ports. verilog     module simple_and(         input  logic a,         input  logic b,         output logic y     );\nAssign the logic: Use a continuous assign statement to describe the relationship between the inputs and the output. The & operator performs a bitwise AND operation. verilog     assign y = a & b;\nEnd the module: Close the module definition. verilog     endmodule\n\nAnswer: The complete Verilog module is:\nmodule simple_and(\n    input  logic a,\n    input  logic b,\n    output logic y\n);\n\nassign y = a & b;\n\nendmodule\n\n\n\n4.2 Controlling an LED with a Switch\nQuestion: On an FPGA board like the DE10-Lite, you have a switch (SW0) and an LED (LED0). Write a Verilog module to make the LED turn on when the switch is on, and turn off when the switch is off.\n\n\nClick to see the solution\n\n\nDefine the module and ports: Create a module named led_control with one input for the switch and one output for the LED. verilog     module led_control(         input  logic SW0,         output logic LED0     );\nConnect the switch to the LED: The simplest way to achieve this is to directly connect the input to the output. An assign statement creates a “wire” between the two. verilog     assign LED0 = SW0;\nEnd the module: Close the module definition. verilog     endmodule Answer: The Verilog module directly connects the switch’s state to the LED’s state:\n\nmodule led_control(\n    input  logic SW0,\n    output logic LED0\n);\n\nassign LED0 = SW0;\n\nendmodule\n\n\n\n4.3 CPU vs. FPGA Application Choice\nQuestion: You are designing a system for real-time video encoding that needs to process 4K video at 60 frames per second with very low latency. Would a general-purpose CPU or an FPGA be a better choice for the core processing unit? Explain why.\n\n\nClick to see the solution\n\n\nAnalyze the task requirements: The task involves processing a massive, continuous stream of data (4K video) with strict timing constraints (60 fps, low latency). The operations are highly repetitive and can be broken down into many small, parallel steps.\nEvaluate the CPU’s suitability: A CPU would process the video frames using software. While powerful, it executes instructions sequentially (even with multiple cores) and has overhead from the operating system. Achieving consistent low latency for every single frame would be extremely challenging.\nEvaluate the FPGA’s suitability: An FPGA can be configured to have a dedicated hardware pipeline for video processing. Multiple stages of the encoding algorithm can run simultaneously on different parts of the chip. This massive parallelism is ideal for video streams and guarantees consistent, low-latency processing. Answer: An FPGA is the better choice. Why: Video encoding is a highly parallel task. An FPGA allows for the creation of a custom hardware pipeline where many calculations happen simultaneously, which is far more efficient and provides the low, predictable latency required for real-time processing, something a general-purpose CPU struggling with OS and other overheads cannot guarantee.\n\n\n\n\n4.4 Memory Hierarchy Access\nQuestion: A program is executing a for loop that repeatedly adds two numbers. The machine code instruction for the addition operation is currently being executed by the CPU. In which level of the memory hierarchy would you most likely find this instruction?\n\n\nClick to see the solution\n\n\nConsider the CPU’s immediate needs: The CPU can only execute instructions that are physically inside it.\nRecall the fastest memory level: The fastest and closest memory to the ALU and CU are the registers. The Control Unit fetches instructions from memory into a special-purpose register (often called the Instruction Register) just before decoding and execution.\nConsider the role of cache: Since the instruction is part of a loop, it’s being used repeatedly. Therefore, it is almost certain to have been copied from the slower main memory (RAM) into the much faster L1 instruction cache for quick access on subsequent loop iterations.\nCombine the points: The instruction must be in a register to be executed. Given it’s in a loop, it would also reside in the L1 cache to avoid fetching it from slow RAM every time. The most immediate location is a register. Answer: The instruction would be found in a CPU register (specifically, the instruction register) at the moment of execution. A copy of it would also reside in the L1 cache for fast re-access during the next iteration of the loop.\n\n\n\n\n4.5 2-to-1 Multiplexer in Verilog\nQuestion: A 2-to-1 multiplexer (MUX) is a circuit that selects one of two inputs (a or b) to pass to the output (y) based on a selector signal (sel). If sel is 0, y should be a. If sel is 1, y should be b. Implement this in a Verilog module.\n\n\nClick to see the solution\n\n\nDefine the module and its ports: The module requires three inputs (a, b, sel) and one output (y). verilog     module mux_2_to_1(         input  logic a,         input  logic b,         input  logic sel,         output logic y     );\nImplement the selection logic: A conditional assign statement using the ternary operator (? :) is a concise way to model this. The structure is condition ? value_if_true : value_if_false. verilog     assign y = (sel == 1) ? b : a; This line reads as: “Assign y the value of b if sel is 1; otherwise, assign it the value of a.”\nEnd the module: Close the module definition. verilog     endmodule Answer: The complete Verilog module for a 2-to-1 MUX is:\n\nmodule mux_2_to_1(\n    input  logic a,\n    input  logic b,\n    input  logic sel,\n    output logic y\n);\n\nassign y = sel ? b : a; // A more compact way of writing (sel == 1)\n\nendmodule\n\n\n\n4.6 Processor Instruction Set Limitation\nQuestion: Imagine a very simple processor whose instruction set only contains ADD, SUBTRACT, and STORE. You need to perform a multiplication, for example, 5 * 3. How could you accomplish this using only the available instructions?\n\n\nClick to see the solution\n\n\nUnderstand the core concept of multiplication: Multiplication is repeated addition. For example, 5 * 3 is the same as 5 + 5 + 5.\nFormulate an algorithm using available instructions:\n\nInitialize a result variable (in a register, let’s call it R1) to 0.\nUse the ADD instruction to add 5 to R1.\nUse the ADD instruction again to add 5 to R1. R1 now holds 10.\nUse the ADD instruction a third time to add 5 to R1. R1 now holds 15.\nUse the STORE instruction to save the value from R1 to a memory location.\n\nStructure the process: This would be implemented as a software loop. The program would use the ADD instruction three times. Answer: You can perform multiplication by implementing it as a series of additions. To calculate 5 * 3, you would write a short program that uses a loop to execute the ADD 5 instruction three times, accumulating the result in a register.\n\n\n\n\n4.7 Identifying FPGA Board Components\nQuestion: You are looking at a DE10-Lite FPGA board. You see a large, square chip in the center labeled “MAX 10”. What is the function of this component?\n\n\nClick to see the solution\n\n\nAnalyze the component’s description: The chip is large, centrally located, and has a specific model name (“MAX 10”).\nRecall the purpose of an FPGA board: The primary purpose of an FPGA development board is to provide a platform for programming and testing an FPGA.\nConnect the information: The central, most prominent chip on an FPGA board is almost always the FPGA itself. The “MAX 10” is a product family of FPGAs made by Altera (now Intel). Answer: The chip labeled “MAX 10” is the FPGA (Field-Programmable Gate Array) itself. It is the main component that you program with your hardware design using a language like Verilog.",
    "crumbs": [
      "Computer Architecture",
      "1. Computer Architecture, CPU Principles, Memory Hierarchy, FPGA Boards"
    ]
  },
  {
    "objectID": "Computer Architecture/lec_2.html",
    "href": "Computer Architecture/lec_2.html",
    "title": "2. Hierarchy of Memories, Moore’s Law, Parallelism, Pipelining, and Design Principles",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 The Hierarchy of Memories\nIn computer architecture, the memory hierarchy is a fundamental concept that organizes a computer’s storage into a pyramid-like structure. This organization is necessary to balance three competing factors: speed, capacity, and cost. Processors are extremely fast, but high-speed memory is expensive and thus has a small capacity. Conversely, large-capacity storage is affordable but much slower. The memory hierarchy solves this problem by creating layers of memory, where each level is smaller, faster, and more expensive per byte than the level below it. The closer a memory level is to the CPU, the faster the CPU can access it.\nThe typical levels of the memory hierarchy, from fastest to slowest, are:\n\nCPU Registers: These are the fastest and smallest memory units, located directly inside the CPU. They hold the data that the CPU is actively manipulating at any given moment, such as the results of arithmetic operations. Access is virtually instantaneous, occurring within a single CPU clock cycle.\nCache Memory: This is a small, very fast memory that sits between the CPU and the main system memory. It stores frequently accessed data and instructions, allowing the CPU to retrieve them much faster than from the main memory. This process of storing data in a cache is known as caching. Caches are typically divided into levels (L1, L2, L3), with L1 being the smallest and fastest.\nSystem Memory (RAM - Random Access Memory): This is the computer’s main working memory, where the operating system, applications, and data in current use are kept so that they can be quickly reached by the computer’s processor. It is significantly larger than cache but also slower.\nStorage Devices (Secondary Storage): This includes devices like Solid-State Drives (SSDs) and Flash Memory. They provide long-term, high-capacity storage for data and programs. This is the slowest but largest level of the hierarchy and is used to store data persistently.\n\n\nAn important distinction within the hierarchy is between volatile and non-volatile memory.\n\nVolatile Memory (Registers, Cache, RAM) requires power to maintain the stored information. It loses all its data when the power is turned off.\nNon-Volatile Memory (SSDs, HDDs, Flash Memory) retains its stored information even when not powered.\n\n\n\n1.2 Design Simplification via Abstraction\nAbstraction is a core principle in computer architecture used to manage complexity. It involves hiding the complex details of a system while exposing only the essential features. This allows designers and programmers to work with a simplified model of a component without needing to understand its intricate internal workings.\nFor example, a CPU can be viewed at several levels of abstraction:\n\nHighest Level (Simplest): A programmer views the CPU as a single, opaque block that executes instructions. They interact with it through a defined instruction set without needing to know how the instructions are physically carried out.\nIntermediate Level: An architect sees the CPU as a collection of major functional components, such as the Control Unit (CU), Arithmetic Logic Unit (ALU), and registers. This level describes what the components do and how they connect.\nLowest Level (Most Detailed): An engineer sees the CPU as a detailed diagram of logic gates, transistors, and wires that implement its functions. This level describes how the components are built.\n\nBy using abstraction, a complex system like a computer can be designed, built, and programmed in manageable layers.\n\n\n1.3 Moore’s Law and Its Stagnation\nMoore’s Law is an observation made by Intel co-founder Gordon Moore in 1965. It states that the number of transistors on an integrated circuit (IC) doubles approximately every two years. For decades, this trend also meant that CPU execution speed doubled every 18-24 months, leading to exponential growth in computing power.\nHowever, since around 2008, the growth in single-thread performance and CPU clock speed has significantly slowed down, leading to what is often called the stagnation of Moore’s Law. This is not because transistor density has stopped increasing, but because of two fundamental physical limits:\n\nHeat Dissipation: As transistors become smaller and more densely packed, the heat they generate becomes a major problem. Increasing clock speed further leads to higher power consumption and excessive heat, which can damage the chip and requires complex cooling solutions. This is known as the power wall.\nSpeed of Light Limitation: Signals within a CPU chip travel at nearly the speed of light. As chips get faster and more complex, the time it takes for a signal to travel across the chip becomes a significant limiting factor in how quickly the chip can operate.\n\nBecause of these limitations, the industry has shifted its focus from making single processors faster to adding more processors (or cores) to a single chip. This has led to the rise of multicore and multiprocessor systems, where performance is increased through parallelism rather than raw clock speed.\n\n\n1.4 Performance via Parallelism\nParallelism, or parallel processing, involves using multiple processing units to execute multiple tasks or parts of a single task simultaneously. This contrasts with a uniprocessor system, which executes instructions sequentially (one after another). A computer with multiple CPUs or a single CPU with multiple cores is a parallel system.\nThe goal of multiprocessing is to speed up computation by dividing work among multiple cores. This is highly effective for tasks that can be broken down into independent sub-tasks. However, a major challenge is instruction dependency, where one instruction needs the result of a previous one before it can execute. Such dependencies force a sequential execution and limit the benefits of parallelism, a concept formalized by Amdahl’s Law.\n\n\n1.5 Performance via Pipelining\nPipelining is another technique to improve performance, but it works differently from parallelism. Instead of using multiple processors, pipelining uses a single processor and breaks down the execution of an instruction into several stages. It then overlaps these stages for different instructions, much like an assembly line. This increases the instruction throughput (the number of instructions completed per unit of time).\nA classic five-stage pipeline includes:\n\nInstruction Fetch (IF): Fetch the next instruction from memory.\nInstruction Decode (ID): Decode the instruction to determine the required action.\nExecute (EX): Perform the calculation using the ALU.\nMemory Access (MEM): Read from or write to system memory if required.\nWrite Back (WB): Write the result back to a CPU register.\n\nWhile one instruction is in the Execute stage, the next one is being decoded, and the one after that is being fetched. Pipelining improves performance by increasing instruction throughput on a single processor, while parallelism improves performance by running multiple instructions truly simultaneously on different hardware units.\n\n\n1.6 Performance via Speculation (Prediction)\nSpeculative execution is an optimization technique where a processor makes an educated guess about the future execution path of a program and begins executing instructions from that predicted path before it’s certain the path will be taken. This is most commonly used for branch prediction.\nWhen the CPU encounters a conditional branch (e.g., an if statement), instead of waiting to see which branch is taken (which would stall the pipeline), the branch predictor guesses the outcome. The CPU then speculatively executes instructions along the predicted path. * If the prediction was correct, the results are kept, and time was saved by avoiding a pipeline stall. * If the prediction was incorrect, the speculative results are discarded, and the CPU starts executing from the correct path. This incurs a performance penalty, but since modern predictors are highly accurate (often &gt;95%), the overall performance gain is significant.\n\n\n1.7 Other Fundamental Ideas\n\nDependability via Redundancy: This principle involves adding spare components (e.g., extra CPUs, memory units, or power supplies) to a system to increase its reliability. If a primary component fails, a redundant one can take over, ensuring the system continues to operate without interruption. This is critical in applications like spacecraft, servers, and other mission-critical systems.\nMake the Common Case Fast: This is a design philosophy that prioritizes optimizing the performance of the most frequent operations or use cases. By focusing engineering resources on making common tasks as fast as possible, the overall system performance is improved, even if less common tasks are not as highly optimized.\nFinite State Machines (FSM): An FSM is a mathematical model of computation used to design both hardware and software systems. It consists of a finite number of states and the transitions between them, which are triggered by inputs. FSMs are a powerful and convenient tool for modeling the behavior of systems like network protocols, compilers, and hardware components like processor caches.\n\n\n\n\n2. Definitions\n\nComputer Architecture: The design and fundamental operational structure of a computer system. It defines the system’s parts and their interrelationships, including the instruction set, microarchitecture, and overall system design.\nCPU (Central Processing Unit): The primary component of a computer that executes instructions. It contains the Control Unit and the Arithmetic Logic Unit.\nALU (Arithmetic Logic Unit): The part of the CPU that performs arithmetic (e.g., addition, subtraction) and logic (e.g., AND, OR, NOT) operations.\nControl Unit (CU): The part of the CPU that directs the operation of the processor. It fetches instructions, decodes them, and tells the other parts of the computer system how to carry them out.\nRegister: A small, extremely fast memory location located directly inside the CPU used to hold a single piece of data (like a number or an instruction) during processing.\nCache Memory: A small amount of very fast, volatile memory that stores frequently accessed data from the main memory, reducing the average time to access data by avoiding slower RAM access.\nSystem Memory (RAM): The main volatile hardware memory in a computing device where the operating system, application programs, and data in current use are kept for quick access by the processor.\nVolatile Memory: Memory that requires constant power to maintain stored information; its contents are lost when power is turned off.\nNon-Volatile Memory: Memory that can retain stored information even after power is removed.\nAbstraction: The technique of hiding complex implementation details and showing only the necessary features of an object or system to simplify its use and design.\nMoore’s Law: The observation that the number of transistors in an integrated circuit doubles about every two years, which historically led to exponential growth in computing power.\nParallelism: The simultaneous execution of multiple instructions or tasks on multiple processing units (cores) to achieve faster computation.\nPipelining: A technique where a single processor overlaps the execution of multiple instructions by breaking each into stages and processing them in an assembly-line fashion to increase instruction throughput.\nSpeculative Execution: An optimization technique where a processor performs a task before it is known whether the task is actually needed, most often used for branch prediction.\nRedundancy: The inclusion of extra components in a system that are not strictly necessary for its basic functioning, intended to increase reliability in case of component failure.\nFinite State Machine (FSM): A computational model consisting of a finite number of states and transitions between them in response to inputs, used to model the behavior of dynamic systems.\n\n\n\n3. Mistakes\n\nConfusing Parallelism and Pipelining: Thinking these are the same concept. Why it’s wrong: Parallelism involves using multiple, independent processing units (like multiple cores) to execute different tasks truly simultaneously. Pipelining involves a single processing unit breaking instructions into stages and overlapping these stages to increase throughput. Pipelining is about making one “assembly line” more efficient, while parallelism is about setting up multiple assembly lines.\nBelieving Moore’s Law Still Guarantees Faster Clock Speeds: Assuming that the doubling of transistors automatically translates to a doubling of CPU clock frequency. Why it’s wrong: While historically correlated, clock speeds have stagnated since the mid-2000s due to the physical limitations of power consumption and heat dissipation. Moore’s Law now primarily results in more cores on a chip rather than faster individual cores.\nAssuming All Memory Access Is Equally Fast: Ignoring the vast performance differences between registers, cache, RAM, and SSDs. Why it’s wrong: The memory hierarchy exists precisely because there is a trade-off between speed and cost. An algorithm that frequently accesses data from RAM or disk will be orders of magnitude slower than one that is designed to keep its working data in the much faster cache.\nIgnoring the Cost of a Branch Misprediction: Believing that speculative execution is a “free” performance boost without any drawbacks. Why it’s wrong: When a branch is mispredicted, the entire pipeline must be flushed of the incorrect, speculatively executed instructions, and the correct instructions must be fetched and started from scratch. This incurs a significant performance penalty. The technique is only effective because modern predictors are correct most of the time.\nThinking More Cores Always Means a Faster Program: Assuming that doubling the number of CPU cores will cut a program’s execution time in half. Why it’s wrong: This is only true for perfectly parallelizable tasks (often called “embarrassingly parallel”). Most programs have sequential parts that cannot be run in parallel and require synchronization between threads, which limits the speedup gained from adding more cores.\nTreating Cache as Manually Managed Memory: Assuming a programmer needs to explicitly write code to move data into and out of the L1/L2 cache. Why it’s wrong: Caching is an automatic process managed by the hardware. The CPU’s memory controller automatically fetches data into the cache based on access patterns (like locality of reference). While programmers can write “cache-friendly” code, they do not manage the cache directly.\n\n\n\n4. Examples\n\n4.1. Memory Hierarchy Ordering\nQuestion: A program needs to access a piece of data. Arrange the following memory types in order from the location that would provide the fastest access to the one that would provide the slowest access: L2 Cache, SSD, System RAM, CPU Register.\n\n\nClick to see the solution\n\n\nIdentify the fastest level: The memory physically located inside the CPU’s core is the fastest. CPU registers fit this description.\nConsider the cache levels: Cache memory is the next fastest level, acting as a high-speed buffer between the CPU and RAM. L2 cache is extremely fast.\nPlace the main memory: System RAM is the primary working memory but is significantly slower than on-chip cache because the signals must travel off the CPU chip to a separate set of memory modules.\nPlace the storage device: Secondary storage like an SSD is the slowest level in this list. It is an I/O device, and accessing it is orders of magnitude slower than accessing RAM.\n\nAnswer: The correct order from fastest to slowest is: CPU Register, L2 Cache, System RAM, SSD.\n\n\n\n4.2. Pipelining Throughput\nQuestion: A non-pipelined processor takes 5 clock cycles to execute one instruction. A 5-stage pipelined processor has a clock cycle time of 1 ns and can complete one stage per cycle. Ignoring any pipeline stalls or hazards, how long would it take the pipelined processor to execute 10 instructions?\n\n\nClick to see the solution\n\n\nCalculate the time for the first instruction: The first instruction must pass through all 5 stages to complete. Since each stage takes one 1 ns clock cycle, the first instruction takes 5 stages * 1 ns/stage = 5 ns to exit the pipeline.\nCalculate the time for subsequent instructions: Once the pipeline is full (after the first instruction has reached the final stage), a new instruction will complete every clock cycle. Therefore, the remaining (10 - 1) = 9 instructions will each take only 1 additional clock cycle (1 ns) to emerge from the pipeline.\nSum the times: Total time = (Time for first instruction) + (Time for the remaining 9 instructions) = 5 ns + (9 * 1 ns) = 14 ns.\n\nAnswer: It would take 14 ns to execute 10 instructions.\n\n\n\n4.3. Identifying Parallelism vs. Pipelining\nQuestion: A server is running a video encoding application. The application is designed to process multiple frames of the video at the same time. The server’s CPU has 16 cores, and the application spawns 16 separate threads, with each thread independently encoding a different frame on its own core. Is this an example of performance via parallelism or pipelining?\n\n\nClick to see the solution\n\n\nAnalyze the resource allocation: The system is using multiple, distinct hardware processing units (16 cores).\nAnalyze the task distribution: Multiple independent tasks (encoding different frames) are being executed at the exact same time on these different cores.\nCompare with definitions: This perfectly matches the definition of parallelism, which uses multiple processors to handle different tasks concurrently. It is not pipelining, which is an optimization to overlap instruction stages on a single processor core.\n\nAnswer: This is an example of performance via parallelism.\n\n\n\n4.4. Applying Moore’s Law\nQuestion: In 2024, a high-end consumer CPU has 16 cores. Based on the modern interpretation of Moore’s Law (where the transistor budget is used for more cores), what would be a reasonable expectation for the core count of a similar-class high-end CPU in 2028 (4 years later)?\n\n\nClick to see the solution\n\n\nRecall Moore’s Law: The number of transistors doubles roughly every 2 years. In the multicore era, this often translates to a doubling of cores on the highest-end chips.\nCalculate the number of doubling periods: The time frame is 4 years, which consists of two 2-year periods.\nApply the doubling for each period:\n\nAfter the first 2 years (by 2026), the core count would be expected to double from 16 to 32.\nAfter the second 2 years (by 2028), the core count would be expected to double again from 32 to 64.\n\n\nAnswer: A reasonable expectation would be a CPU with 64 cores.\n\n\n\n4.5. Levels of Abstraction\nQuestion: Describe a web browser application (like Chrome or Firefox) at three different levels of abstraction, from highest (simplest) to lowest (most detailed).\n\n\nClick to see the solution\n\n\nHighest Level (The User’s View): At this level, the web browser is a simple application with a graphical user interface. The user interacts with an address bar to type URLs, clicks on links, and views rendered web pages. The underlying complexity of network requests, HTML parsing, and JavaScript execution is completely hidden. The browser is a tool to access information on the internet.\nIntermediate Level (The Web Developer’s View): A web developer sees the browser as a collection of engines and APIs. They work with the rendering engine (which processes HTML/CSS), the JavaScript engine (which executes code), the networking stack (for HTTP requests), and various APIs for storage, graphics, etc. They understand how these components interact to turn their code into a functional web page, but they do not need to know the specific algorithms used by the rendering engine.\nLowest Level (The Browser Engineer’s View): An engineer working on the browser itself sees the most detailed view. They are concerned with the C++ code that implements the rendering engine, optimizing the just-in-time (JIT) compiler in the JavaScript engine, managing memory allocation efficiently, and implementing network protocols according to RFC standards. This is the most complex view, where the application’s core logic is built.\n\nAnswer: The three levels are User (highest abstraction), Web Developer (intermediate abstraction), and Browser Engineer (lowest abstraction).\n\n\n\n4.6. Speculative Execution Scenario\nQuestion: Consider the following piece of code inside a loop that runs thousands of times. Explain how a CPU with speculative execution and an adaptive branch predictor would handle the if statement to optimize performance over time. if (data[i] &lt; 0) { handle_negative_value(); } else { handle_positive_value(); }\n\n\nClick to see the solution\n\n\nEncounter the Branch: The first time the loop runs, the CPU’s branch predictor may not have any history for this if statement, so it might make a static guess (e.g., predict the else branch is always taken).\nSpeculatively Execute and Learn: The CPU executes the predicted path. When the actual result of the comparison is known, it compares it to the prediction.\n\nIf the guess was correct, it reinforces its prediction.\nIf the guess was wrong (a misprediction), it flushes the pipeline, executes the correct path, and updates its prediction history to note that the guess was wrong.\n\nAdapt Over Time: Let’s say the data array contains mostly positive numbers. After the first few iterations, the branch predictor’s history will show that the condition data[i] &lt; 0 is almost always false. The predictor will adapt and strongly predict the else branch.\nOptimize Performance: For the remaining thousands of iterations, the CPU will speculatively execute handle_positive_value() each time. Since this prediction is correct most of the time, the pipeline continues without stalling, leading to a significant performance improvement. It only pays the misprediction penalty on the rare occasions when a negative value is encountered.\n\nAnswer: The CPU’s adaptive branch predictor learns the program’s behavior over time. It will predict that the else block is the most likely path and speculatively execute it, avoiding pipeline stalls on the vast majority of loop iterations.\n\n\n\n4.7. Finite State Machine Design\nQuestion: Design a simple Finite State Machine (FSM) for a traffic light at a simple intersection. It should cycle through Green, Yellow, and Red states. The only input is a timer.\n\n\nClick to see the solution\n\n\nDefine the States:\n\nGreen: The initial state. The light is green, allowing traffic to pass.\nYellow: The light is yellow, warning that the light is about to turn red.\nRed: The light is red, stopping traffic.\n\nDefine the Transitions: The transitions are all triggered by a timer expiring.\n\nGreen to Yellow: This transition occurs when the FSM is in the Green state and the green_timer_expired input becomes true.\nYellow to Red: This transition occurs when the FSM is in the Yellow state and the yellow_timer_expired input becomes true.\nRed to Green: This transition occurs when the FSM is in the Red state and the red_timer_expired input becomes true, completing the cycle.\n\n\n\nAnswer: The FSM has three states: Green, Yellow, and Red. It transitions sequentially from Green to Yellow, Yellow to Red, and Red back to Green, with each transition triggered by the expiration of a timer associated with the current state.",
    "crumbs": [
      "Computer Architecture",
      "2. Hierarchy of Memories, Moore's Law, Parallelism, Pipelining, and Design Principles"
    ]
  },
  {
    "objectID": "Discrete Mathematics/lec_3.html",
    "href": "Discrete Mathematics/lec_3.html",
    "title": "3. Predicates, Quantifiers, and De Morgan’s Laws",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 From Propositions to Predicates\nIn logic, a proposition is a declarative statement that is definitively either true or false, but not both. For instance, “The number 4 is an even number” is a true proposition. However, we often need to work with statements whose truth value depends on a variable, such as “x is an even number.”\nThis is where predicates come in. A predicate is a statement containing one or more variables, which becomes a proposition once the variables are replaced with specific values. We can represent the predicate “x is an even number” as \\(P(x)\\). When we set \\(x=4\\), \\(P(4)\\) becomes the true proposition “4 is an even number.” The set of all possible values a variable can take is called the domain. The truth of a predicate statement critically depends on its domain.\n\n\n1.2 Quantifiers: Generalizing Predicates\nQuantifiers are symbols that allow us to make general claims about the truth of a predicate over its entire domain, without having to test every single value. There are two primary quantifiers.\n\n\n1.2.1 The Universal Quantifier (\\(\\forall\\))\nThe universal quantifier, denoted by the symbol \\(\\forall\\), stands for “for all” or “for any.” The statement \\(\\forall x P(x)\\) asserts that the predicate \\(P(x)\\) is true for every single element \\(x\\) in the domain.\n\nExample: If the domain is the set of all even numbers, the statement \\(\\forall x (\\text{\"x is divisible by 2\"})\\) is true.\nConnection to Logic: For a finite domain \\(\\{x_1, x_2, \\dots, x_n\\}\\), the universal statement \\(\\forall x P(x)\\) is logically equivalent to the conjunction (AND) of the predicate for each element: \\(P(x_1) \\land P(x_2) \\land \\dots \\land P(x_n)\\). A universal statement is only true if all parts are true.\n\n\n\n1.2.2 The Existential Quantifier (\\(\\exists\\))\nThe existential quantifier, denoted by the symbol \\(\\exists\\), stands for “there exists” or “for some.” The statement \\(\\exists x P(x)\\) asserts that there is at least one element \\(x\\) in the domain for which the predicate \\(P(x)\\) is true.\n\nExample: If the domain is the set of all integers, the statement \\(\\exists x (x^2 = 9)\\) is true, because we can find at least one value (namely, 3 or -3) that makes it true.\nConnection to Logic: For a finite domain \\(\\{x_1, x_2, \\dots, x_n\\}\\), the existential statement \\(\\exists x P(x)\\) is logically equivalent to the disjunction (OR) of the predicate for each element: \\(P(x_1) \\lor P(x_2) \\lor \\dots \\lor P(x_n)\\). An existential statement is true if at least one part is true.\n\n\n\n\n1.3 Free and Bound Variables\nIn a logical formula, a variable can be either bound or free.\n\nA variable is bound if it is within the scope of a quantifier. In the expression \\(\\forall x (x &gt; y)\\), the variable x is bound by the universal quantifier.\nA variable is free if it is not bound by any quantifier. In the same expression, \\(\\forall x (x &gt; y)\\), the variable y is free.\n\nA formula with no free variables is a proposition; its truth value can be determined (given a domain). A formula with free variables is a predicate; its truth value depends on the values assigned to the free variables.\n\n\n1.4 Interpretation and Counterexamples\n\nAn interpretation is an assignment of a specific domain and meanings to the predicates in a formula that makes the formula TRUE.\nA counterexample is an interpretation that makes the formula FALSE. Finding even a single case in the domain that violates a universal statement serves as a counterexample. For instance, to disprove \\(\\forall x (\\text{\"x is an odd number\"})\\) for the domain of integers, we only need to provide one counterexample, like the number 2, which is an integer but not odd.\n\n\n\n1.5 De Morgan’s Laws for Quantifiers\nDe Morgan’s Laws provide a crucial relationship between negation and quantifiers, allowing us to move the negation symbol (¬) inside a quantifier by flipping the quantifier.\n\nNegating a Universal Quantifier: The negation of “for all x, P(x) is true” is “there exists an x for which P(x) is false.” \\[ \\neg \\forall x P(x) \\equiv \\exists x \\neg P(x) \\] Analogy: To disprove the claim “All students passed the exam,” you only need to find one student who did not pass.\nNegating an Existential Quantifier: The negation of “there exists an x for which P(x) is true” is “for all x, P(x) is false.” \\[ \\neg \\exists x P(x) \\equiv \\forall x \\neg P(x) \\] Analogy: To disprove the claim “There is a dragon in the castle,” you must check every room and confirm that all of them are dragon-free.\n\n\n\n1.6 Properties of Quantifiers\nQuantifiers interact with logical connectives like AND (&) and OR (∨) in specific ways.\n\nUniversal Quantifier and AND: A universal quantifier can be distributed over &. The statement “all x have property P and property R” is the same as “all x have property P” AND “all x have property R”. \\[ \\forall x (P(x) \\land R(x)) \\equiv \\forall x P(x) \\land \\forall x R(x) \\]\nExistential Quantifier and OR: An existential quantifier can be distributed over ∨. The statement “there is an x that has property P or property R” is the same as “there is an x with property P” OR “there is an x with property R”. \\[ \\exists x (P(x) \\lor R(x)) \\equiv \\exists x P(x) \\lor \\exists x R(x) \\]\nImportant Note: A universal quantifier cannot be distributed over ∨, and an existential quantifier cannot be distributed over &.\n\n\n\n1.7 Nested Quantifiers\nNested quantifiers occur when one quantifier is within the scope of another, such as \\(\\forall x \\exists y (x+y=0)\\). The order of quantifiers is critical.\n\nSame Quantifiers: If the quantifiers are the same, their order does not matter. \\[ \\forall x \\forall y P(x, y) \\equiv \\forall y \\forall x P(x, y) \\] \\[ \\exists x \\exists y P(x, y) \\equiv \\exists y \\exists x P(x, y) \\]\nMixed Quantifiers: If the quantifiers are different, their order does matter and can completely change the meaning of the statement. \\[ \\exists x \\forall y P(x, y) \\rightarrow \\forall y \\exists x P(x, y) \\] The statement on the left implies the one on the right, but the reverse is not true. Let’s analyze \\(\\exists x \\forall y\\) versus \\(\\forall y \\exists x\\):\n\n\\(\\exists x \\forall y P(x,y)\\): “There exists a single x that works for all y.” This is a very strong claim. For example, if \\(P(x,y)\\) is “\\(x \\geq y\\)” in the domain of natural numbers, this is false. There is no single natural number that is greater than or equal to all other natural numbers.\n\\(\\forall y \\exists x P(x,y)\\): “For any given y, we can find some x that works.” The choice of x can depend on y. For the same example, “\\(x \\geq y\\)”, this is true. For any natural number y, we can always find an x (e.g., x=y or x=y+1) that is greater than or equal to it.\n\n\n\n\n1.8 Special Quantifiers\nFor convenience, we use extensions of the standard quantifiers.\n\nUniqueness Quantifier (\\(\\exists!\\)): The statement \\(\\exists!x P(x)\\) means “there exists a unique (one and only one) x such that \\(P(x)\\) is true.”\nRestricted Quantifiers: We often restrict the domain of a quantifier to a certain condition.\n\nRestricted Universal: \\(\\forall x &gt; 0, P(x)\\) means “for all x that are greater than 0, \\(P(x)\\) is true.” This is formally written as an implication: \\[ \\forall x (x &gt; 0 \\rightarrow P(x)) \\]\nRestricted Existential: \\(\\exists x &gt; 0, P(x)\\) means “there exists an x greater than 0 such that \\(P(x)\\) is true.” This is formally written as a conjunction: \\[ \\exists x (x &gt; 0 \\land P(x)) \\]\n\n\n\n\n\n2. Definitions\n\nSet: An unordered collection of distinct elements.\nProposition: A declarative sentence that is unambiguously true or false.\nPredicate: A sentence containing variables that becomes a proposition when the variables are assigned specific values from a domain.\nDomain: The set of all possible values that a variable in a predicate can assume.\nUniversal Quantifier (\\(\\forall\\)): A logical symbol meaning “for all” or “for every,” asserting that a predicate is true for all elements in the domain.\nExistential Quantifier (\\(\\exists\\)): A logical symbol meaning “there exists” or “for some,” asserting that a predicate is true for at least one element in the domain.\nBound Variable: A variable that falls within the scope of a quantifier.\nFree Variable: A variable in a logical formula that is not bound by a quantifier.\nInterpretation: An assignment of a domain and meanings to predicates that makes a formula TRUE.\nCounterexample: An assignment of a domain and meanings to predicates that makes a formula FALSE.\n\n\n\n3. Formulas\n\nDe Morgan’s Law for \\(\\forall\\): \\(\\neg \\forall x P(x) \\equiv \\exists x \\neg P(x)\\)\nDe Morgan’s Law for \\(\\exists\\): \\(\\neg \\exists x P(x) \\equiv \\forall x \\neg P(x)\\)\nDistribution of \\(\\forall\\) over \\(\\land\\): \\(\\forall x (P(x) \\land R(x)) \\equiv \\forall x P(x) \\land \\forall x R(x)\\)\nDistribution of \\(\\exists\\) over \\(\\lor\\): \\(\\exists x (P(x) \\lor R(x)) \\equiv \\exists x P(x) \\lor \\exists x R(x)\\)\nCommutativity of Same Quantifiers:\n\n\\(\\forall x \\forall y P(x, y) \\equiv \\forall y \\forall x P(x, y)\\)\n\\(\\exists x \\exists y P(x, y) \\equiv \\exists y \\exists x P(x, y)\\)\n\nImplication of Mixed Quantifiers: \\(\\exists x \\forall y P(x, y) \\rightarrow \\forall y \\exists x P(x, y)\\)\nUniqueness Quantifier Definition: \\(\\exists!x P(x) \\equiv \\exists x (P(x) \\land \\forall y (P(y) \\rightarrow y=x))\\)\nRestricted Universal Quantifier: The statement “For all \\(x\\) such that \\(R(x)\\), \\(P(x)\\) holds” is written as \\(\\forall x (R(x) \\rightarrow P(x))\\).\nRestricted Existential Quantifier: The statement “There exists an \\(x\\) such that \\(R(x)\\) and \\(P(x)\\)” is written as \\(\\exists x (R(x) \\land P(x))\\).\n\n\n\n4. Mistakes\n\nConfusing the order of mixed quantifiers: Treating \\(\\forall x \\exists y P(x,y)\\) and \\(\\exists y \\forall x P(x,y)\\) as equivalent. Why it’s wrong: The order changes the meaning entirely. \\(\\exists y \\forall x\\) implies a single y must work for all x, a much stronger condition than \\(\\forall x \\exists y\\), where y can be chosen differently for each x.\nIncorrectly distributing quantifiers: Assuming that \\(\\forall x (P(x) \\lor R(x))\\) is the same as \\(\\forall x P(x) \\lor \\forall x R(x)\\). Why it’s wrong: Consider the domain of integers where \\(P(x)\\) is “x is even” and \\(R(x)\\) is “x is odd”. Every integer is either even or odd, so \\(\\forall x (P(x) \\lor R(x))\\) is true. However, it’s not true that all integers are even, and it’s not true that all integers are odd, so \\(\\forall x P(x) \\lor \\forall x R(x)\\) is false.\nApplying the wrong logical connective for restricted quantifiers: Using & with a restricted universal quantifier, like \\(\\forall x (x&gt;0 \\land P(x))\\). Why it’s wrong: This would mean “for all x, x is positive AND P(x) is true,” which is a much stronger and usually incorrect statement. A universal restriction requires an implication (→). Similarly, using → with a restricted existential quantifier is wrong because it can be trivially true if the condition is false.\nUsing an incorrect De Morgan’s Law: Negating \\(\\forall x P(x)\\) to become \\(\\forall x \\neg P(x)\\). Why it’s wrong: This mistake ignores the rule that the quantifier must flip. The correct negation is \\(\\exists x \\neg P(x)\\). Negating “everyone passed” does not mean “everyone failed”; it means “at least one person failed.”\nForgetting the Domain: Evaluating the truth of a statement without considering the specified domain. Why it’s wrong: The statement \\(\\forall x (x &gt; 0)\\) is true if the domain is positive integers but false if the domain is all integers. The domain is fundamental to the meaning of a quantified statement.\n\n\n\n5. Examples\n\n5.1. Translating Logic to English\nQuestion: Let the domain be all people. Let \\(P(x)\\) be “x likes oranges” and \\(R(x)\\) be “x knows C++”. Translate the statement \\(\\forall x (R(x) \\rightarrow P(x))\\) into English.\n\n\nClick to see the solution\n\n\nIdentify the main quantifier and structure: The main structure is a universal quantifier \\(\\forall x\\) applied to an implication \\(R(x) \\rightarrow P(x)\\).\nTranslate the universal quantifier: \\(\\forall x\\) means “For every person x…”.\nTranslate the implication: \\(R(x) \\rightarrow P(x)\\) means “If x knows C++, then x likes oranges”.\nCombine the parts: “For every person x, if x knows C++, then x likes oranges.”\nRefine into natural English: This can be stated more naturally.\n\nAnswer: Everyone who knows C++ also likes oranges.\n\n\n\n5.2. Determining Truth Value\nQuestion: Let the domain be all real numbers. Determine the truth value of the statement \\(\\forall x \\exists y (x + y = 0)\\).\n\n\nClick to see the solution\n\n\nRead the statement: The statement says “For any real number x, there exists some real number y such that their sum is 0.”\nTest the logic: Let’s pick an arbitrary real number for x, say \\(x=5\\). Can we find a y such that \\(5+y=0\\)? Yes, \\(y=-5\\).\nGeneralize the test: For any arbitrary real number x, we can choose \\(y = -x\\). Since the negative of any real number is also a real number, we can always find such a y.\nConclusion: Since we can find a suitable y for every possible x, the statement is true.\n\nAnswer: TRUE.\n\n\n\n5.3. Applying De Morgan’s Laws\nQuestion: Rewrite the statement \\(\\neg \\forall x \\exists y ((x &gt; 0) \\land (y &lt; 0))\\) so that no negation is outside a quantifier or a logical connective.\n\n\nClick to see the solution\n\n\nApply De Morgan’s Law to the outermost quantifier (\\(\\forall x\\)): Move the negation inside by flipping \\(\\forall\\) to \\(\\exists\\). \\[ \\exists x \\neg (\\exists y ((x &gt; 0) \\land (y &lt; 0))) \\]\nApply De Morgan’s Law to the next quantifier (\\(\\exists y\\)): Move the negation inside by flipping \\(\\exists\\) to \\(\\forall\\). \\[ \\exists x \\forall y \\neg ((x &gt; 0) \\land (y &lt; 0)) \\]\nApply De Morgan’s Law to the logical connective (\\(\\land\\)): The negation of a conjunction is the disjunction of the negations: \\(\\neg(A \\land B) \\equiv \\neg A \\lor \\neg B\\). \\[ \\exists x \\forall y (\\neg(x &gt; 0) \\lor \\neg(y &lt; 0)) \\]\nSimplify the final inequalities: \\(\\neg(x &gt; 0)\\) is \\(x \\le 0\\), and \\(\\neg(y &lt; 0)\\) is \\(y \\ge 0\\). \\[ \\exists x \\forall y ((x \\le 0) \\lor (y \\ge 0)) \\]\n\nAnswer: \\(\\exists x \\forall y ((x \\le 0) \\lor (y \\ge 0))\\)\n\n\n\n5.4. Finding Domains for Truth and Falsity\nQuestion: Find a non-empty domain for x and y where the statement \\(\\exists x \\forall y (xy = y)\\) is true, and a domain where it is false.\n\n\nClick to see the solution\n\n\nAnalyze the statement: It says “There exists a single number x such that for every number y in the domain, multiplying x by y results in y.” This means x must be the multiplicative identity.\nFind a domain where it is TRUE:\n\nThe multiplicative identity is 1. If the number 1 is in our domain, we can choose \\(x=1\\).\nLet’s test if \\(x=1\\) works for all y. If we choose the domain to be the set of all integers, then for \\(x=1\\), it is true that \\(1 \\cdot y = y\\) for any integer y.\nSo, a valid domain is the set of integers, real numbers, or any set containing 1. A simpler domain is just \\(\\{1\\}\\). If the domain is \\(\\{1\\}\\), then \\(x=1\\) and \\(y=1\\), and \\(1 \\cdot 1 = 1\\), which is true.\n\nFind a domain where it is FALSE:\n\nFor the statement to be false, there must be no such x in the domain.\nThis means the domain should not contain the multiplicative identity (1).\nLet’s choose the domain to be the set \\(\\{2, 3\\}\\).\nTest \\(x=2\\): Does \\(2y=y\\) for all \\(y \\in \\{2, 3\\}\\)? No, \\(2 \\cdot 3 = 6 \\neq 3\\).\nTest \\(x=3\\): Does \\(3y=y\\) for all \\(y \\in \\{2, 3\\}\\)? No, \\(3 \\cdot 2 = 6 \\neq 2\\).\nSince neither possible value for x works for all y, the statement is false in this domain.\n\n\nAnswer: * TRUE Domain: The set of all real numbers, \\(\\mathbb{R}\\). * FALSE Domain: The set \\(\\{2, 3\\}\\).\n\n\n\n5.5. Nested Quantifiers with Counterexample\nQuestion: Let the domain be the set of integers \\(\\{0, 1, 2\\}\\). Determine the truth value of \\(\\forall x \\forall y ((x \\ne y) \\rightarrow \\forall z ((z=x) \\lor (z=y)))\\).\n\n\nClick to see the solution\n\n\nAnalyze the statement: “For any two distinct elements x and y from the domain, every element z in the domain must be equal to either x or y.”\nIdentify the condition: The statement has an implication. It only makes a claim when the hypothesis (\\(x \\ne y\\)) is true. We need to find a pair x, y from \\(\\{0, 1, 2\\}\\) where \\(x \\ne y\\).\nSelect a counterexample pair: Let’s choose \\(x=0\\) and \\(y=1\\). The hypothesis \\(x \\ne y\\) is true.\nTest the conclusion for this pair: The conclusion is \\(\\forall z ((z=x) \\lor (z=y))\\), which for our chosen pair means \\(\\forall z \\in \\{0, 1, 2\\}, ((z=0) \\lor (z=1))\\).\nEvaluate the conclusion: Is it true that every z in \\(\\{0, 1, 2\\}\\) is either 0 or 1?\n\nFor \\(z=0\\): \\((0=0 \\lor 0=1)\\) is TRUE.\nFor \\(z=1\\): \\((1=0 \\lor 1=1)\\) is TRUE.\nFor \\(z=2\\): \\((2=0 \\lor 2=1)\\) is FALSE.\n\nFinal Conclusion: Since the conclusion is false for \\(z=2\\), the universal statement \\(\\forall z ((z=0) \\lor (z=1))\\) is false. Because we found a pair (\\(x=0, y=1\\)) for which the hypothesis is true but the conclusion is false, the original implication-based statement is false.\n\nAnswer: FALSE.\n\n\n\n5.6. Rewriting a Restricted Quantifier\nQuestion: Rewrite the statement “There exists an integer i in the set \\(\\{1, ..., 10\\}\\) such that \\(P(i)\\)” using standard quantifiers and logical connectives.\n\n\nClick to see the solution\n\n\nIdentify the type of restricted quantifier: This is a restricted existential quantifier.\nRecall the formal definition: A statement of the form “There exists an x with property \\(R(x)\\) such that \\(P(x)\\)” is written as \\(\\exists x (R(x) \\land P(x))\\).\nApply the definition:\n\nThe variable is i.\nThe restricting property \\(R(i)\\) is “\\(i \\in \\{1, ..., 10\\}\\)”.\nThe main property \\(P(i)\\) is just \\(P(i)\\).\n\nCombine the parts: Substitute into the formal structure.\n\nAnswer: \\(\\exists i (i \\in \\{1, ..., 10\\} \\land P(i))\\)\n\n\n\n5.7. Truth Value of Uniqueness Quantifier\nQuestion: Let the domain be the set of real numbers. Determine the truth value of \\(\\exists!x ((x &gt; 0) \\land (x^2 = 16))\\).\n\n\nClick to see the solution\n\n\nAnalyze the statement: The uniqueness quantifier \\(\\exists!x\\) means “There exists one and only one x”. The predicate is “\\(x\\) is positive AND \\(x^2 = 16\\)”.\nFind all values that satisfy the predicate: We need to find all real numbers x that satisfy both conditions.\nSolve the equation: The solutions to \\(x^2 = 16\\) are \\(x = 4\\) and \\(x = -4\\).\nApply the condition: We must also satisfy the condition \\(x &gt; 0\\).\n\nFor \\(x=4\\): Is \\(4 &gt; 0\\)? Yes. So \\(x=4\\) is a solution.\nFor \\(x=-4\\): Is \\(-4 &gt; 0\\)? No. So \\(x=-4\\) is not a solution.\n\nCount the solutions: We found exactly one value, \\(x=4\\), that satisfies the entire predicate.\nConclusion: Since there is one and only one solution, the uniqueness statement is true.\n\nAnswer: TRUE.",
    "crumbs": [
      "Discrete Mathematics",
      "3. Predicates, Quantifiers, and De Morgan's Laws"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "InnoNotes",
    "section": "",
    "text": "InnoNotes\n\n\nCreated by Zakhar Podyakov with ❤️ If you find any mistakes or have suggestions for improvement, please write to me. Telegram | Github | InnoNotes Github | Prompt for generating guides\n\n\n\nContributors\n\nMaksim Slavik\n\n\n\n\nNews\n\nSeptember 19, 2025 – Enhanced progress tracking with checkboxes and sidebar strikethroughs. Dropped grading from Computer Architecture; upgraded theme for crisp active-page glow. Fixed sidebar scroll persistence. Added Maksim Slavik to contributors. Fresh videos, quizzes, flashcards, and guides for Essence of calculus generated — dive in!\nSeptember 18, 2025 – Connected Google Analytics for tracking. Added auto dark mode, logo, and changed site theme. Added videos, quizzes, and flashcards to ITP, MA, CA guides — check them out! Linked prompt for custom guides. New summaries for Essence of linear algebra.\nSeptember 17, 2025 – Launched InnoNotes."
  },
  {
    "objectID": "Introduction to Programming/lec_3.html",
    "href": "Introduction to Programming/lec_3.html",
    "title": "3. Pointers, Declarations, Preprocessing, and File I/O in C",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 The C Memory Model: Stack, Heap, and Global Storage\nTo understand pointers and variables in C, it’s crucial to know how a program organizes its memory. A C program typically divides memory into three main regions:\n\nGlobal (or Static) Storage Area: This area holds global variables (declared outside any function) and static variables (declared with the static keyword). These objects are created when the program starts and exist for the entire duration of the program’s execution. They have a fixed, known memory address.\nThe Stack: The stack is a region of memory used for managing function calls. When a function is called, a new stack frame is created. This frame holds all the function’s local variables (also called automatic variables), its parameters, and the return address. The stack operates on a Last-In, First-Out (LIFO) basis. When a function returns, its stack frame is destroyed, and all its local variables cease to exist. This process is managed automatically by the compiler.\nThe Heap: The heap is a large pool of memory available for use during the program’s execution. Unlike the stack, the heap’s memory is not managed automatically. The programmer must explicitly request memory from the heap and is responsible for releasing it once it’s no longer needed. This is known as dynamic memory allocation and is used for creating objects whose size or lifetime is not known at compile time.\n\n\n\n\n1.2 Pointers: The Foundation\nA pointer is a special type of variable that does not hold data directly but instead holds the memory address of another variable. It “points to” the location where the actual data is stored. This mechanism allows for powerful features like dynamic memory management and efficient manipulation of arrays and data structures.\nThe two fundamental pointer operators are:\n\nAddress-of operator (&): When placed before a variable name, it returns the memory address of that variable. For example, &my_var gives the address where my_var is stored.\nDereference operator (*): When placed before a pointer variable, it accesses the value stored at the memory address the pointer is holding. For instance, if p holds the address of my_var, then *p is equivalent to my_var itself.\n\n\n\n1.3 Pointer Arithmetic and Arrays\nIn C, pointers and arrays are intimately related. An array’s name, when used in an expression, is treated as a constant pointer to its first element. This means array is equivalent to &array[0].\nThis relationship enables pointer arithmetic, which allows you to perform mathematical operations on pointer addresses. When you add an integer n to a pointer p, the result is not p + n bytes. Instead, the address is advanced by n * sizeof(type), where type is the data type the pointer points to. This makes it easy to navigate through arrays.\n\np + i: Points to the i-th element after the one p currently points to.\n*(p + i): Is equivalent to accessing the array element p[i].\np++: Increments the pointer to point to the next element in memory.\n\nBecause of this, the C standard defines the array subscript operation E1[E2] as being identical to (*((E1)+(E2))). Since addition is commutative, this means *(E1+E2) is the same as *(E2+E1), which leads to the surprising but valid syntax E2[E1]. For example, if arr is an array, arr[5] is the same as 5[arr].\n\n\n1.4 Dynamic Memory Management\nDynamic memory is allocated on the heap using functions from the &lt;stdlib.h&gt; library.\n\nAllocation (malloc): The malloc function reserves a block of memory.\n\nIt takes one argument: the number of bytes to allocate. The sizeof operator is essential here to ensure portability and correctness (e.g., malloc(10 * sizeof(int)) for an array of 10 integers).\nIt returns a generic pointer of type void* to the first byte of the allocated block. If allocation fails (e.g., the system is out of memory), it returns NULL.\nThis void* must be cast to the appropriate pointer type (e.g., int*) before it can be used, to inform the compiler how to interpret the data and perform correct pointer arithmetic.\n\nDeallocation (free): The free function releases a block of dynamically allocated memory back to the heap.\n\nIt takes a single argument: the pointer that was returned by malloc.\nIt is the programmer’s absolute responsibility to call free for every malloc. Failure to do so results in a memory leak.\n\n\n\n\n\n1.5 Common Pointer Pitfalls\nPointers are powerful but introduce risks if not managed carefully. Scott Meyer identified several common categories of pointer problems:\n\nOwnership and Destruction: A pointer itself doesn’t carry information about who is responsible for freeing the memory it points to. This can lead to memory leaks (if no one frees the memory) or double frees (if multiple parts of the code try to free it), which can corrupt the heap.\nDangling Pointers: A dangling pointer is a pointer that refers to a memory location that has already been deallocated with free. Using (dereferencing) a dangling pointer results in undefined behavior, as that memory may now contain garbage or be in use by another part of the program.\nPointer vs. Array Ambiguity: A pointer of type T* can point either to a single object or to the first element of an array of objects. The language itself provides no way to know which it is, or the size of the array, from the pointer alone.\nUninitialized Pointers: A pointer that has been declared but not assigned a valid address contains a garbage value. Dereferencing it will access a random memory location, almost always leading to a crash.\n\n\n\n1.6 C Declarations\nA declaration introduces an identifier (like a variable or function name) and specifies its properties. A declaration can contain up to four parts: a storage class (static), a type specifier (int), an entity name (a), and an initializer (= 1).\nC’s declaration syntax is famously complex because it follows the rule “declaration follows use.” This means the declaration mimics how the identifier would be used in an expression.\n\nint *p;: “*p gives an int,” so p is a pointer to an int.\nint arr[10];: “arr[i] gives an int,” so arr is an array of 10 ints.\nvoid (*f)(int);: “*f called with an int gives void,” so f is a pointer to a function that takes an int parameter and returns void.\n\nThe typedef keyword allows you to create an alias for a data type, which is invaluable for simplifying complex declarations and improving code readability. For instance, typedef int (*MathFunc)(int, int); creates a type MathFunc for a pointer to a function that takes two integers and returns one.\n\n\n\n1.7 The C Preprocessor\nThe C preprocessor is a text-processing tool that runs before the compiler. It scans the source code for lines beginning with #, known as preprocessor directives.\n\n#include &lt;filename&gt; or #include \"filename\": Replaces this line with the content of the specified header file.\n#define MACRO_NAME value: Defines a macro. The preprocessor will replace every subsequent occurrence of MACRO_NAME with value. Function-like macros with parameters are also possible, but they are a common source of bugs if not written carefully (parameters and the body should always be enclosed in parentheses).\nConditional Compilation: Directives like #if, #ifdef, #ifndef, #else, and #endif allow blocks of code to be included or excluded from compilation based on a condition. Their most important use is creating include guards in header files to prevent errors from multiple inclusions. An include guard typically looks like this: c     #ifndef MY_HEADER_H     #define MY_HEADER_H     // ... header content ...     #endif\n\n\n\n\n1.8 File I/O in C\nFile Input/Output (I/O) in C is handled by a set of standard library functions declared in &lt;stdio.h&gt;. Operations are performed on streams, which are represented by a FILE* pointer, also known as a file handle.\nThe standard workflow is:\n\nOpen: Use fopen(\"filename\", \"mode\") to open a file. The mode string specifies the operation:\n\n\"r\": Read text.\n\"w\": Write text (discards existing content).\n\"a\": Append text.\n\"rb\", \"wb\", \"ab\": Corresponding operations for binary files.\n\"r+\", \"w+\", \"a+\": Update modes (both reading and writing). fopen returns a FILE* on success or NULL on failure. Always check for NULL.\n\nRead/Write: Use functions like fprintf, fscanf, fgetc, fputc, fgets, fputs, fread, and fwrite to interact with the file.\nClose: Use fclose(file_handle) to close the stream. This flushes any buffered data to the disk and releases system resources. Failing to close a file can lead to data loss.\n\n\n\n\n2. Definitions\n\nPointer: A variable that stores the memory address of another object.\nDereferencing: The action of accessing the value stored at the memory address pointed to by a pointer, using the * operator.\nPointer Arithmetic: Performing arithmetic operations (like addition or subtraction) on a pointer, which scales the result by the size of the pointed-to data type.\nDynamic Memory Allocation: The process of requesting and managing memory on the heap at runtime using functions like malloc() and free().\nHeap: A region of a program’s memory used for dynamic allocation.\nStack: A region of memory used to store local variables and manage function calls in a Last-In, First-Out (LIFO) manner.\nMemory Leak: A situation where dynamically allocated memory is no longer needed but is not deallocated, making it unusable for the program’s lifetime.\nDangling Pointer: A pointer that refers to a memory location that has been freed or is otherwise no longer valid.\nPreprocessor: A program that processes source code before compilation, performing tasks like file inclusion, macro expansion, and conditional compilation.\nMacro: An identifier defined with #define that is replaced by its corresponding value or code block by the preprocessor.\nInclude Guard: A preprocessor construct used in header files to prevent their content from being included more than once in a single compilation unit.\nTypedef: A keyword used to create a synonym or alias for an existing data type.\nFile Handle: A pointer to a FILE structure (FILE*), which represents an open file stream and holds information needed to manage it.\n\n\n\n4. Mistakes\n\nDereferencing an Uninitialized or NULL Pointer: Attempting to access memory via a pointer that hasn’t been assigned a valid address (*p) will read from or write to an arbitrary, invalid memory location, typically causing a segmentation fault. Why it’s wrong: It’s an attempt to access memory that the program does not own or that is not meaningful.\nForgetting to Free Dynamically Allocated Memory: If you allocate memory with malloc() but do not release it with free() when it is no longer needed, you create a memory leak. Why it’s wrong: Over time, memory leaks consume available system memory, which can degrade performance and eventually crash the program or the entire system.\nUsing a Pointer After free(): This is a classic dangling pointer error. After free(p) is called, the memory p points to is invalid. Why it’s wrong: The memory manager may have already reassigned that memory block. Writing to it can silently corrupt unrelated data, leading to bugs that are extremely difficult to diagnose.\nReturning a Pointer to a Local Variable: A function’s local variables are created on the stack and are destroyed when the function returns. Returning a pointer to such a variable is a serious error. Why it’s wrong: The caller receives a dangling pointer to a memory location that is no longer valid. Any attempt to use it will result in undefined behavior.\nIncorrect Macro Definitions: Defining a macro like #define MAX(a,b) a&gt;b?a:b can lead to incorrect results due to operator precedence when used with complex expressions. Why it’s wrong: The preprocessor performs simple text substitution. Always wrap macro parameters and the entire macro body in parentheses to ensure correct evaluation: #define MAX(a,b) (((a)&gt;(b))?(a):(b)).\nNot Checking the Return Value of fopen() and malloc(): Both fopen() and malloc() return NULL to signal failure. Proceeding to use this NULL pointer will cause a program crash. Why it’s wrong: It’s a specific case of dereferencing a NULL pointer. Robust code must always check the return values of functions that can fail before using the results.\n\n\n\n5. Examples\n\n5.1. Basic Pointer Manipulation\nQuestion: Write a C program that declares an integer x with a value of 100. Declare a pointer p, make it point to x, and then use the pointer to change the value of x to 200. Print the final value of x.\n\n\nClick to see the solution\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    // 1. Declare an integer and a pointer.\n    int x;\n    int *p;\n\n    // 2. Initialize the integer and make the pointer point to it.\n    x = 100;\n    p = &x; // Assign the address of x to p\n\n    // 3. Use the pointer to modify the value.\n    // *p accesses the value at the address p is holding.\n    *p = 200;\n\n    // 4. Print the result.\n    printf(\"The final value of x is: %d\\n\", x);\n\n    return 0;\n}\nAnswer: The program will print The final value of x is: 200.\n\n\n\n5.2. Dynamic Memory Allocation for an Array\nQuestion: Write a C program to dynamically allocate memory for an array of 5 integers, fill it with the first 5 multiples of 10, print the array, and then free the memory.\n\n\nClick to see the solution\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt; // Required for malloc() and free()\n\nint main() {\n    // 1. Declare a pointer to hold the base address of the array.\n    int *arr;\n    int n = 5;\n\n    // 2. Allocate memory for 5 integers using malloc().\n    arr = (int *)malloc(n * sizeof(int));\n\n    // 3. Check if malloc() was successful.\n    if (arr == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1; // Exit with an error code\n    }\n\n    // 4. Fill the array using pointer arithmetic or array syntax.\n    for (int i = 0; i &lt; n; i++) {\n        arr[i] = (i + 1) * 10;\n    }\n\n    // 5. Print the array's content.\n    printf(\"Array values: \");\n    for (int i = 0; i &lt; n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n\n    // 6. Free the allocated memory to prevent a leak.\n    free(arr);\n    arr = NULL; // Good practice to nullify pointer after freeing\n\n    return 0;\n}\nAnswer: The program will print Array values: 10 20 30 40 50.\n\n\n\n5.3. Passing Pointers to Functions (Swap)\nQuestion: Create a function swap that takes pointers to two integers as arguments and swaps their values. Demonstrate its use in the main function.\n\n\nClick to see the solution\n\n#include &lt;stdio.h&gt;\n\n// 1. Define the swap function that accepts pointers.\nvoid swap(int *a, int *b) {\n    int temp = *a; // Store the value at address 'a'\n    *a = *b;       // Put the value at address 'b' into address 'a'\n    *b = temp;     // Put the stored original value into address 'b'\n}\n\nint main() {\n    // 2. Initialize two integers.\n    int x = 10;\n    int y = 20;\n\n    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n\n    // 3. Call swap, passing the addresses of x and y.\n    swap(&x, &y);\n\n    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n\n    return 0;\n}\nAnswer: The program’s output will be: Before swap: x = 10, y = 20 After swap: x = 20, y = 10\n\n\n\n5.4. Pointer to a Function\nQuestion: Create two functions, add(int, int) and subtract(int, int). Create a pointer to a function that can point to either of them. Use the pointer to call both functions with inputs 5 and 3 and print the results.\n\n\nClick to see the solution\n\n#include &lt;stdio.h&gt;\n\nint add(int a, int b) {\n    return a + b;\n}\n\nint subtract(int a, int b) {\n    return a - b;\n}\n\nint main() {\n    // 1. Declare a pointer to a function that takes two ints and returns an int.\n    int (*operation)(int, int);\n    int result;\n\n    // 2. Point it to the 'add' function and call it.\n    operation = &add;\n    result = operation(5, 3); // or (*operation)(5, 3)\n    printf(\"Result of addition: %d\\n\", result);\n\n    // 3. Point it to the 'subtract' function and call it.\n    operation = &subtract;\n    result = operation(5, 3);\n    printf(\"Result of subtraction: %d\\n\", result);\n\n    return 0;\n}\nAnswer: The output will be: Result of addition: 8 Result of subtraction: 2\n\n\n\n5.5. Fixing a Faulty Macro\nQuestion: The following macro is intended to calculate the square of a number but fails for expressions like SQUARE(2+3). Correct the macro. #define SQUARE(x) x*x\n\n\nClick to see the solution\n\n\nIdentify the problem: The expression SQUARE(2+3) expands to 2+3*2+3, which evaluates to 2 + 6 + 3 = 11 due to operator precedence, not the expected 5*5=25.\nAdd parentheses around parameters: To ensure the parameter x is evaluated as a single unit, wrap every instance of it in parentheses. The macro becomes #define SQUARE(x) (x)*(x).\nAdd parentheses around the whole body: To protect the macro from the surrounding context when used in larger expressions, wrap the entire body in parentheses.\n\nCorrected Macro:\n#define SQUARE(x) ((x)*(x))\nExample Usage:\n#include &lt;stdio.h&gt;\n\n#define SQUARE(x) ((x)*(x))\n\nint main() {\n    int result = SQUARE(2+3);\n    printf(\"The result is: %d\\n\", result); // Prints 25\n    return 0;\n}\nAnswer: The corrected macro is #define SQUARE(x) ((x)*(x)).\n\n\n\n5.6. Reading from a File\nQuestion: Write a program that creates a file named data.txt, writes “Hello, World!” to it, closes it, and then re-opens it for reading to print its content to the console.\n\n\nClick to see the solution\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    FILE *file_ptr;\n    char buffer; // A buffer to hold the line read from the file\n\n    // 1. Open file for writing (\"w\" mode).\n    file_ptr = fopen(\"data.txt\", \"w\");\n    if (file_ptr == NULL) {\n        printf(\"Could not create file for writing.\\n\");\n        return 1;\n    }\n    \n    // 2. Write to the file and close it.\n    fprintf(file_ptr, \"Hello, World!\\n\");\n    fclose(file_ptr);\n    printf(\"Wrote to data.txt successfully.\\n\");\n\n    // 3. Open the same file for reading (\"r\" mode).\n    file_ptr = fopen(\"data.txt\", \"r\");\n    if (file_ptr == NULL) {\n        printf(\"Could not open file for reading.\\n\");\n        return 1;\n    }\n\n    // 4. Read the line from the file and print it.\n    if (fgets(buffer, sizeof(buffer), file_ptr) != NULL) {\n        printf(\"Content of data.txt: %s\", buffer);\n    }\n    \n    // 5. Close the file.\n    fclose(file_ptr);\n\n    return 0;\n}\nAnswer: The program will first print Wrote to data.txt successfully. and then Content of data.txt: Hello, World!.\n\n\n\n5.7. Using an Include Guard\nQuestion: Create a header file math_utils.h that defines a simple PI constant. Protect it with an include guard to prevent multiple inclusion errors. Then, create a main.c file that includes it twice to show the guard works.\n\n\nClick to see the solution\n\nStep 1: Create math_utils.h\n// math_utils.h\n\n// 1. The include guard starts here. Checks if the macro is NOT defined.\n#ifndef MATH_UTILS_H\n// 2. If not defined, define it now.\n#define MATH_UTILS_H\n\n// 3. The actual content of the header file.\n#define PI 3.14159\n\n// 4. The include guard ends here.\n#endif // MATH_UTILS_H\nStep 2: Create main.c\n// main.c\n#include &lt;stdio.h&gt;\n\n// 5. Include the header file the first time.\n// The preprocessor sees that MATH_UTILS_H is not defined,\n// so it defines it and includes the content.\n#include \"math_utils.h\"\n\n// 6. Include the header file the second time.\n// The preprocessor sees that MATH_UTILS_H is now defined,\n// so it skips the content between #ifndef and #endif.\n#include \"math_utils.h\"\n\nint main() {\n    printf(\"The value of PI is: %f\\n\", PI);\n    return 0;\n}\nExplanation: Without the include guard, the preprocessor would try to #define PI twice, causing a compilation error. With the guard, the second #include does nothing, and the program compiles and runs correctly.\nAnswer: The program will compile successfully and print The value of PI is: 3.141590.",
    "crumbs": [
      "Introduction to Programming",
      "3. Pointers, Declarations, Preprocessing, and File I/O in C"
    ]
  },
  {
    "objectID": "Academic Writing and Argumentation/lec_1.html",
    "href": "Academic Writing and Argumentation/lec_1.html",
    "title": "1. Effective Sentence Structure",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 What is a Sentence?\nA sentence is a fundamental unit of language that expresses a complete thought. To be considered a sentence, a group of words must satisfy four basic grammatical rules:\n\nIt must contain a complete idea.\nIt must have a specific grammatical structure, centered around a subject and a verb.\nIt must begin with a capital letter.\nIt must end with a punctuation mark (such as a period, question mark, or exclamation point).\n\n\n\n1.2 The Clause\nThe core of every sentence is a clause. A clause is a group of words that contains both a subject (who or what performs the action) and a verb (the action or state of being). The simple formula is:\nSubject + Verb = Clause\nIf a group of words lacks a subject, a verb, or both, it is not a clause. It is called a sentence fragment. A fragment cannot stand on its own because it does not express a complete thought.\n\nExample of a fragment: “In the building at night.” (This has no subject or verb).\nExample of a fragment: “Have learned a lot today.” (This has a verb phrase but is missing a subject).\n\n\n\n1.3 Clause Types\nClauses are divided into two main categories: independent and dependent. The combination of these clause types determines the structure of a sentence.\n\n1.3.1 Independent Clause\nAn independent clause (or main clause) contains a subject and a verb and expresses a complete thought. It is grammatically complete and can stand alone as its own sentence.\n\nExample: “I like pizza.”\nExample: “He has read a lot of books.”\n\n\n\n1.3.2 Dependent Clause\nA dependent clause (or subordinate clause) also contains a subject and a verb, but it does not express a complete thought. It cannot stand alone as a sentence. It begins with a subordinating conjunction (e.g., because, although, when, if) which makes the clause reliant on an independent clause to complete its meaning.\n\nExample: “Although I like pizza…” (The thought is incomplete).\nExample: “…because he has read a lot of books.” (This explains a reason but doesn’t state the main idea).\n\n\n\n\n1.4 Sentence Types\nThere are four main types of sentences in English, categorized by the number and type of clauses they contain.\n\n\n1.4.1 Simple Sentence\nA simple sentence consists of exactly one independent clause. It has a single subject and verb combination and expresses a single complete thought.\n\nExample: “A woman went to the gym.”\nExample: “The black rabbit died yesterday.”\n\n\n\n1.4.2 Compound Sentence\nA compound sentence consists of two or more independent clauses joined together. These clauses are typically linked by a coordinating conjunction. The most common coordinating conjunctions can be remembered with the acronym FANBOYS:\n\nFor\nAnd\nNor\nBut\nOr\nYet\nSo\n\n\nPunctuation Rule: When joining two independent clauses with a coordinating conjunction, a comma must be placed before the conjunction.\nIndependent Clause 1 + , + Coordinating Conjunction + Independent Clause 2\n\n\nExample: “A woman went to the gym, and everybody liked her immediately.”\nExample: “The black rabbit died yesterday, so we have bought a white elephant today.”\n\n\n\n1.4.3 Complex Sentence\nA complex sentence contains one independent clause and at least one dependent clause. The dependent clause is linked to the independent clause by a subordinating conjunction (e.g., because, since, although, while, when).\nPunctuation Rules: The punctuation of a complex sentence depends on the order of the clauses.\n\nNo Comma: If the independent clause comes first, followed by the dependent clause, no comma is needed. Independent Clause + Subordinating Conjunction + Dependent Clause \n\nExample: “The woman went to the gym because she wanted to get fit.”\n\nUse a Comma: If the dependent clause comes first, it must be followed by a comma before the independent clause. Subordinating Conjunction + Dependent Clause + , + Independent Clause \n\nExample: “Because she wanted to get fit, the woman went to the gym.”\n\n\n\n\n1.4.4 Compound-Complex Sentence\nA compound-complex sentence is the most intricate structure. It combines elements of both compound and complex sentences. It must contain at least two independent clauses and at least one dependent clause.\n\nExample: “Although he organized his sources by theme, Mongo decided to arrange them chronologically, and he carefully followed the MEAL plan for organization.”\n\nDependent Clause: “Although he organized his sources by theme”\nIndependent Clause 1: “Mongo decided to arrange them chronologically”\nIndependent Clause 2: “he carefully followed the MEAL plan for organization”\n\n\nWarning: Use compound-complex sentences carefully. While powerful, they can make your writing less readable if overused or constructed poorly.\n\n\n\n\n2. Definitions\n\nSentence: A grammatically complete unit of expression, containing a subject and verb, and conveying a complete thought.\nClause: A group of words containing a subject and a verb, forming the basic building block of a sentence.\nIndependent Clause: A clause that expresses a complete thought and can stand alone as a sentence.\nDependent Clause: A clause that contains a subject and verb but does not express a complete thought and cannot stand alone. It begins with a subordinating conjunction.\nSentence Fragment: An incomplete sentence that is missing a subject, a verb, or both, and therefore does not express a complete thought.\nSimple Sentence: A sentence consisting of only one independent clause.\nCompound Sentence: A sentence consisting of two or more independent clauses, joined by a coordinating conjunction (like and, but, or).\nComplex Sentence: A sentence consisting of one independent clause and at least one dependent clause.\nCompound-Complex Sentence: A sentence consisting of two or more independent clauses and at least one dependent clause.\nCoordinating Conjunction: A word that connects two independent clauses (e.g., For, And, Nor, But, Or, Yet, So - FANBOYS).\nSubordinating Conjunction: A word that introduces a dependent clause and connects it to an independent clause (e.g., because, if, although, when).\n\n\n\n3. Mistakes\n\nWriting sentence fragments: Treating a dependent clause or a phrase as a complete sentence. Why it’s wrong: A sentence must express a complete thought and have both a subject and a main verb to be grammatically correct. Fragments leave the reader waiting for more information.\nCreating a comma splice: Joining two independent clauses with only a comma, without a coordinating conjunction. Why it’s wrong: A comma alone is not strong enough to connect two complete thoughts. This error creates a run-on sentence. Use a comma and a conjunction (e.g., , but), a semicolon (;), or separate them into two sentences.\nForgetting the comma after an introductory dependent clause: Failing to place a comma after a dependent clause that starts a sentence. Why it’s wrong: The comma signals the end of the introductory element and the beginning of the main part of the sentence, which prevents confusion for the reader.\nUsing a comma in a complex sentence when the independent clause comes first: Placing a comma before a subordinating conjunction like because or while when it appears in the middle of a sentence. Why it’s wrong: No separation is needed when the main clause is presented first; the subordinating conjunction smoothly integrates the dependent clause.\nOverusing compound-complex sentences: Constructing long, convoluted sentences that are difficult to follow. Why it’s wrong: While grammatically correct, these sentences can obscure the main point and make the text less readable and engaging. Clarity should always be the priority.",
    "crumbs": [
      "Academic Writing and Argumentation",
      "1. Effective Sentence Structure"
    ]
  },
  {
    "objectID": "Academic Writing and Argumentation/lec_2.html",
    "href": "Academic Writing and Argumentation/lec_2.html",
    "title": "2. Principles of Effective Writing",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 Be Formal\nFormal academic writing is characterized by an objective, professional, and impersonal tone. The goal is to present information and arguments in a clear and respectful manner, avoiding the casualness of everyday conversation. This involves deliberate choices in vocabulary, grammar, and punctuation.\n\n1.1.1 Avoid Contracted Forms\nContractions are shortened forms of words where an apostrophe replaces one or more letters (e.g., don't, isn't, wasn't). These are standard in spoken language but are considered too informal for academic work. Always write out the full words to maintain a formal tone. For example, instead of writing “The data wasn’t conclusive,” you should write “The data was not conclusive.”\n\n\n1.1.2 Avoid Spoken Language\nAcademic writing requires more precise and formal vocabulary than conversational language. Avoid using slang, colloquialisms, or overly simple words. For instance, instead of saying “The results were pretty good,” a more formal alternative would be “The results were encouraging.” Similarly, replace vague, informal quantities like “a huge number of connections” with the more specific and formal term “numerous connections.”\n\n\n1.1.3 Avoid Punctuation Showing Attitude\nPunctuation marks like exclamation points convey emotion (e.g., surprise, excitement), which is generally inappropriate for objective academic writing. The focus should be on the factual presentation of information. Instead of writing “Turnout was less than 20 percent!”, you can convey the same sense of surprise through careful word choice, such as “Surprisingly, turnout in the election was less than 20 percent.”\n\n\n\n1.2 Be Concise\nConciseness is the art of conveying your message using the fewest words necessary without sacrificing clarity or completeness. Wordy and convoluted sentences can obscure your main points. Streamlining your writing makes it more powerful and easier for the reader to understand.\n\n1.2.1 Avoid Phrasal Verbs\nA phrasal verb is a combination of a verb and a preposition or adverb (e.g., bring up, look into, go on). While common in speech, they can be informal or ambiguous. Whenever possible, replace them with a single, more formal verb. For example, instead of “The committee brought up this issue,” use “The committee raised this issue.”\n\n\n1.2.2 Avoid Negatives\nSentences written in the positive form are often clearer and more direct than those written in the negative. Unnecessary negative constructions can make sentences more complex. For example, “not many” can be simplified to “few,” and “did not accept” can be written more directly as “rejected.”\n\n\n1.2.3 Avoid Redundant Pairs\nRedundant pairs are phrases that use two words with the same meaning. This adds unnecessary wordiness. For example, in “first and foremost,” both words mean the first in a series, so using just “First” is more concise. Other examples include “any and all” (use “any”) and “each and every” (use “each”).\n\n\n1.2.4 Avoid Redundant Modifiers\nA redundant modifier is an adverb or adjective that repeats an idea already contained within the word it modifies. For example, since finish implies completion, the phrase “completely finish” is redundant; simply use “finish.” Likewise, “basic fundamentals” is redundant because fundamentals are inherently basic; use “fundamentals.”\n\n\n1.2.5 Avoid Metaconcepts\nMetaconcepts are abstract nouns that describe concepts about concepts (e.g., process, strategy, approach, framework). These words can often be removed to make a sentence more direct without losing meaning. For instance, “The re-factoring strategy seemed to be ineffective” can be streamlined to “Re-factoring seemed to be ineffective.” Similarly, “The process of data generation is explained” is more direct as “Data generation is explained.”\n\n\n\n1.3 Be Precise\nPrecision means choosing the exact word to convey your intended meaning. It involves eliminating ambiguity and vagueness, ensuring that your reader understands your points exactly as you intend them.\n\n1.3.1 Avoid Vague Words\nWords like good, bad, thing, and big are subjective and lack specific meaning. In an academic context, you must use more descriptive and objective language. Instead of stating “The device performance is bad,” provide a more specific critique like “The device performance is substandard.” Instead of “This design is good,” explain why: “This design is effective.”\n\n\n1.3.2 Use Complete Lists\nIn formal writing, avoid using abbreviations like “etc.” (et cetera) when presenting a complete, finite list. Using “etc.” can create ambiguity because the reader may not know what other items the list includes. For example, instead of “The periodic table divides elements into metals, non-metals, etc.,” you should write out the full list: “The periodic table divides elements into metals, non-metals, and semi-metals or metalloids.” The use of “etc.” is only appropriate when providing a few examples from a much larger, open-ended set.\n\n\n\n1.4 Be Cautious (Hedging)\nAcademic knowledge is constantly evolving, and very few claims are absolutely certain. Cautious language, or hedging, is the practice of qualifying your statements to reflect the level of certainty. It shows that you are aware of the limitations of your claims and is a hallmark of credible academic writing.\n\n1.4.1 Avoid Generalizations\nSweeping statements using absolute words like everyone, always, or never are risky because a single counterexample can prove them false. It is more accurate and defensible to use qualified language. Instead of “Everyone has access to the Internet nowadays,” a more accurate statement is “Internet access is widespread nowadays.”\n\n\n1.4.2 Avoid Emotions\nAcademic arguments should be based on logic and evidence, not personal feelings. Emotionally charged words introduce bias and weaken the objectivity of your writing. For example, calling an idea “stupid” is unprofessional. A more academic approach would be to state, “It is debatable to think that economic means can solve these problems.”\n\n\n1.4.3 Use Hedging Language\nTo make your claims more accurate, use hedging words and phrases. These include modal verbs (may, might, can), adverbs (mostly, often, likely), and phrases (appears to be, suggests that). For example, instead of the absolute statement, “The virus is widespread in central Asia,” a more cautious version is “The virus appears to be widespread in central Asia.”\n\n\n\n1.5 Be Clear\nClarity in writing means structuring your sentences so that the reader can follow your ideas effortlessly. Clear writing is characterized by simple sentence structures, strong verbs, and a logical flow of information.\n\n1.5.1 Avoid Nominalization\nNominalization is the process of turning a verb or an adjective into a noun (e.g., investigate becomes investigation, effective becomes effectiveness). Overusing nominalizations, especially as the subject of a sentence with a weak verb like “to be,” makes writing dense and abstract. To improve clarity, turn the noun back into its verb form. Instead of “An investigation of the material was performed by the team,” write “The team investigated the material.”\n\n\n1.5.2 Avoid Passive Voice (Usually)\nIn the active voice, the subject of the sentence performs the action (e.g., “The researcher conducted the experiment”). In the passive voice, the subject receives the action (e.g., “The experiment was conducted by the researcher”). The active voice is generally more direct, concise, and vigorous. However, the passive voice is sometimes appropriate, such as when describing research methods (“The samples were heated to 100°C”) or when the actor is unknown or unimportant.\n\n\n1.5.3 Make Verbs Show Action\nStrong, active verbs make your writing more engaging and clear. Over-reliance on forms of the verb “to be” (is, are, was, were) can lead to dull and wordy prose. Revise sentences to use verbs that show direct action. For example, “The airline service that is provided by commercial carriers is extremely poor” is weaker than “Commercial air carriers tend to provide poor service.”\n\n\n1.5.4 Use Actors or Concrete Nouns for Subjects\nSentences are easiest to understand when the subject is the “actor” performing the action.\n\nAvoid Expletives: Phrases like There is/are and It is are called expletives. They delay the true subject of the sentence. Instead of “There are three ways to solve this problem,” rewrite it as “This problem has three solutions.”\nAvoid Isolated Demonstrative Pronouns: Pronouns like this, that, these, and those can be ambiguous when they stand alone. To ensure clarity, follow the pronoun with a noun. Instead of “This is important to consider,” specify what “This” refers to: “This idea is important to consider.”\nAvoid Gerundial Phrases: A gerund (an “-ing” verb acting as a noun) phrase as a subject can be wordy. Recasting the sentence with a clear actor often improves clarity. For example, “Eating uncooked horse meat can cause health problems with students” is clearer as “If students eat uncooked horse meat, they can have health problems.”\n\n\n\n1.5.5 Place Subjects and Verbs Close Together\nFor a sentence to be readable, the reader must be able to easily identify its core components: the subject and the verb. Separating them with long clauses or phrases forces the reader to hold information in their memory, making the sentence difficult to parse. Restructure sentences to keep the subject and its verb close together.\n\n\n\n1.6 Be Careful with I, We, and You\nThe use of personal pronouns in academic writing varies by discipline, but some general principles apply.\n\n1.6.1 How to Use “I”\nIn many fields, it is now acceptable to use “I” to describe your own research actions or to guide the reader.\n\nUse “I” to state research steps: “I collected and compiled the results.”\nUse “I” to state your intentions: “In this chapter, I will review the literature.”\nDo not use “I” to state personal opinions. Phrases like “I think that…” weaken your argument because academic claims should be based on evidence, not belief. Instead of “I think it is likely that…”, write “Educators are likely to use…”.\n\n\n\n1.6.2 How to Use “We”\nThe pronoun “we” should be used precisely.\n\nUse “we” to refer specifically to yourself and your co-authors: “As researchers, we found that…”\nDo not use “we” to refer vaguely to yourself and the reader or to society in general. This can sound presumptuous. Instead of “We can stop obesity in our society…”, state the agent of the action directly: “Moderate physical activity can stop obesity.”\n\n\n\n1.6.3 How to Use “You”\nThe pronoun “you” directly addresses the reader and is considered too informal for most academic writing. It creates a conversational tone that undermines objectivity. Always replace “you” with a more formal, third-person construction. For example, instead of “You can see the results in Table 3,” write “Table 3 shows the results.”\n\n\n\n\n2. Mistakes\n\nUsing contractions like don't or isn't: This is an error because academic writing requires a formal tone. Why it’s wrong: Contractions are shortcuts used in informal, spoken language and are considered unprofessional in formal documents.\nMaking absolute generalizations with words like everyone or always: This is a mistake because such sweeping claims are rarely accurate and can be easily disproven. Why it’s wrong: A single counterexample can invalidate the claim, which undermines the author’s credibility and the overall strength of the argument.\nStarting sentences with weak expletives like There is or It is: This is a stylistic error that adds unnecessary words and delays the introduction of the true subject. Why it’s wrong: It creates weaker, less direct sentences by burying the main noun and verb, making the text less engaging and harder to read.\nUsing vague, subjective words like good, bad, or thing: This is an error because academic writing demands precision and objectivity. Why it’s wrong: These words rely on personal judgment and lack the specific, measurable, and objective detail needed to make a clear and defensible academic point.\nRelying on the passive voice unnecessarily: While the passive voice has specific uses, overusing it often makes writing wordy and evasive. Why it’s wrong: It can obscure who is performing the action, which can make the text less clear, less direct, and less authoritative.\nStating personal opinions with phrases like I believe or I think: This weakens an academic argument. Why it’s wrong: An argument’s validity should stem from the evidence and logical reasoning presented, not from the author’s personal conviction. These phrases shift the focus from the evidence to the author.",
    "crumbs": [
      "Academic Writing and Argumentation",
      "2. Principles of Effective Writing"
    ]
  },
  {
    "objectID": "Academic Writing and Argumentation/lec_5.html",
    "href": "Academic Writing and Argumentation/lec_5.html",
    "title": "5. Avoiding Plagiarism, Referencing, Summarizing, Paraphrasing",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 Understanding Plagiarism\nPlagiarism is the act of presenting someone else’s work or ideas as your own without giving proper credit. In academic and professional writing, it is considered a serious offense with significant consequences, including failing an assignment, being reported to a disciplinary board, or even expulsion. A common guideline defines plagiarism as using more than three words verbatim from a source without proper referencing.\nIt’s important to distinguish between plagiarism and similarity. While plagiarism is the uncredited use of another’s work, similarity can occur legitimately when citing sources. Tools that detect similarity might flag names, titles, established terminology, numerical data, or common phrases that are difficult to reword. The key difference is attribution; properly referenced text may be similar, but it is not plagiarized.\n\n\n1.2 The Core Principles of Referencing\nReferencing is the fundamental method for avoiding plagiarism. It involves systematically acknowledging the sources of information you have used in your writing. Proper referencing allows your readers to locate the original sources, demonstrates the breadth of your research, and situates your work within the existing academic conversation. The two primary components of referencing are in-text citations and a final reference list.\n\n\n1.3 In-Text Citations (IEEE Style)\nAn in-text citation is a brief reference within the body of your text that points the reader to the full source details in the reference list. The IEEE (Institute of Electrical and Electronics Engineers) style is a numbered system commonly used in technical fields.\nKey characteristics of IEEE in-text citations include:\n\nNumbered System: Citations are numbered in the order they appear in the text, starting with [1].\nSquare Brackets: The citation number is always enclosed in square brackets, e.g., [2].\nFormatting: The citation number should appear on the text line, have a space before it, and come inside the sentence’s punctuation (e.g., “…as shown in the study [3].”).\nMultiple Sources: To cite multiple sources at once, separate the numbers with commas (e.g., [4], [5]) or use a hyphen for a range (e.g., [6]-[8]).\nEt al.: This Latin phrase, short for et alia (“and others”), is used when a source has more than two authors. You should list the first author’s last name followed by et al. For example, a work by Wood, Taylor, and Azzarello would be cited as “Wood et al. [7] claim that…”.\n\n\n\n1.4 Direct Quotations and Ellipsis\nA direct quotation is an exact, word-for-word reproduction of a phrase or sentence from a source. To use a direct quotation correctly, you must enclose the borrowed text in quotation marks and provide an in-text citation, including the page number if available (e.g., [7, p. 14]). Quotations are used to preserve the original author’s precise language or to provide strong evidence for an argument.\nAn ellipsis (a set of three dots, ...) is used within a quotation to indicate that you have omitted some unnecessary words from the original text. It is crucial that the omission does not alter the original meaning of the source material. For example: “the proposed circuit has improved signal attenuation ... and has been experiencing less performance degradation.”\n\n\n1.5 The Reference List\nThe reference list appears at the end of your document and provides the full publication details for every source cited in your text. Each entry is numbered to correspond with the in-text citations. This allows any reader to find the exact sources you consulted. The list should be ordered numerically, matching the sequence of citations in the paper.\n\n\n1.6 The Art of Summarizing\nSummarizing involves condensing the main ideas of a source into a concise overview written in your own words. Unlike a detailed paraphrase, a summary focuses only on the main points, omitting the supporting details. You should summarize when the finer details are irrelevant to your argument or when a source is not significant enough to warrant a more detailed explanation. A summary still requires a citation to the original source.\n\n\n1.7 Effective Paraphrasing\nParaphrasing is restating information or ideas from a source using your own vocabulary and sentence structure. A successful paraphrase demonstrates that you have fully understood the original text. It is different from a quotation because it does not use the author’s exact words, and it is different from a summary because it can be just as detailed as the original. Paraphrasing is often preferred over quoting because it improves the flow and readability of your writing while still grounding your arguments in credible sources.\n\n\n1.8 A 6-Step Guide to Paraphrasing\nTo ensure your paraphrase is a true representation of your own understanding and not just a minor rewording of the original, follow these six steps:\n\nRead the Original: Read the passage several times until you are confident you understand its meaning.\nNote Key Concepts: Identify the main ideas and any shared language—terms that are difficult or impossible to change, such as proper nouns, technical terminology, or numerical data.\nWrite from Memory: Set the original text aside and write your version of the idea. This forces you to use your own words and sentence structure.\nCompare: Compare your paraphrase with the original passage. Check that you have preserved the original meaning and have not used the same phrasing.\nRevise: Change any phrases or sentences that are still too similar to the original.\nCite: Add an in-text citation (e.g., [1]) to give credit to the original author.\n\n\n\n1.9 Using Reporting Verbs\nReporting verbs are used to introduce information from a source (e.g., “Smith [9] argues that…”). The choice of verb is important, as it can convey your stance on the source’s idea.  Instead of relying on overused, neutral verbs like “says” or “states,” select a stronger, more precise verb to accurately reflect the author’s position and critically evaluate the information. For example, instead of “The study says the result is positive,” you could write “The study celebrates the positive result” or “The study concedes the result is positive.” Using varied and accurate reporting verbs makes your writing more dynamic, precise, and analytical. For instance, writing “The Asian Police Alliance [34] blames the rise in drug trafficking on Western pop culture” is more impactful and specific than saying they say it is the cause.\n\n\n\n2. Mistakes\n\nPatchwriting: This involves changing only a few words in a sentence from a source or rearranging the sentence order slightly. Why it’s wrong: This is a form of plagiarism because it closely follows the original author’s vocabulary and sentence structure without using quotation marks. A proper paraphrase requires you to use your own words and sentence construction.\nIncorrect Citation Phrasing: Using awkward phrasing like “In reference [1], Jones discusses…” or “In Jones [2], a new approach is proposed.” Why it’s wrong: While not technically plagiarism, it is poor academic style. The preferred, more direct phrasing is “Jones [1] discusses…” or “Jones [2] proposed a new approach…”.\nMisrepresenting a Source with Ellipsis: Using an ellipsis (...) to omit words in a way that changes the author’s original meaning. For example, changing “The study found no significant evidence of a cure” to “The study found ... evidence of a cure.” Why it’s wrong: This is a serious form of academic dishonesty as it deliberately misleads the reader about the source’s findings.\nForgetting to Cite a Summary or Paraphrase: Assuming that because you used your own words, you don’t need to provide a citation. Why it’s wrong: The ideas or information still belong to the original author. Plagiarism includes using someone’s ideas, not just their words, without giving credit.\nMismatching In-Text Citations and the Reference List: Citing a source in your text (e.g., [5]) but forgetting to add the corresponding entry to the numbered reference list at the end of the paper. Why it’s wrong: This makes it impossible for a reader to find the source you are referencing, defeating the purpose of the citation.\nUsing Too Many Direct Quotations: Filling your paper with long, block quotations instead of paraphrasing the information. Why it’s wrong: Over-quoting suggests that you have not fully understood the material or are unable to explain it in your own words. It makes the writing choppy and less original.",
    "crumbs": [
      "Academic Writing and Argumentation",
      "5. Avoiding Plagiarism, Referencing, Summarizing, Paraphrasing"
    ]
  },
  {
    "objectID": "Analytical Geometry and Linear Algebra I/lec_1.html",
    "href": "Analytical Geometry and Linear Algebra I/lec_1.html",
    "title": "1. Vectors, Vector Spaces, Linear Independence, Basis, and Dimension",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 Introduction to Vectors\nA vector is a fundamental mathematical object that possesses both magnitude (or length) and direction. It’s distinct from a scalar, which is a simple numerical value (like temperature or speed) that has magnitude but no direction. Think of a vector as an instruction to travel a certain distance in a specific direction.\nVectors can be represented in several ways:\n\n1.1.1 Geometric Representation\nAs a directed line segment, or an arrow, in space. The arrow’s length represents the magnitude, and the direction it points represents its direction. A key property is that a vector is independent of its starting position; two arrows with the same length and direction represent the same vector, regardless of where they are in space. This makes them “free-floating” instructions.\n\n\n\n1.1.2 Algebraic Representation\nAs an ordered list of numbers, called components. For instance, in a 2D plane (denoted \\(\\mathbb{R}^2\\)), a vector is represented by two components \\((x, y)\\), and in 3D space (\\(\\mathbb{R}^3\\)), by three components \\((x, y, z)\\). These components correspond to the vector’s projection onto the coordinate axes. By convention in linear algebra, vectors are often written as column vectors: \\[ \\vec{v} = \\begin{pmatrix} x \\\\ y \\end{pmatrix} \\] A row vector is written as \\((x, y)\\). The two are not interchangeable, but one can be converted to the other using the transpose operation: \\(\\begin{pmatrix} x \\\\ y \\end{pmatrix}^T = (x, y)\\).\n\n\n1.1.3 Vector Notation\nVectors can be denoted by bold lowercase letters (e.g., v), a letter with an arrow above it (e.g., \\(\\vec{v}\\)), or by their start and end points (e.g., \\(\\vec{AB}\\), representing the vector from point A to point B). Points are denoted by capital letters (e.g., A, B). Scalars are denoted by regular lowercase letters (e.g., c, k, \\(\\alpha\\)).\n\n\n\n1.2 Basic Vector Operations\nStandard arithmetic operations are defined for vectors, allowing them to be manipulated algebraically.\n\n1.2.1 Vector Addition\nTo add two vectors, you add their corresponding components. Geometrically, this is represented by the tip-to-tail method: place the tail of the second vector at the tip of the first. The resulting vector (the sum) goes from the tail of the first vector to the tip of the second, forming a triangle. \\[ \\vec{u} + \\vec{v} = \\begin{pmatrix} u_1 \\\\ u_2 \\end{pmatrix} + \\begin{pmatrix} v_1 \\\\ v_2 \\end{pmatrix} = \\begin{pmatrix} u_1 + v_1 \\\\ u_2 + v_2 \\end{pmatrix} \\] \n\n\n1.2.2 Scalar Multiplication\nTo multiply a vector by a scalar, you multiply each of its components by that scalar. This operation scales the vector, changing its magnitude. If the scalar is positive, the direction remains the same. If negative, the direction is reversed. A scalar of 2 doubles the vector’s length; a scalar of -0.5 halves its length and flips its direction. \\[ c\\vec{v} = c\\begin{pmatrix} v_1 \\\\ v_2 \\end{pmatrix} = \\begin{pmatrix} cv_1 \\\\ cv_2 \\end{pmatrix} \\]\n\n\n1.2.3 Vector Subtraction\nSubtraction is defined as adding the negative of a vector. That is, \\(\\vec{u} - \\vec{v}\\) is the same as \\(\\vec{u} + (-1)\\vec{v}\\). Geometrically, the vector \\(\\vec{u} - \\vec{v}\\) is the vector that points from the tip of \\(\\vec{v}\\) to the tip of \\(\\vec{u}\\). \\[ \\vec{u} - \\vec{v} = \\begin{pmatrix} u_1 \\\\ u_2 \\end{pmatrix} - \\begin{pmatrix} v_1 \\\\ v_2 \\end{pmatrix} = \\begin{pmatrix} u_1 - v_1 \\\\ u_2 - v_2 \\end{pmatrix} \\]\n\n\n\n1.3 Vector Magnitude and Normalization\n\n1.3.1 Norm of a Vector\nThe norm (or magnitude/length) of a vector is a non-negative scalar value representing its length. It is calculated using the Pythagorean theorem on its components. The norm of a vector \\(\\vec{v}\\) is denoted as \\(||\\vec{v}||\\). \\[ ||\\vec{v}|| = \\sqrt{v_1^2 + v_2^2 + \\dots + v_n^2} \\]\n\n\n1.3.2 Unit Vectors\nA unit vector is any vector with a norm of 1. It is useful for representing a pure direction without any magnitude. To normalize a non-zero vector (i.e., to find the unit vector in its direction), you divide the vector by its own norm. \\[ \\hat{u} = \\frac{\\vec{v}}{||\\vec{v}||} \\]\n\n\n1.3.3 Standard Unit Vectors\nIn Cartesian coordinate systems, there are special unit vectors that point along the axes. In \\(\\mathbb{R}^3\\), these are:\n\n\\(\\vec{i} = \\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix}\\) (along the x-axis)\n\\(\\vec{j} = \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\end{pmatrix}\\) (along the y-axis)\n\\(\\vec{k} = \\begin{pmatrix} 0 \\\\ 0 \\\\ 1 \\end{pmatrix}\\) (along the z-axis) Any vector in \\(\\mathbb{R}^3\\) can be written as a sum of these: \\(\\begin{pmatrix} a \\\\ b \\\\ c \\end{pmatrix} = a\\vec{i} + b\\vec{j} + c\\vec{k}\\).\n\n\n\n1.3.4 Distance Between Points\nThe straight-line distance between two points, say \\(P\\) and \\(Q\\), can be found by first calculating the vector \\(\\vec{PQ}\\) that connects them (\\(\\vec{PQ} = Q - P\\)) and then finding the norm of that vector. \\[ d(P, Q) = ||\\vec{PQ}|| = ||Q - P|| = \\sqrt{(q_1-p_1)^2 + (q_2-p_2)^2 + \\dots} \\]\n\n\n\n1.4 Vector Spaces and Subspaces\n\n1.4.1 Vector Space\nA vector space is a collection of objects (called vectors) for which the operations of vector addition and scalar multiplication are defined and satisfy a set of ten rules, known as axioms. These axioms ensure that vectors behave consistently and predictably. Key axioms include closure (adding two vectors or multiplying by a scalar results in a vector still within the space), the existence of a zero vector (\\(\\vec{0}\\)), and the existence of an additive inverse (e.g., \\(-\\vec{v}\\)) for every vector.\n\nExamples of Vector Spaces:\n\n\\(\\mathbb{R}^n\\): The set of all n-dimensional vectors with real number components. This is the most common example.\n\\(P_n\\): The set of all polynomials of degree at most \\(n\\). For example, \\(3x^2 - x + 5\\) is a vector in \\(P_2\\).\nThe set of all continuous functions.\n\nNon-Example: The set of all vectors in the first quadrant of \\(\\mathbb{R}^2\\) (where \\(x \\ge 0, y \\ge 0\\)) is not a vector space because it fails closure under scalar multiplication. Multiplying a vector in the first quadrant by -1 results in a vector in the third quadrant, which is outside the set.\n\n\n\n1.4.2 Subspace\nA subspace is a subset of a larger vector space that is itself a vector space. To verify if a subset is a subspace, a simplified test called the Subspace Test is used. A subset \\(H\\) is a subspace if it meets three conditions:\n\nIt contains the zero vector.\nIt is closed under addition (if \\(\\vec{u}\\) and \\(\\vec{v}\\) are in \\(H\\), then \\(\\vec{u} + \\vec{v}\\) must also be in \\(H\\)).\nIt is closed under scalar multiplication (if \\(\\vec{u}\\) is in \\(H\\) and \\(c\\) is any scalar, then \\(c\\vec{u}\\) must also be in \\(H\\)).\n\n\nKey Examples of Subspaces:\n\nAny line or plane passing through the origin in \\(\\mathbb{R}^3\\) is a subspace of \\(\\mathbb{R}^3\\).\nThe null space of a matrix A, which is the set of all solutions to the homogeneous equation \\(A\\vec{x} = \\vec{0}\\), is always a subspace.\n\n\n\n\n1.4.3 Centroid of a Triangle\nFor a triangle with vertices at points A, B, and C, the centroid (or center of mass) is the unique point G such that the vectors from G to each vertex sum to the zero vector: \\(\\vec{GA} + \\vec{GB} + \\vec{GC} = \\vec{0}\\). The position vector of the centroid is the average of the position vectors of its vertices: \\(\\vec{OG} = \\frac{1}{3}(\\vec{OA} + \\vec{OB} + \\vec{OC})\\). The centroid is always located inside the triangle.\n\n\n\n1.5 Linear Combinations, Span, and Basis\n\n1.5.1 Linear Combination and Span\nA linear combination is a new vector formed by adding together scalar multiples of other vectors. For example, \\(\\vec{w} = c_1\\vec{v}_1 + c_2\\vec{v}_2\\) is a linear combination of \\(\\vec{v}_1\\) and \\(\\vec{v}_2\\). The span of a set of vectors is the set of all possible linear combinations that can be formed from them. The span of a set of vectors always forms a vector space (or a subspace). For instance, the span of two non-collinear vectors in \\(\\mathbb{R}^3\\) is a plane passing through the origin. \n\n\n1.5.2 Linear Independence\nA set of vectors is linearly independent if no vector in the set can be written as a linear combination of the others. This means that none of the vectors are redundant; each one contributes a unique direction. The only way to form the zero vector from a linear combination of linearly independent vectors is if all the scalar coefficients are zero (the trivial solution).\n\n\n1.5.3 Linear Dependence\nA set of vectors is linearly dependent if at least one vector can be expressed as a linear combination of the others. This indicates redundancy in the set. Geometrically, two vectors are linearly dependent if they lie on the same line, and three vectors are linearly dependent if they lie on the same plane.\n\n\n1.5.4 Basis and Dimension\nA basis of a vector space is a set of vectors that is both linearly independent and spans the entire space. A basis provides a minimal set of “building blocks” for the space. While a vector space can have many different bases, the number of vectors in every basis for that space is always the same. This unique number is called the dimension of the vector space. For example, the dimension of \\(\\mathbb{R}^3\\) is 3, because a standard basis for it is the set of three vectors: \\(\\{\\vec{i}, \\vec{j}, \\vec{k}\\}\\).\n\n\n\n\n2. Definitions\n\nVector: A mathematical object that has both magnitude (length) and direction.\nScalar: A quantity that is fully described by a magnitude alone (a single number).\nNorm: The length or magnitude of a vector, denoted by \\(||\\vec{v}||\\).\nUnit Vector: A vector with a norm of 1, often used to represent direction.\nStandard Unit Vectors: The vectors \\(\\vec{i}, \\vec{j}, \\vec{k}\\) that form the basis for the Cartesian coordinate system.\nVector Space: A collection of vectors and a field of scalars that satisfy a set of ten axioms, defining a consistent system for vector addition and scalar multiplication.\nSubspace: A subset of a vector space that is itself a vector space under the same operations.\nNull Space: The set of all vectors \\(\\vec{x}\\) that are solutions to the homogeneous equation \\(A\\vec{x} = \\vec{0}\\). The null space of a matrix is always a subspace.\nCentroid: The point in a triangle where the medians intersect; its position vector is the average of the vertices’ position vectors.\nLinear Combination: A sum of vectors, each multiplied by a scalar coefficient.\nSpan: The set of all possible linear combinations of a given set of vectors. The span of a set of vectors is always a subspace.\nLinearly Independent: A set of vectors where no vector can be written as a linear combination of the others.\nLinearly Dependent: A set of vectors where at least one vector can be written as a linear combination of the others.\nBasis: A set of vectors that is both linearly independent and spans the vector space. It is a minimal generating set for the space.\nDimension: The number of vectors in any basis for a vector space.\n\n\n\n3. Formulas\n\nVector Addition: \\(\\vec{u} + \\vec{v} = \\begin{pmatrix} u_1 + v_1 \\\\ u_2 + v_2 \\end{pmatrix}\\)\nScalar Multiplication: \\(c\\vec{v} = \\begin{pmatrix} cv_1 \\\\ cv_2 \\end{pmatrix}\\)\nVector Subtraction: \\(\\vec{u} - \\vec{v} = \\begin{pmatrix} u_1 - v_1 \\\\ u_2 - v_2 \\end{pmatrix}\\)\nNorm of a Vector in \\(\\mathbb{R}^n\\): \\(||\\vec{v}|| = \\sqrt{v_1^2 + v_2^2 + \\dots + v_n^2}\\)\nDistance between Points P and Q: \\(d(P, Q) = ||Q - P||\\)\nNormalization (Unit Vector): \\(\\hat{u} = \\frac{\\vec{v}}{||\\vec{v}||}\\)\nPosition Vector of Centroid G: \\(\\vec{OG} = \\frac{1}{3}(\\vec{OA} + \\vec{OB} + \\vec{OC})\\)\nProjection of vector \\(\\vec{a}\\) onto vector \\(\\vec{b}\\): \\(\\text{proj}_{\\vec{b}}\\vec{a} = \\frac{\\vec{a} \\cdot \\vec{b}}{||\\vec{b}||^2} \\vec{b}\\)\nReflection of vector \\(\\vec{a}\\) over a line defined by vector \\(\\vec{b}\\): \\(\\text{ref}_{\\vec{b}}\\vec{a} = 2 \\cdot \\text{proj}_{\\vec{b}}\\vec{a} - \\vec{a}\\)\n\n\n\n4. Mistakes\n\nAdding a scalar and a vector: An operation like \\(5 + \\begin{pmatrix} 2 \\\\ 3 \\end{pmatrix}\\) is undefined. Why it’s wrong: Scalars and vectors are fundamentally different types of mathematical objects and cannot be directly added. You can only perform scalar multiplication.\nAssuming any set of n vectors in \\(\\mathbb{R}^n\\) is a basis: For example, the set \\(\\{\\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}, \\begin{pmatrix} 2 \\\\ 2 \\end{pmatrix}\\}\\) is not a basis for \\(\\mathbb{R}^2\\). Why it’s wrong: A basis must be linearly independent. In this case, the second vector is just twice the first, so they are linearly dependent and only span a line, not the entire plane.\nConfusing a subspace with any subset: A line in \\(\\mathbb{R}^2\\) that does not pass through the origin is a subset, but not a subspace. Why it’s wrong: A subspace must contain the zero vector and be closed under addition and scalar multiplication. A line not through the origin fails the zero vector test.\nMixing up linear independence and spanning: A set of vectors can be linearly independent but not span the entire space. For example, \\(\\{\\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix}, \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\end{pmatrix}\\}\\) is a linearly independent set in \\(\\mathbb{R}^3\\), but it only spans the xy-plane, not all of \\(\\mathbb{R}^3\\).\nIncorrectly calculating the dot product: The dot product of two vectors results in a scalar, not another vector. Why it’s wrong: The definition of the dot product is \\(\\vec{u} \\cdot \\vec{v} = u_1v_1 + u_2v_2 + \\dots\\), which is a sum of products, resulting in a single number.\nForgetting to take the square root for the norm: The norm is the length, which is the square root of the sum of squared components. A common mistake is to forget the square root, which calculates the squared norm \\(||\\vec{v}||^2\\).\n\n\n\n5. Examples\n\n5.1. Vector Equality\nQuestion: Given points \\(A(-1, 1)\\), \\(B(3, 5)\\), \\(C(x, y)\\), and \\(D(2x, 1)\\), find the values of \\(x\\) and \\(y\\) such that the vector \\(\\vec{AB}\\) is equal to the vector \\(\\vec{CD}\\).\n\n\nClick to see the solution\n\n\nCalculate the components of vector \\(\\vec{AB}\\): \\[ \\vec{AB} = B - A = \\begin{pmatrix} 3 - (-1) \\\\ 5 - 1 \\end{pmatrix} = \\begin{pmatrix} 4 \\\\ 4 \\end{pmatrix} \\]\nCalculate the components of vector \\(\\vec{CD}\\) in terms of \\(x\\) and \\(y\\): \\[ \\vec{CD} = D - C = \\begin{pmatrix} 2x - x \\\\ 1 - y \\end{pmatrix} = \\begin{pmatrix} x \\\\ 1 - y \\end{pmatrix} \\]\nSet the two vectors equal to each other: For two vectors to be equal, their corresponding components must be equal. \\[ \\begin{pmatrix} 4 \\\\ 4 \\end{pmatrix} = \\begin{pmatrix} x \\\\ 1 - y \\end{pmatrix} \\]\nSolve the resulting system of equations:\n\nFrom the first component: \\(x = 4\\).\nFrom the second component: \\(4 = 1 - y \\implies y = 1 - 4 \\implies y = -3\\).\n\n\nAnswer: The coordinates are \\(x=4, y=-3\\).\n\n\n\n5.2. Subspace Test (Failure)\nQuestion: Show that the set \\(S\\) of all vectors in the first quadrant of \\(\\mathbb{R}^2\\) (i.e., all vectors \\(\\begin{pmatrix} x \\\\ y \\end{pmatrix}\\) where \\(x \\ge 0\\) and \\(y \\ge 0\\)) does not form a vector space.\n\n\nClick to see the solution\n\n\nTo be a vector space, \\(S\\) must satisfy all subspace conditions. We only need to find one condition that fails. Let’s check closure under scalar multiplication.\nChoose a vector in the set \\(S\\). Let’s pick \\(\\vec{v} = \\begin{pmatrix} 3 \\\\ 5 \\end{pmatrix}\\). Since \\(3 \\ge 0\\) and \\(5 \\ge 0\\), this vector is in \\(S\\).\nChoose a scalar that might cause a problem. Let’s pick a negative scalar, \\(c = -2\\).\nPerform the scalar multiplication: \\[ c\\vec{v} = -2 \\begin{pmatrix} 3 \\\\ 5 \\end{pmatrix} = \\begin{pmatrix} -6 \\\\ -10 \\end{pmatrix} \\]\nCheck if the resulting vector is in \\(S\\). The new vector has components \\(x=-6\\) and \\(y=-10\\). Since both are less than 0, this vector is not in the first quadrant and therefore not in the set \\(S\\).\nConclusion: The set \\(S\\) is not closed under scalar multiplication, so it cannot be a subspace (and thus not a vector space).\n\nAnswer: The set is not a vector space because it fails closure under scalar multiplication.\n\n\n\n5.3. Centroid of a Triangle\nQuestion: Consider a triangle with vertices \\(A(-1, 0, 0)\\), \\(B(2, 0, \\sqrt{7})\\), and \\(C(3, \\sqrt{2}, \\sqrt{7})\\). Find the coordinates of the centroid \\(G\\).\n\n\nClick to see the solution\n\n\nIdentify the position vectors for each vertex, which are the same as their coordinates: \\[ \\vec{OA} = \\begin{pmatrix} -1 \\\\ 0 \\\\ 0 \\end{pmatrix}, \\quad \\vec{OB} = \\begin{pmatrix} 2 \\\\ 0 \\\\ \\sqrt{7} \\end{pmatrix}, \\quad \\vec{OC} = \\begin{pmatrix} 3 \\\\ \\sqrt{2} \\\\ \\sqrt{7} \\end{pmatrix} \\]\nUse the formula for the position vector of the centroid, \\(\\vec{OG}\\): \\[ \\vec{OG} = \\frac{1}{3}(\\vec{OA} + \\vec{OB} + \\vec{OC}) \\]\nAdd the vertex vectors: \\[ \\vec{OA} + \\vec{OB} + \\vec{OC} = \\begin{pmatrix} -1+2+3 \\\\ 0+0+\\sqrt{2} \\\\ 0+\\sqrt{7}+\\sqrt{7} \\end{pmatrix} = \\begin{pmatrix} 4 \\\\ \\sqrt{2} \\\\ 2\\sqrt{7} \\end{pmatrix} \\]\nMultiply by \\(\\frac{1}{3}\\) to get the final coordinates: \\[ \\vec{OG} = \\frac{1}{3} \\begin{pmatrix} 4 \\\\ \\sqrt{2} \\\\ 2\\sqrt{7} \\end{pmatrix} = \\begin{pmatrix} 4/3 \\\\ \\sqrt{2}/3 \\\\ 2\\sqrt{7}/3 \\end{pmatrix} \\]\n\nAnswer: The centroid is at \\((4/3, \\sqrt{2}/3, 2\\sqrt{7}/3)\\).\n\n\n\n5.4. Checking for a Basis\nQuestion: Determine if the set of vectors \\(B = \\left\\{ \\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix}, \\begin{pmatrix} 0 \\\\ 2 \\\\ 0 \\end{pmatrix}, \\begin{pmatrix} 0 \\\\ 0 \\\\ 3 \\end{pmatrix} \\right\\}\\) forms a basis for \\(\\mathbb{R}^3\\).\n\n\nClick to see the solution\n\n\nA set is a basis if it is linearly independent and spans the space. For \\(\\mathbb{R}^3\\), we need 3 vectors that satisfy these conditions.\nCheck for linear independence: Set up the equation \\(c_1\\vec{v}_1 + c_2\\vec{v}_2 + c_3\\vec{v}_3 = \\vec{0}\\). \\[ c_1\\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix} + c_2\\begin{pmatrix} 0 \\\\ 2 \\\\ 0 \\end{pmatrix} + c_3\\begin{pmatrix} 0 \\\\ 0 \\\\ 3 \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\end{pmatrix} \\] \\[ \\begin{pmatrix} c_1 \\\\ 2c_2 \\\\ 3c_3 \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\end{pmatrix} \\] This clearly implies that \\(c_1 = 0\\), \\(2c_2 = 0 \\implies c_2 = 0\\), and \\(3c_3 = 0 \\implies c_3 = 0\\). Since the only solution is the trivial solution (\\(c_1=c_2=c_3=0\\)), the vectors are linearly independent.\nCheck if the vectors span \\(\\mathbb{R}^3\\): Since we have 3 linearly independent vectors in a 3-dimensional space, they automatically form a basis and span the space. Any vector \\(\\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix}\\) can be written as a linear combination: \\[ x\\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix} + \\frac{y}{2}\\begin{pmatrix} 0 \\\\ 2 \\\\ 0 \\end{pmatrix} + \\frac{z}{3}\\begin{pmatrix} 0 \\\\ 0 \\\\ 3 \\end{pmatrix} = \\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix} \\] Since any vector can be formed, the set spans \\(\\mathbb{R}^3\\).\n\nAnswer: Yes, the set is a basis for \\(\\mathbb{R}^3\\).\n\n\n\n5.5. Linear Dependence\nQuestion: Determine if the vectors \\(\\vec{u} = (1, 2)\\) and \\(\\vec{v} = (3, 6)\\) are linearly dependent.\n\n\nClick to see the solution\n\n\nCheck if one vector is a scalar multiple of the other. For two vectors, this is the easiest way to check for linear dependence.\nSet up the equation \\(\\vec{v} = c\\vec{u}\\): \\[ \\begin{pmatrix} 3 \\\\ 6 \\end{pmatrix} = c \\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix} \\]\nSolve for c from the components:\n\nFrom the first component: \\(3 = c \\cdot 1 \\implies c = 3\\).\nFrom the second component: \\(6 = c \\cdot 2 \\implies c = 3\\).\n\nConclusion: Since we found a consistent scalar \\(c=3\\) such that \\(\\vec{v} = 3\\vec{u}\\), the vectors are scalar multiples of each other.\n\nAnswer: The vectors are linearly dependent.\n\n\n\n5.6. Vector Projection\nQuestion: Given \\(\\vec{a} = (2, 2, -1)\\) and \\(\\vec{b} = (0, 4, 3)\\), compute the projection of \\(\\vec{a}\\) onto \\(\\vec{b}\\).\n\n\nClick to see the solution\n\n\nCalculate the dot product \\(\\vec{a} \\cdot \\vec{b}\\): \\[ \\vec{a} \\cdot \\vec{b} = (2)(0) + (2)(4) + (-1)(3) = 0 + 8 - 3 = 5 \\]\nCalculate the squared norm of \\(\\vec{b}\\): \\[ ||\\vec{b}||^2 = 0^2 + 4^2 + 3^2 = 0 + 16 + 9 = 25 \\]\nApply the projection formula: \\[ \\text{proj}_{\\vec{b}}\\vec{a} = \\frac{\\vec{a} \\cdot \\vec{b}}{||\\vec{b}||^2} \\vec{b} = \\frac{5}{25} \\begin{pmatrix} 0 \\\\ 4 \\\\ 3 \\end{pmatrix} \\]\nSimplify the result: \\[ \\text{proj}_{\\vec{b}}\\vec{a} = \\frac{1}{5} \\begin{pmatrix} 0 \\\\ 4 \\\\ 3 \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 4/5 \\\\ 3/5 \\end{pmatrix} \\]\n\nAnswer: The projection of \\(\\vec{a}\\) onto \\(\\vec{b}\\) is \\(\\begin{pmatrix} 0 \\\\ 4/5 \\\\ 3/5 \\end{pmatrix}\\).\n\n\n\n5.7. Vector Reflection\nQuestion: Using the vectors from the previous example, compute the reflection of \\(\\vec{a} = (2, 2, -1)\\) over the line defined by vector \\(\\vec{b} = (0, 4, 3)\\).\n\n\nClick to see the solution\n\n\nRecall the projection vector from the previous example: \\[ \\text{proj}_{\\vec{b}}\\vec{a} = \\begin{pmatrix} 0 \\\\ 4/5 \\\\ 3/5 \\end{pmatrix} \\]\nApply the reflection formula: \\(\\text{ref}_{\\vec{b}}\\vec{a} = 2 \\cdot \\text{proj}_{\\vec{b}}\\vec{a} - \\vec{a}\\): \\[ \\text{ref}_{\\vec{b}}\\vec{a} = 2 \\begin{pmatrix} 0 \\\\ 4/5 \\\\ 3/5 \\end{pmatrix} - \\begin{pmatrix} 2 \\\\ 2 \\\\ -1 \\end{pmatrix} \\]\nPerform the scalar multiplication: \\[ = \\begin{pmatrix} 0 \\\\ 8/5 \\\\ 6/5 \\end{pmatrix} - \\begin{pmatrix} 2 \\\\ 2 \\\\ -1 \\end{pmatrix} \\]\nPerform the vector subtraction: \\[ = \\begin{pmatrix} 0 - 2 \\\\ 8/5 - 10/5 \\\\ 6/5 - (-5/5) \\end{pmatrix} = \\begin{pmatrix} -2 \\\\ -2/5 \\\\ 11/5 \\end{pmatrix} \\]\n\nAnswer: The reflection of \\(\\vec{a}\\) over \\(\\vec{b}\\) is \\(\\begin{pmatrix} -2 \\\\ -2/5 \\\\ 11/5 \\end{pmatrix}\\).",
    "crumbs": [
      "Analytical Geometry and Linear Algebra I",
      "1. Vectors, Vector Spaces, Linear Independence, Basis, and Dimension"
    ]
  },
  {
    "objectID": "Analytical Geometry and Linear Algebra I/lec_2.html",
    "href": "Analytical Geometry and Linear Algebra I/lec_2.html",
    "title": "2. Inner Product, Dot Product, Orthogonality, and Projections",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 The Inner Product\nAn inner product is a generalized concept that defines a way to multiply two vectors to produce a scalar (a single number). It is a function that takes two vectors and returns a single value, and it allows us to introduce geometric concepts like length and angle into abstract vector spaces. The standard dot product is the most common example of an inner product. For a function to be considered an inner product, it must satisfy four key properties for any vectors \\(\\vec{u}\\), \\(\\vec{v}\\), \\(\\vec{w}\\) and any scalar \\(c\\):\n\nSymmetry: The order of vectors doesn’t matter. \\(\\langle \\vec{u}, \\vec{v} \\rangle = \\langle \\vec{v}, \\vec{u} \\rangle\\).\nLinearity: A scalar multiple can be factored out. \\(\\langle c\\vec{u}, \\vec{v} \\rangle = c\\langle \\vec{u}, \\vec{v} \\rangle\\).\nAdditivity: The product distributes over vector addition. \\(\\langle \\vec{u} + \\vec{w}, \\vec{v} \\rangle = \\langle \\vec{u}, \\vec{v} \\rangle + \\langle \\vec{w}, \\vec{v} \\rangle\\).\nPositive Definiteness: The inner product of a vector with itself is always non-negative, and it is zero if and only if the vector is the zero vector. \\(\\langle \\vec{v}, \\vec{v} \\rangle \\ge 0\\) and \\(\\langle \\vec{v}, \\vec{v} \\rangle = 0 \\iff \\vec{v} = \\vec{0}\\).\n\nA vector space equipped with an inner product is called an inner product space.\n\n\n1.2 The Dot Product\nThe dot product (also known as the Euclidean inner product) is the standard way to combine two vectors to produce a scalar. It has two primary definitions: an algebraic one and a geometric one. Both yield the same result.\n\n\n1.3 Algebraic Definition of the Dot Product\nThe algebraic definition is calculated by multiplying the corresponding components of two vectors and summing the results. For two vectors \\(\\vec{u} = (u_1, u_2, \\dots, u_n)\\) and \\(\\vec{v} = (v_1, v_2, \\dots, v_n)\\) in \\(\\mathbb{R}^n\\), the dot product is: \\[ \\vec{u} \\cdot \\vec{v} = u_1v_1 + u_2v_2 + \\dots + u_nv_n = \\sum_{i=1}^{n} u_i v_i \\] For example, in 3D space, if \\(\\vec{a} = (a_1, a_2, a_3)\\) and \\(\\vec{b} = (b_1, b_2, b_3)\\), then \\(\\vec{a} \\cdot \\vec{b} = a_1b_1 + a_2b_2 + a_3b_3\\).\n\n\n1.4 Geometric Definition and Connection to the Law of Cosines\nThe geometric definition relates the dot product to the magnitudes (lengths) of the vectors and the angle between them. For two vectors \\(\\vec{v}\\) and \\(\\vec{w}\\), with an angle \\(\\theta\\) between them: \\[ \\vec{v} \\cdot \\vec{w} = ||\\vec{v}|| \\cdot ||\\vec{w}|| \\cos(\\theta) \\] Here, \\(||\\vec{v}||\\) denotes the magnitude of vector \\(\\vec{v}\\). This definition is powerful because it connects a simple algebraic operation to a fundamental geometric property (the angle) and helps us understand how “aligned” two vectors are.  This formula can be derived directly from the Law of Cosines. Consider a triangle formed by vectors \\(\\vec{v}\\), \\(\\vec{w}\\), and their difference \\(\\vec{v}-\\vec{w}\\). The Law of Cosines states: \\[ ||\\vec{v}-\\vec{w}||^2 = ||\\vec{v}||^2 + ||\\vec{w}||^2 - 2||\\vec{v}||||\\vec{w}||\\cos(\\theta) \\] Expanding the left side using the dot product gives \\(||\\vec{v}-\\vec{w}||^2 = (\\vec{v}-\\vec{w})\\cdot(\\vec{v}-\\vec{w}) = ||\\vec{v}||^2 - 2(\\vec{v}\\cdot\\vec{w}) + ||\\vec{w}||^2\\). By equating the two expressions, we arrive at the geometric definition of the dot product.\nThe sign of the dot product tells us about the angle \\(\\theta\\):\n\nIf \\(\\vec{v} \\cdot \\vec{w} &gt; 0\\), then \\(\\cos(\\theta) &gt; 0\\), so the angle is acute (\\(0^\\circ \\le \\theta &lt; 90^\\circ\\)).\nIf \\(\\vec{v} \\cdot \\vec{w} &lt; 0\\), then \\(\\cos(\\theta) &lt; 0\\), so the angle is obtuse (\\(90^\\circ &lt; \\theta \\le 180^\\circ\\)).\nIf \\(\\vec{v} \\cdot \\vec{w} = 0\\), then \\(\\cos(\\theta) = 0\\), so the angle is right (\\(\\theta = 90^\\circ\\)).\n\n\n\n1.5 Orthogonality\nTwo non-zero vectors are orthogonal (perpendicular) if and only if their dot product is zero. This is one of the most important applications of the dot product. \\[ \\vec{v} \\perp \\vec{w} \\iff \\vec{v} \\cdot \\vec{w} = 0 \\]\n\n\n1.6 Vector Norm and Its Properties\nThe dot product defines the norm (or length) of a vector, which is called the induced norm. The norm of a vector \\(\\vec{v}\\) is the square root of the dot product of the vector with itself. \\[ ||\\vec{v}|| = \\sqrt{\\vec{v} \\cdot \\vec{v}} \\] From the algebraic definition, for \\(\\vec{v} = (v_1, v_2, v_3)\\), this is the familiar distance formula: \\(||\\vec{v}|| = \\sqrt{v_1^2 + v_2^2 + v_3^2}\\). This norm satisfies several key properties:\n\nNon-negativity: \\(||\\vec{v}|| \\ge 0\\).\nPoint-separating: \\(||\\vec{v}|| = 0 \\iff \\vec{v} = \\vec{0}\\).\nAbsolute homogeneity: \\(||c\\vec{v}|| = |c| \\cdot ||\\vec{v}||\\).\nTriangle Inequality: \\(||\\vec{u} + \\vec{v}|| \\le ||\\vec{u}|| + ||\\vec{v}||\\). This states that the length of the sum of two vectors is less than or equal to the sum of their individual lengths.\n\n\n\n1.7 Key Inequalities and Identities\nThe properties of the inner product lead to several fundamental results:\n\nCauchy-Schwarz Inequality: This inequality provides an upper bound on the magnitude of the dot product of two vectors: \\(|\\vec{v} \\cdot \\vec{w}| \\le ||\\vec{v}|| \\cdot ||\\vec{w}||\\). It is one of the most important inequalities in mathematics.\nParallelogram Law: This law relates the lengths of the sides of a parallelogram to the lengths of its diagonals: \\(||\\vec{a} + \\vec{b}||^2 + ||\\vec{a} - \\vec{b}||^2 = 2(||\\vec{a}||^2 + ||\\vec{b}||^2)\\).\n\n\n\n1.8 Projections\nProjections describe how much of one vector points in the direction of another, essentially casting a “shadow”.\n\n1.8.1 Scalar Projection\nThe scalar projection of vector \\(\\vec{v}\\) onto vector \\(\\vec{w}\\) is the signed length of the component of \\(\\vec{v}\\) that lies in the direction of \\(\\vec{w}\\). \\[ \\text{comp}_{\\vec{w}}(\\vec{v}) = \\frac{\\vec{v} \\cdot \\vec{w}}{||\\vec{w}||} \\] This value is a scalar. It is positive if the projection points in the same direction as \\(\\vec{w}\\) and negative if it points in the opposite direction.\n\n\n1.8.2 Vector Projection\nThe vector projection is the actual vector that represents the shadow. It has the magnitude of the scalar projection and the direction of \\(\\vec{w}\\).  \\[ \\text{proj}_{\\vec{w}}(\\vec{v}) = \\left( \\frac{\\vec{v} \\cdot \\vec{w}}{||\\vec{w}||^2} \\right) \\vec{w} = \\left( \\frac{\\vec{v} \\cdot \\vec{w}}{\\vec{w} \\cdot \\vec{w}} \\right) \\vec{w} \\] The term in parentheses is a scalar that scales the vector \\(\\vec{w}\\).\n\n\n\n1.9 Decomposing a Vector\nAny vector \\(\\vec{v}\\) can be uniquely decomposed into two orthogonal components relative to another non-zero vector \\(\\vec{w}\\): 1. A component parallel to \\(\\vec{w}\\): \\(\\vec{v}_{||} = \\text{proj}_{\\vec{w}}(\\vec{v})\\). 2. A component orthogonal to \\(\\vec{w}\\): \\(\\vec{v}_{\\perp} = \\vec{v} - \\vec{v}_{||}\\). The sum of these two components gives back the original vector: \\(\\vec{v} = \\vec{v}_{||} + \\vec{v}_{\\perp}\\).\n\n\n1.10 Direction Cosines\nFor a vector \\(\\vec{a} = (a_1, a_2, a_3)\\) in 3D space, the angles it forms with the positive x, y, and z axes are denoted \\(\\alpha\\), \\(\\beta\\), and \\(\\gamma\\), respectively. The cosines of these angles are called direction cosines and can be found using the dot product:\n\n\\(\\cos(\\alpha) = \\frac{\\vec{a} \\cdot \\vec{i}}{||\\vec{a}||} = \\frac{a_1}{||\\vec{a}||}\\)\n\\(\\cos(\\beta) = \\frac{\\vec{a} \\cdot \\vec{j}}{||\\vec{a}||} = \\frac{a_2}{||\\vec{a}||}\\)\n\\(\\cos(\\gamma) = \\frac{\\vec{a} \\cdot \\vec{k}}{||\\vec{a}||} = \\frac{a_3}{||\\vec{a}||}\\) These cosines are related by the identity: \\[ \\cos^2(\\alpha) + \\cos^2(\\beta) + \\cos^2(\\gamma) = 1 \\]\n\n\n\n\n2. Definitions\n\nInner Product: A function that takes two vectors and produces a scalar, satisfying the properties of symmetry, linearity, additivity, and positive definiteness.\nInner Product Space: A vector space that has an inner product defined on it.\nDot Product: The most common type of inner product, calculated as the sum of the products of corresponding vector components (\\(\\sum u_i v_i\\)).\nOrthogonal Vectors: Two vectors whose dot product is zero, indicating they are perpendicular to each other.\nNorm (Vector Length): The magnitude of a vector, calculated as the square root of the dot product of the vector with itself (\\(||\\vec{v}|| = \\sqrt{\\vec{v} \\cdot \\vec{v}}\\)).\nScalar Projection: The signed length of the projection of one vector onto another, resulting in a scalar value.\nVector Projection: The vector that represents the “shadow” of one vector onto another. It is parallel to the vector being projected upon.\nCauchy-Schwarz Inequality: A fundamental theorem stating that the absolute value of the dot product of two vectors is less than or equal to the product of their norms.\nTriangle Inequality: A property of norms stating that the norm of a sum of two vectors is no greater than the sum of their individual norms.\nParallelogram Law: An identity relating the sum of the squares of the lengths of a parallelogram’s sides to the sum of the squares of its diagonals.\n\n\n\n3. Formulas\n\nAlgebraic Dot Product: \\(\\vec{u} \\cdot \\vec{v} = \\sum_{i=1}^{n} u_i v_i\\)\nGeometric Dot Product: \\(\\vec{v} \\cdot \\vec{w} = ||\\vec{v}|| \\cdot ||\\vec{w}|| \\cos(\\theta)\\)\nAngle Between Vectors: \\(\\theta = \\arccos\\left(\\frac{\\vec{v} \\cdot \\vec{w}}{||\\vec{v}|| \\cdot ||\\vec{w}||}\\right)\\)\nVector Norm: \\(||\\vec{v}|| = \\sqrt{\\vec{v} \\cdot \\vec{v}}\\)\nScalar Projection: \\(\\text{comp}_{\\vec{w}}(\\vec{v}) = \\frac{\\vec{v} \\cdot \\vec{w}}{||\\vec{w}||}\\)\nVector Projection: \\(\\text{proj}_{\\vec{w}}(\\vec{v}) = \\left(\\frac{\\vec{v} \\cdot \\vec{w}}{\\vec{w} \\cdot \\vec{w}}\\right) \\vec{w}\\)\nCauchy-Schwarz Inequality: \\(|\\vec{v} \\cdot \\vec{w}| \\le ||\\vec{v}|| \\cdot ||\\vec{w}||\\)\nTriangle Inequality: \\(||\\vec{u} + \\vec{v}|| \\le ||\\vec{u}|| + ||\\vec{v}||\\)\nParallelogram Law: \\(||\\vec{a} + \\vec{b}||^2 + ||\\vec{a} - \\vec{b}||^2 = 2(||\\vec{a}||^2 + ||\\vec{b}||^2)\\)\nDirection Cosines Identity: \\(\\cos^2(\\alpha) + \\cos^2(\\beta) + \\cos^2(\\gamma) = 1\\)\n\n\n\n4. Mistakes\n\nDot product gives a vector: The result of a dot product is always a scalar (a single number), not another vector. Why it’s wrong: The operation is defined as a sum of products of components, which always resolves to a single numerical value.\nAssuming \\(\\vec{a} \\cdot \\vec{b} = \\vec{a} \\cdot \\vec{c}\\) implies \\(\\vec{b} = \\vec{c}\\): This is not true. Why it’s wrong: This is known as the cancellation law, and it does not hold for dot products. The dot product involves the angle between vectors. If \\(\\vec{a}\\) is perpendicular to the vector \\((\\vec{b}-\\vec{c})\\), then \\(\\vec{a}\\cdot(\\vec{b}-\\vec{c})=0\\), which means \\(\\vec{a}\\cdot\\vec{b} = \\vec{a}\\cdot\\vec{c}\\) even if \\(\\vec{b} \\ne \\vec{c}\\).\nConfusing vector projection with scalar projection: One is a vector, the other is a scalar (a length). Why it’s wrong: The formulas are distinct. The vector projection formula results in a vector by scaling the direction vector, while the scalar projection formula only calculates the signed length.\nUsing \\(||\\vec{w}||\\) in the denominator for vector projection: The denominator in the vector projection formula is \\(||\\vec{w}||^2\\) (or \\(\\vec{w} \\cdot \\vec{w}\\)). Why it’s wrong: The term \\(\\frac{\\vec{v} \\cdot \\vec{w}}{||\\vec{w}||^2}\\) is the scalar needed to correctly scale the direction vector \\(\\vec{w}\\) to get the projected vector. Using just \\(||\\vec{w}||\\) produces a vector with the wrong magnitude.\nForgetting the square root when calculating the norm: The norm is \\(||\\vec{v}|| = \\sqrt{\\vec{v} \\cdot \\vec{v}}\\), not just \\(\\vec{v} \\cdot \\vec{v}\\). Why it’s wrong: \\(\\vec{v} \\cdot \\vec{v}\\) gives the squared length. To find the actual length, you must take the square root, consistent with the Pythagorean theorem.\nAssuming \\(||\\vec{u}+\\vec{v}|| = ||\\vec{u}||+||\\vec{v}||\\) always: This is only true if the vectors \\(\\vec{u}\\) and \\(\\vec{v}\\) point in the same direction (i.e., one is a non-negative scalar multiple of the other). Why it’s wrong: This is a misunderstanding of the Triangle Inequality, which states \\(||\\vec{u} + \\vec{v}|| \\le ||\\vec{u}|| + ||\\vec{v}||\\). The equality case is rare.\n\n\n\n5. Examples\n\n5.1. Using Dot Product Properties\nQuestion: Given that vectors \\(\\vec{a}\\), \\(\\vec{b}\\), and \\(\\vec{c}\\) all have a length of 3 and that their sum is the zero vector (\\(\\vec{a} + \\vec{b} + \\vec{c} = \\vec{0}\\)), find the value of \\(\\vec{a} \\cdot \\vec{b} + \\vec{b} \\cdot \\vec{c} + \\vec{c} \\cdot \\vec{a}\\).\n\n\nClick to see the solution\n\n\nStart with the given vector sum: \\[ \\vec{a} + \\vec{b} + \\vec{c} = \\vec{0} \\]\nTake the dot product of the equation with itself: Since the vector is the zero vector, its dot product with itself is 0. \\[ (\\vec{a} + \\vec{b} + \\vec{c}) \\cdot (\\vec{a} + \\vec{b} + \\vec{c}) = 0 \\]\nExpand the dot product using its distributive property: \\[ \\vec{a}\\cdot\\vec{a} + \\vec{a}\\cdot\\vec{b} + \\vec{a}\\cdot\\vec{c} + \\vec{b}\\cdot\\vec{a} + \\vec{b}\\cdot\\vec{b} + \\vec{b}\\cdot\\vec{c} + \\vec{c}\\cdot\\vec{a} + \\vec{c}\\cdot\\vec{b} + \\vec{c}\\cdot\\vec{c} = 0 \\]\nSimplify using norm notation and the symmetry of the dot product: Recall that \\(\\vec{v}\\cdot\\vec{v} = ||\\vec{v}||^2\\) and \\(\\vec{u}\\cdot\\vec{v} = \\vec{v}\\cdot\\vec{u}\\). \\[ ||\\vec{a}||^2 + ||\\vec{b}||^2 + ||\\vec{c}||^2 + 2(\\vec{a} \\cdot \\vec{b} + \\vec{b} \\cdot \\vec{c} + \\vec{c} \\cdot \\vec{a}) = 0 \\]\nSubstitute the given magnitudes: We know \\(||\\vec{a}|| = ||\\vec{b}|| = ||\\vec{c}|| = 3\\). \\[ 3^2 + 3^2 + 3^2 + 2(\\vec{a} \\cdot \\vec{b} + \\vec{b} \\cdot \\vec{c} + \\vec{c} \\cdot \\vec{a}) = 0 \\] \\[ 9 + 9 + 9 + 2(\\vec{a} \\cdot \\vec{b} + \\vec{b} \\cdot \\vec{c} + \\vec{c} \\cdot \\vec{a}) = 0 \\] \\[ 27 + 2(\\vec{a} \\cdot \\vec{b} + \\vec{b} \\cdot \\vec{c} + \\vec{c} \\cdot \\vec{a}) = 0 \\]\nSolve for the desired expression: \\[ 2(\\vec{a} \\cdot \\vec{b} + \\vec{b} \\cdot \\vec{c} + \\vec{c} \\cdot \\vec{a}) = -27 \\] \\[ \\vec{a} \\cdot \\vec{b} + \\vec{b} \\cdot \\vec{c} + \\vec{c} \\cdot \\vec{a} = -\\frac{27}{2} \\]\n\nAnswer: The value is -13.5.\n\n\n\n5.2. Find the Angle Between Two Vectors\nQuestion: Find the angle \\(\\theta\\) between vectors \\(\\vec{a} = \\begin{pmatrix} 1 \\\\ -1 \\\\ 1 \\end{pmatrix}\\) and \\(\\vec{b} = \\begin{pmatrix} -5 \\\\ -1 \\\\ -1 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nCalculate the dot product \\(\\vec{a} \\cdot \\vec{b}\\): \\[ \\vec{a} \\cdot \\vec{b} = (1)(-5) + (-1)(-1) + (1)(-1) = -5 + 1 - 1 = -5 \\]\nCalculate the magnitude of \\(\\vec{a}\\): \\[ ||\\vec{a}|| = \\sqrt{1^2 + (-1)^2 + 1^2} = \\sqrt{1 + 1 + 1} = \\sqrt{3} \\]\nCalculate the magnitude of \\(\\vec{b}\\): \\[ ||\\vec{b}|| = \\sqrt{(-5)^2 + (-1)^2 + (-1)^2} = \\sqrt{25 + 1 + 1} = \\sqrt{27} = 3\\sqrt{3} \\]\nUse the angle formula: \\[ \\cos(\\theta) = \\frac{\\vec{a} \\cdot \\vec{b}}{||\\vec{a}|| \\cdot ||\\vec{b}||} = \\frac{-5}{\\sqrt{3} \\cdot 3\\sqrt{3}} = \\frac{-5}{3 \\cdot 3} = -\\frac{5}{9} \\]\nSolve for \\(\\theta\\): \\[ \\theta = \\arccos\\left(-\\frac{5}{9}\\right) \\approx 123.75^\\circ \\]\n\nAnswer: The angle is approximately \\(123.75^\\circ\\).\n\n\n\n5.3. Proving Orthogonality\nQuestion: Prove that for any three vectors \\(\\vec{a}\\), \\(\\vec{b}\\), and \\(\\vec{c}\\), the vector \\(\\vec{v} = \\vec{b}(\\vec{a}\\cdot\\vec{c}) - \\vec{c}(\\vec{a}\\cdot\\vec{b})\\) is perpendicular to vector \\(\\vec{a}\\).\n\n\nClick to see the solution\n\n\nRecall the condition for orthogonality: Two vectors are perpendicular if their dot product is zero. We need to show that \\(\\vec{a} \\cdot \\vec{v} = 0\\).\nSet up the dot product: \\[ \\vec{a} \\cdot \\vec{v} = \\vec{a} \\cdot [\\vec{b}(\\vec{a}\\cdot\\vec{c}) - \\vec{c}(\\vec{a}\\cdot\\vec{b})] \\]\nApply the distributive property of the dot product: \\[ \\vec{a} \\cdot \\vec{v} = \\vec{a} \\cdot (\\vec{b}(\\vec{a}\\cdot\\vec{c})) - \\vec{a} \\cdot (\\vec{c}(\\vec{a}\\cdot\\vec{b})) \\]\nFactor out the scalar terms: Remember that \\((\\vec{a}\\cdot\\vec{c})\\) and \\((\\vec{a}\\cdot\\vec{b})\\) are scalars. We can rearrange the scalar multiples. \\[ \\vec{a} \\cdot \\vec{v} = (\\vec{a} \\cdot \\vec{b})(\\vec{a}\\cdot\\vec{c}) - (\\vec{a} \\cdot \\vec{c})(\\vec{a}\\cdot\\vec{b}) \\]\nSimplify the expression: The two terms are identical, so their difference is zero. \\[ \\vec{a} \\cdot \\vec{v} = 0 \\]\nConclusion: Since the dot product is zero, the vectors \\(\\vec{a}\\) and \\(\\vec{v}\\) are perpendicular.\n\nAnswer: The dot product simplifies to 0, which proves the vectors are perpendicular.\n\n\n\n5.4. Find an Unknown Component for Orthogonality\nQuestion: Find the value(s) of \\(x\\) such that the vectors \\(\\vec{u} = (x, -1, 3)\\) and \\(\\vec{v} = (x, 5, 1)\\) are orthogonal.\n\n\nClick to see the solution\n\n\nSet the dot product to zero: For the vectors to be orthogonal, their dot product must be zero. \\[ \\vec{u} \\cdot \\vec{v} = (x)(x) + (-1)(5) + (3)(1) = 0 \\]\nSimplify the equation: \\[ x^2 - 5 + 3 = 0 \\] \\[ x^2 - 2 = 0 \\]\nSolve for \\(x\\): \\[ x^2 = 2 \\] \\[ x = \\pm\\sqrt{2} \\]\n\nAnswer: The values for \\(x\\) are \\(\\sqrt{2}\\) and \\(-\\sqrt{2}\\).\n\n\n\n5.5. Calculate Vector and Scalar Projection\nQuestion: Find the vector and scalar projection of \\(\\vec{a} = (1, -2, 4)\\) onto \\(\\vec{b} = (2, 1, -2)\\).\n\n\nClick to see the solution\n\n\\begin{tikzpicture}\n    % 3D axes\n    \\draw[-&gt;] (0,0,0) -- (5,0,0) node[anchor=north east]{$x$};\n    \\draw[-&gt;] (0,0,0) -- (0,5,0) node[anchor=north west]{$y$};\n    \\draw[-&gt;] (0,0,0) -- (0,0,5) node[anchor=south]{$z$};\n\n    % Vectors\n    \\draw[-&gt;, thick, blue] (0,0,0) -- (1,-2,4) node[anchor=west] {$\\vec{a}$};\n    \\draw[-&gt;, thick, red] (0,0,0) -- (2,1,-2) node[anchor=north] {$\\vec{b}$};\n\\end{tikzpicture}\n\nCalculate the dot product \\(\\vec{a} \\cdot \\vec{b}\\): \\[ \\vec{a} \\cdot \\vec{b} = (1)(2) + (-2)(1) + (4)(-2) = 2 - 2 - 8 = -8 \\]\nCalculate the magnitude of \\(\\vec{b}\\) for the scalar projection: \\[ ||\\vec{b}|| = \\sqrt{2^2 + 1^2 + (-2)^2} = \\sqrt{4 + 1 + 4} = \\sqrt{9} = 3 \\]\nApply the scalar projection formula: \\[ \\text{comp}_{\\vec{b}}(\\vec{a}) = \\frac{\\vec{a} \\cdot \\vec{b}}{||\\vec{b}||} = \\frac{-8}{3} \\]\nCalculate the squared magnitude of \\(\\vec{b}\\) for the vector projection: \\[ ||\\vec{b}||^2 = 3^2 = 9 \\quad (\\text{or } \\vec{b} \\cdot \\vec{b} = 9) \\]\nApply the vector projection formula: \\[ \\text{proj}_{\\vec{b}}(\\vec{a}) = \\left(\\frac{\\vec{a} \\cdot \\vec{b}}{||\\vec{b}||^2}\\right) \\vec{b} = \\left(\\frac{-8}{9}\\right) (2, 1, -2) \\]\nDistribute the scalar: \\[ \\text{proj}_{\\vec{b}}(\\vec{a}) = \\left(-\\frac{16}{9}, -\\frac{8}{9}, \\frac{16}{9}\\right) \\]\n\nAnswer: The scalar projection is \\(-\\frac{8}{3}\\) and the vector projection is \\(\\left(-\\frac{16}{9}, -\\frac{8}{9}, \\frac{16}{9}\\right)\\).\n\n\n\n5.6. Decompose a Vector\nQuestion: Decompose the vector \\(\\vec{a} = (5, 1, -3)\\) into two vectors, one parallel (\\(\\vec{a}_{||}\\)) and one orthogonal (\\(\\vec{a}_{\\perp}\\)) to \\(\\vec{b} = (1, 2, 2)\\).\n\n\nClick to see the solution\n\n\nFind the parallel component by calculating the vector projection of \\(\\vec{a}\\) onto \\(\\vec{b}\\): \\[ \\vec{a} \\cdot \\vec{b} = (5)(1) + (1)(2) + (-3)(2) = 5 + 2 - 6 = 1 \\] \\[ \\vec{b} \\cdot \\vec{b} = 1^2 + 2^2 + 2^2 = 1 + 4 + 4 = 9 \\] \\[ \\vec{a}_{||} = \\text{proj}_{\\vec{b}}(\\vec{a}) = \\left(\\frac{1}{9}\\right) (1, 2, 2) = \\left(\\frac{1}{9}, \\frac{2}{9}, \\frac{2}{9}\\right) \\]\nFind the orthogonal component by subtracting the parallel component from the original vector: \\[ \\vec{a}_{\\perp} = \\vec{a} - \\vec{a}_{||} = (5, 1, -3) - \\left(\\frac{1}{9}, \\frac{2}{9}, \\frac{2}{9}\\right) \\]\nPerform the vector subtraction: \\[ \\vec{a}_{\\perp} = \\left(5 - \\frac{1}{9}, 1 - \\frac{2}{9}, -3 - \\frac{2}{9}\\right) = \\left(\\frac{45-1}{9}, \\frac{9-2}{9}, \\frac{-27-2}{9}\\right) = \\left(\\frac{44}{9}, \\frac{7}{9}, -\\frac{29}{9}\\right) \\]\n(Optional) Verify orthogonality: Check that \\(\\vec{a}_{\\perp} \\cdot \\vec{b} = 0\\). \\[ \\left(\\frac{44}{9}, \\frac{7}{9}, -\\frac{29}{9}\\right) \\cdot (1, 2, 2) = \\frac{44}{9} + \\frac{14}{9} - \\frac{58}{9} = \\frac{58-58}{9} = 0 \\]\n\nAnswer: The parallel component is \\(\\vec{a}_{||} = (\\frac{1}{9}, \\frac{2}{9}, \\frac{2}{9})\\) and the orthogonal component is \\(\\vec{a}_{\\perp} = (\\frac{44}{9}, \\frac{7}{9}, -\\frac{29}{9})\\).\n\n\n\n5.7. Finding a Vector from Multiple Conditions\nQuestion: Find the coordinates of a vector \\(\\vec{c}\\) that has a length of 1, is perpendicular to \\(\\vec{a} = (1, -1, 1)\\), and forms an angle of \\(\\arccos(\\sqrt{2/27})\\) with vector \\(\\vec{b} = (5, 1, 1)\\). How many solutions are there?\n\n\nClick to see the solution\n\nLet \\(\\vec{c} = (x, y, z)\\). We can translate the given information into a system of equations: 1. Length is 1: \\(||\\vec{c}||^2 = x^2 + y^2 + z^2 = 1\\) 2. Perpendicular to \\(\\vec{a}\\): \\(\\vec{a} \\cdot \\vec{c} = (1)x + (-1)y + (1)z = x - y + z = 0 \\implies y = x + z\\) 3. Angle with \\(\\vec{b}\\): \\(\\cos(\\theta) = \\frac{\\vec{b} \\cdot \\vec{c}}{||\\vec{b}||||\\vec{c}||} = \\sqrt{\\frac{2}{27}}\\). \\(||\\vec{b}|| = \\sqrt{5^2+1^2+1^2} = \\sqrt{27}\\). Since \\(||\\vec{c}||=1\\), this simplifies to \\(\\frac{\\vec{b}\\cdot\\vec{c}}{\\sqrt{27}} = \\sqrt{\\frac{2}{27}}\\). This gives \\(\\vec{b}\\cdot\\vec{c} = \\sqrt{2}\\), so \\(5x + y + z = \\sqrt{2}\\).\nNow we solve the system: 1. Substitute (2) into (3): \\(5x + (x+z) + z = \\sqrt{2} \\implies 6x + 2z = \\sqrt{2} \\implies 3x + z = \\frac{\\sqrt{2}}{2} \\implies z = \\frac{\\sqrt{2}}{2} - 3x\\). 2. Express y in terms of x: Substitute the new expression for z into (2): \\(y = x + (\\frac{\\sqrt{2}}{2} - 3x) = \\frac{\\sqrt{2}}{2} - 2x\\). 3. Substitute x, y, z into the length equation (1): \\(x^2 + (\\frac{\\sqrt{2}}{2} - 2x)^2 + (\\frac{\\sqrt{2}}{2} - 3x)^2 = 1\\). 4. Expand and solve the quadratic for x: \\(x^2 + (\\frac{2}{4} - 2\\sqrt{2}x + 4x^2) + (\\frac{2}{4} - 3\\sqrt{2}x + 9x^2) = 1\\). \\(x^2 + \\frac{1}{2} - 2\\sqrt{2}x + 4x^2 + \\frac{1}{2} - 3\\sqrt{2}x + 9x^2 = 1\\). \\(14x^2 - 5\\sqrt{2}x + 1 = 1 \\implies 14x^2 - 5\\sqrt{2}x = 0\\). \\(x(14x - 5\\sqrt{2}) = 0\\). This gives two solutions for \\(x\\): \\(x_1=0\\) and \\(x_2 = \\frac{5\\sqrt{2}}{14}\\). 5. Find y and z for each x: * Solution 1: If \\(x_1 = 0\\): \\(z_1 = \\frac{\\sqrt{2}}{2} - 3(0) = \\frac{\\sqrt{2}}{2}\\). \\(y_1 = \\frac{\\sqrt{2}}{2} - 2(0) = \\frac{\\sqrt{2}}{2}\\). \\(\\vec{c}_1 = (0, \\frac{\\sqrt{2}}{2}, \\frac{\\sqrt{2}}{2})\\). * Solution 2: If \\(x_2 = \\frac{5\\sqrt{2}}{14}\\): \\(z_2 = \\frac{\\sqrt{2}}{2} - 3(\\frac{5\\sqrt{2}}{14}) = \\frac{7\\sqrt{2}}{14} - \\frac{15\\sqrt{2}}{14} = -\\frac{8\\sqrt{2}}{14} = -\\frac{4\\sqrt{2}}{7}\\). \\(y_2 = \\frac{\\sqrt{2}}{2} - 2(\\frac{5\\sqrt{2}}{14}) = \\frac{7\\sqrt{2}}{14} - \\frac{10\\sqrt{2}}{14} = -\\frac{3\\sqrt{2}}{14}\\). \\(\\vec{c}_2 = (\\frac{5\\sqrt{2}}{14}, -\\frac{3\\sqrt{2}}{14}, -\\frac{4\\sqrt{2}}{7})\\).\nAnswer: There are two solutions. \\(\\vec{c}_1 = (0, \\frac{\\sqrt{2}}{2}, \\frac{\\sqrt{2}}{2})\\) and \\(\\vec{c}_2 = (\\frac{5\\sqrt{2}}{14}, -\\frac{3\\sqrt{2}}{14}, -\\frac{4\\sqrt{2}}{7})\\).",
    "crumbs": [
      "Analytical Geometry and Linear Algebra I",
      "2. Inner Product, Dot Product, Orthogonality, and Projections"
    ]
  },
  {
    "objectID": "Essence of calculus/vid_9.html",
    "href": "Essence of calculus/vid_9.html",
    "title": "9. Average Value of a Function, Integration Applications",
    "section": "",
    "text": "1. Summary\n\n1.1 The Problem of Continuous Averages\n\n1.1.1 Finite vs. Continuous Averages\nTypically, to find the average of a set of numbers, you sum them up and divide by the count of numbers. For example, the average of \\(\\{1, 4, 2, 5\\}\\) is \\((1+4+2+5)/4 = 3\\).\nHowever, this method fails for a continuous variable described by a function, like \\(f(x) = \\sin(x)\\) over the interval \\([0, \\pi]\\). In this interval, there are infinitely many values of \\(\\sin(x)\\). You cannot simply sum up an infinite number of values and divide by infinity; the concept is not well-defined.\n\n\n1.1.2 Approximating the Average\nTo solve this, we can start by approximating. Instead of using all infinitely many values, we can take a finite, representative sample.\n\nSample Points: Choose a large number of evenly spaced points within the interval \\([0, \\pi]\\).\nCalculate Heights: Find the value (height) of the function, \\(\\sin(x)\\), at each of these sample points.\nCompute Finite Average: Add up these heights and divide by the number of points sampled.\n\nAs we increase the number of sample points, making them closer together, this approximation should get closer to the true average value of the continuous function.\n\n\n\n\n1.2 Connecting Averages to Integrals\n\n1.2.1 From Finite Sum to Riemann Sum\nThe process of approximating an average leads directly to the concept of an integral. Let’s analyze the formula for our finite approximation: \\[ \\text{Average} \\approx \\frac{\\sum \\sin(x_i)}{\\text{Number of samples}} \\] The number of samples can be expressed using the length of the interval and the distance between samples, which we’ll call \\(dx\\). \\[ \\text{Number of samples} \\approx \\frac{\\text{Length of Interval}}{dx} = \\frac{\\pi - 0}{dx} = \\frac{\\pi}{dx} \\] Substituting this back into our average approximation: \\[ \\text{Average} \\approx \\frac{\\sum \\sin(x_i)}{\\pi / dx} = \\frac{1}{\\pi} \\sum \\sin(x_i)dx \\] This expression, \\(\\sum \\sin(x_i)dx\\), is a Riemann sum. It represents the sum of the areas of many thin rectangles under the curve of \\(\\sin(x)\\).\n\n\n1.2.2 The Limit and the Definite Integral\nTo get the exact average value, we let the number of samples approach infinity, which means the width of our rectangles, \\(dx\\), approaches zero. In the language of calculus, we take the limit as \\(dx \\to 0\\). This transforms the Riemann sum into a definite integral.\nThe average height of \\(\\sin(x)\\) from \\(0\\) to \\(\\pi\\) is: \\[ \\text{Average Value} = \\frac{1}{\\pi} \\int_{0}^{\\pi} \\sin(x) \\,dx \\] This gives us a general formula for the average value of any function.\n\n\n\n1.3 The Average Value Formula\n\n1.3.1 General Formula\nThe average value of a continuous function \\(f(x)\\) on a closed interval \\([a, b]\\) is given by: \\[ \\text{Average Value} = \\frac{1}{b-a} \\int_{a}^{b} f(x) \\,dx \\] This formula can be interpreted geometrically. The integral \\(\\int_{a}^{b} f(x) \\,dx\\) represents the signed area under the curve of \\(f(x)\\) from \\(a\\) to \\(b\\). The term \\(b-a\\) is the width of the interval.\nTherefore, the formula is conceptually: \\[ \\text{Average Height} = \\frac{\\text{Area}}{\\text{Width}} \\] This means the average value is the height of a rectangle that has the same width (\\(b-a\\)) and the same area as the region under the curve of \\(f(x)\\).\n\n\n\n1.3.2 Example Calculation: \\(\\sin(x)\\)\nTo find the average value of \\(\\sin(x)\\) on \\([0, \\pi]\\): 1. Find the Antiderivative: The antiderivative of \\(\\sin(x)\\) is \\(-\\cos(x)\\). 2. Evaluate the Integral: Using the Fundamental Theorem of Calculus: \\[ \\int_{0}^{\\pi} \\sin(x) \\,dx = [-\\cos(x)]_{0}^{\\pi} = (-\\cos(\\pi)) - (-\\cos(0)) = (-(-1)) - (-1) = 1 + 1 = 2 \\] 3. Apply the Average Value Formula: \\[ \\text{Average Value} = \\frac{1}{\\pi - 0} \\int_{0}^{\\pi} \\sin(x) \\,dx = \\frac{1}{\\pi}(2) = \\frac{2}{\\pi} \\] The average height of the \\(\\sin(x)\\) curve between \\(0\\) and \\(\\pi\\) is \\(\\frac{2}{\\pi} \\approx 0.637\\).\n\n\n\n1.4 An Alternate Perspective: The Fundamental Theorem\nThe average value formula provides another way to understand the Fundamental Theorem of Calculus. \\[ \\text{Average Value} = \\frac{1}{b-a} \\int_{a}^{b} f(x) \\,dx = \\frac{F(b) - F(a)}{b-a} \\] Where \\(F(x)\\) is the antiderivative of \\(f(x)\\).\nThe expression \\(\\frac{F(b) - F(a)}{b-a}\\) is the definition of the average rate of change (or average slope) of the function \\(F(x)\\) over the interval \\([a, b]\\).\nSince \\(f(x)\\) is the derivative (the instantaneous rate of change) of \\(F(x)\\), this reveals a profound connection: * The average value of a function \\(f(x)\\) over an interval is equal to the average slope of its antiderivative \\(F(x)\\) over that same interval.\n\n\n\n2. Definitions\n\nContinuous Variable: A variable that can take on any value within a given interval, as opposed to a discrete variable which can only take on specific, separate values.\nAverage Value of a Function: A concept that extends the arithmetic mean to continuous functions. It represents the height of a rectangle with the same base and area as the region under the function’s curve over that interval.\nAntiderivative: A function \\(F(x)\\) is an antiderivative of a function \\(f(x)\\) if \\(F'(x) = f(x)\\). It is the reverse process of differentiation.\nRiemann Sum: An approximation of the area under a curve, calculated by summing the areas of a finite number of simple shapes, typically rectangles.\n\n\n\n3. Formulas\n\nAverage of a Finite Set: \\(\\text{Average} = \\frac{x_1 + x_2 + \\dots + x_n}{n}\\)\nAverage Value of a Continuous Function: \\(\\text{Average} = \\frac{1}{b-a} \\int_{a}^{b} f(x) \\,dx\\)\nGeometric Interpretation: \\(\\text{Average Height} = \\frac{\\text{Area Under Curve}}{\\text{Width of Interval}}\\)\nAntiderivative Form (Mean Value Theorem for Integrals): \\(\\text{Average} = \\frac{F(b) - F(a)}{b-a}\\), where \\(F'(x) = f(x)\\).\n\n\n\n4. Mistakes\n\nForgetting to divide by the interval length: Calculating only \\(\\int_{a}^{b} f(x) \\,dx\\) gives the total signed area under the curve, not the average value. You must divide this area by the width of the interval, \\(b-a\\).\nAssuming the average value is simply the midpoint of the function’s values at the endpoints: Calculating \\(\\frac{f(a) + f(b)}{2}\\) is incorrect for most functions. This method only works for straight lines.\nUsing an incorrect interval width: The denominator must be the total length of the interval, calculated as \\(b-a\\). A common mistake is using just \\(b\\) or forgetting to subtract.\nErrors in finding the antiderivative: The entire calculation depends on correctly identifying the antiderivative of \\(f(x)\\) to evaluate the definite integral.\n\n\n\n5. Examples\n\n5.1. Average Value of a Parabola\nQuestion: Find the average value of the function \\(f(x) = x^2\\) on the interval \\([0, 3]\\).\n\n\nClick to see the solution\n\n\nSet up the formula: The interval is \\([0, 3]\\), so \\(a=0\\) and \\(b=3\\). The width is \\(b-a=3\\). \\[ \\text{Average} = \\frac{1}{3-0} \\int_{0}^{3} x^2 \\,dx \\]\nFind the antiderivative: The antiderivative of \\(x^2\\) is \\(\\frac{x^3}{3}\\).\nEvaluate the definite integral: \\[ \\int_{0}^{3} x^2 \\,dx = \\left[ \\frac{x^3}{3} \\right]_{0}^{3} = \\frac{3^3}{3} - \\frac{0^3}{3} = \\frac{27}{3} - 0 = 9 \\]\nCalculate the average value: \\[ \\text{Average} = \\frac{1}{3} \\times 9 = 3 \\]\n\nAnswer: The average value of \\(f(x) = x^2\\) on \\([0, 3]\\) is 3.\n\n\n\n5.2. Average Temperature\nQuestion: The temperature in degrees Celsius over a 12-hour period starting at noon is modeled by the function \\(T(t) = 20 + 5\\sin(\\frac{\\pi t}{12})\\), where \\(t\\) is the number of hours past noon. What is the average temperature between noon (\\(t=0\\)) and midnight (\\(t=12\\))?\n\n\nClick to see the solution\n\n\nSet up the formula: The interval is \\([0, 12]\\), so \\(a=0\\), \\(b=12\\), and the width is \\(b-a=12\\). \\[ \\text{Average Temp} = \\frac{1}{12-0} \\int_{0}^{12} \\left(20 + 5\\sin\\left(\\frac{\\pi t}{12}\\right)\\right) \\,dt \\]\nFind the antiderivative:\n\nThe antiderivative of \\(20\\) is \\(20t\\).\nThe antiderivative of \\(5\\sin(\\frac{\\pi t}{12})\\) is \\(5 \\left(-\\frac{12}{\\pi}\\cos\\left(\\frac{\\pi t}{12}\\right)\\right) = -\\frac{60}{\\pi}\\cos\\left(\\frac{\\pi t}{12}\\right)\\).\nThe full antiderivative is \\(20t - \\frac{60}{\\pi}\\cos\\left(\\frac{\\pi t}{12}\\right)\\).\n\nEvaluate the definite integral: \\[ \\int_{0}^{12} T(t) \\,dt = \\left[ 20t - \\frac{60}{\\pi}\\cos\\left(\\frac{\\pi t}{12}\\right) \\right]_{0}^{12} \\] \\[ = \\left(20(12) - \\frac{60}{\\pi}\\cos(\\pi)\\right) - \\left(20(0) - \\frac{60}{\\pi}\\cos(0)\\right) \\] \\[ = \\left(240 - \\frac{60}{\\pi}(-1)\\right) - \\left(0 - \\frac{60}{\\pi}(1)\\right) = 240 + \\frac{60}{\\pi} + \\frac{60}{\\pi} = 240 + \\frac{120}{\\pi} \\]\nCalculate the average value: \\[ \\text{Average Temp} = \\frac{1}{12} \\left(240 + \\frac{120}{\\pi}\\right) = 20 + \\frac{10}{\\pi} \\approx 23.18 \\]\n\nAnswer: The average temperature is \\(20 + \\frac{10}{\\pi} \\approx 23.18^\\circ\\)C.\n\n\n\n5.3. Average Value of a Linear Function\nQuestion: Find the average value of \\(f(x) = 2x + 1\\) on the interval \\([1, 5]\\).\n\n\nClick to see the solution\n\n\nSet up the formula: The interval is \\([1, 5]\\), so \\(a=1\\), \\(b=5\\), and the width is \\(b-a=4\\). \\[ \\text{Average} = \\frac{1}{4} \\int_{1}^{5} (2x + 1) \\,dx \\]\nFind the antiderivative: The antiderivative of \\(2x + 1\\) is \\(x^2 + x\\).\nEvaluate the definite integral: \\[ \\int_{1}^{5} (2x + 1) \\,dx = [x^2 + x]_{1}^{5} = (5^2 + 5) - (1^2 + 1) = (25+5) - (1+1) = 30 - 2 = 28 \\]\nCalculate the average value: \\[ \\text{Average} = \\frac{1}{4} \\times 28 = 7 \\] Note: For a linear function, the average value is simply the value at the midpoint of the interval. The midpoint is \\((1+5)/2=3\\), and \\(f(3) = 2(3)+1 = 7\\).\n\nAnswer: The average value is 7.\n\n\n\n5.4. Average Value with a Negative Area\nQuestion: Find the average value of \\(f(x) = x^3 - 3x\\) on the interval \\([-2, 2]\\).\n\n\nClick to see the solution\n\n\nSet up the formula: The interval is \\([-2, 2]\\), so \\(a=-2\\), \\(b=2\\), and the width is \\(b-a=4\\). \\[ \\text{Average} = \\frac{1}{4} \\int_{-2}^{2} (x^3 - 3x) \\,dx \\]\nFind the antiderivative: The antiderivative of \\(x^3 - 3x\\) is \\(\\frac{x^4}{4} - \\frac{3x^2}{2}\\).\nEvaluate the definite integral: \\[ \\int_{-2}^{2} (x^3 - 3x) \\,dx = \\left[\\frac{x^4}{4} - \\frac{3x^2}{2}\\right]_{-2}^{2} \\] \\[ = \\left(\\frac{2^4}{4} - \\frac{3(2)^2}{2}\\right) - \\left(\\frac{(-2)^4}{4} - \\frac{3(-2)^2}{2}\\right) \\] \\[ = \\left(\\frac{16}{4} - \\frac{12}{2}\\right) - \\left(\\frac{16}{4} - \\frac{12}{2}\\right) = (4-6) - (4-6) = -2 - (-2) = 0 \\] Note: This is an odd function integrated over a symmetric interval, so the result is 0.\nCalculate the average value: \\[ \\text{Average} = \\frac{1}{4} \\times 0 = 0 \\]\n\nAnswer: The average value is 0.\n\n\n\n5.5. Average Value of a Constant Function\nQuestion: Find the average value of \\(f(x) = 5\\) on the interval \\([2, 10]\\).\n\n\nClick to see the solution\n\n\nSet up the formula: The interval is \\([2, 10]\\), so \\(a=2\\), \\(b=10\\), and the width is \\(b-a=8\\). \\[ \\text{Average} = \\frac{1}{8} \\int_{2}^{10} 5 \\,dx \\]\nFind the antiderivative: The antiderivative of \\(5\\) is \\(5x\\).\nEvaluate the definite integral: \\[ \\int_{2}^{10} 5 \\,dx = [5x]_{2}^{10} = 5(10) - 5(2) = 50 - 10 = 40 \\]\nCalculate the average value: \\[ \\text{Average} = \\frac{1}{8} \\times 40 = 5 \\] Note: This makes intuitive sense. The average value of a constant function is the constant itself.\n\nAnswer: The average value is 5.\n\n\n\n5.6. Average Value of \\(e^x\\)\nQuestion: Find the average value of \\(f(x) = e^x\\) on the interval \\([0, 2]\\).\n\n\nClick to see the solution\n\n\nSet up the formula: The interval is \\([0, 2]\\), so \\(a=0\\), \\(b=2\\), and the width is \\(b-a=2\\). \\[ \\text{Average} = \\frac{1}{2} \\int_{0}^{2} e^x \\,dx \\]\nFind the antiderivative: The antiderivative of \\(e^x\\) is \\(e^x\\).\nEvaluate the definite integral: \\[ \\int_{0}^{2} e^x \\,dx = [e^x]_{0}^{2} = e^2 - e^0 = e^2 - 1 \\]\nCalculate the average value: \\[ \\text{Average} = \\frac{1}{2} (e^2 - 1) \\]\n\nAnswer: The average value is \\(\\frac{e^2 - 1}{2}\\).\n\n\n\n5.7. Average Value of \\(\\frac{1}{x}\\)\nQuestion: Find the average value of \\(f(x) = \\frac{1}{x}\\) on the interval \\([1, e]\\).\n\n\nClick to see the solution\n\n\nSet up the formula: The interval is \\([1, e]\\), so \\(a=1\\), \\(b=e\\), and the width is \\(b-a=e-1\\). \\[ \\text{Average} = \\frac{1}{e-1} \\int_{1}^{e} \\frac{1}{x} \\,dx \\]\nFind the antiderivative: The antiderivative of \\(\\frac{1}{x}\\) is \\(\\ln|x|\\).\nEvaluate the definite integral: \\[ \\int_{1}^{e} \\frac{1}{x} \\,dx = [\\ln|x|]_{1}^{e} = \\ln(e) - \\ln(1) = 1 - 0 = 1 \\]\nCalculate the average value: \\[ \\text{Average} = \\frac{1}{e-1} \\times 1 = \\frac{1}{e-1} \\]\n\nAnswer: The average value is \\(\\frac{1}{e-1}\\).",
    "crumbs": [
      "Essence of calculus",
      "9. Average Value of a Function, Integration Applications"
    ]
  },
  {
    "objectID": "Essence of calculus/vid_2.html",
    "href": "Essence of calculus/vid_2.html",
    "title": "2. Derivatives, Instantaneous Rate of Change",
    "section": "",
    "text": "1. Summary\n\n1.1 Introduction to Derivatives\nThe primary goal of differential calculus is to understand the concept of a derivative. This idea, while seemingly simple, has many subtleties and can lead to paradoxes if not handled carefully. A secondary goal is to appreciate these potential paradoxes and learn how to avoid them through a rigorous understanding of the topic.\n\n\n1.2 The Paradox of “Instantaneous Rate of Change”\n\n1.2.1 The Oxymoron\nIt is common to hear the derivative described as measuring an “instantaneous rate of change.” However, this phrase is an oxymoron.\n\nA rate of change is a concept that inherently requires comparing values at multiple points in time to see how a quantity has changed.\nAn instant refers to a single, frozen point in time.\n\nWithin a single, durationless instant, there is no opportunity for change to occur. Trying to describe a “rate of change” at an “instant” is a logical contradiction.\n\n\n1.2.2 The Fathers of Calculus\nThis fundamental paradox was grappled with by the creators of calculus. Early pioneers like Isaac Barrow, Isaac Newton, and Gottfried Wilhelm Leibniz discovered the core ideas and intuitions. Later, mathematicians like Augustin-Louis Cauchy and Karl Weierstrass provided the rigorous logical foundations, including the concept of limits, to resolve these paradoxes and make calculus a sound mathematical discipline. \n\n\n\n1.3 A Real-World Example: Car Motion\nTo understand derivatives, consider a practical example: a car accelerating from a starting point A and then decelerating to a stop at point B, 100 meters away, over a total of 10 seconds. This motion can be represented on a graph.\n\nThe vertical axis represents the distance traveled, s, in meters.\nThe horizontal axis represents the time elapsed, t, in seconds.\nThe function s(t) gives the total distance traveled at any given time t.\n\nThe shape of the curve illustrates the car’s speed. Where the curve is shallow, the car is slow. Where the curve is steep, the car is fast. This visual steepness is directly related to the car’s velocity. \n\n\n1.4 Velocity and Its Calculation\nVelocity is defined as the change in distance over the change in time. To calculate velocity, one must compare the distance traveled between two distinct points in time. For instance, to find the average velocity between t = 4 seconds and t = 5 seconds, we would calculate: \\[ \\text{Velocity} = \\frac{\\text{Change in distance}}{\\text{Change in time}} = \\frac{s(5) - s(4)}{5 - 4} \\] It is impossible to determine the velocity of an object from a single snapshot in time, as there is no change to measure.\n\n\n1.5 The Derivative as a Limit\nThe central idea of a derivative is to resolve the paradox of an “instantaneous” rate of change. It does this by asking what the average rate of change approaches as the time interval becomes infinitesimally small.\n\nWe use the notation dt to represent a small change (or “nudge”) in time.\nThe corresponding change in distance is denoted as ds.\nThe ratio ds/dt gives the average velocity over that tiny interval dt.\n\nThe derivative of the function s(t) is the value that this ratio ds/dt approaches as dt gets closer and closer to zero. This process of finding what a value approaches is called finding a limit. \n\n\n1.6 Geometric Interpretation: Slope of the Tangent Line\nGraphically, the ratio ds/dt represents the slope of a line connecting two nearby points on the graph of s(t). This line is called a secant line.\nAs the time interval dt approaches zero, the two points on the graph get closer and closer together. The secant line connecting them approaches a line that just touches the graph at that single point. This line is the tangent line. The slope of this tangent line is the derivative of the function at that point.\nThus, the derivative provides the best constant approximation for the rate of change at a specific point. \n\n\n1.7 An Algebraic Example: s(t) = t³\nLet’s find the derivative of the function s(t) = t³ at the specific time t = 2.\n\nSet up the ratio: \\[ \\frac{ds}{dt} = \\frac{s(2 + dt) - s(2)}{dt} \\]\nSubstitute the function t³: \\[ \\frac{(2 + dt)^3 - 2^3}{dt} \\]\nExpand the numerator: Recalling that \\((a+b)^3 = a^3 + 3a^2b + 3ab^2 + b^3\\), we get: \\[ \\frac{(2^3 + 3(2^2)(dt) + 3(2)(dt)^2 + (dt)^3) - 2^3}{dt} \\]\nSimplify: The \\(2^3\\) terms cancel. We can then divide the entire expression by dt. \\[ \\frac{3(2^2)(dt) + 3(2)(dt)^2 + (dt)^3}{dt} = 3(2^2) + 3(2)(dt) + (dt)^2 \\]\nFind the limit: Now, we consider what happens as dt approaches 0. All terms containing dt will vanish. \\[ \\lim_{dt \\to 0} [3(2^2) + 6(dt) + (dt)^2] = 3(2^2) = 12 \\] So, the derivative of t³ at t = 2 is 12. More generally, the derivative function for s(t) = t³ is ds/dt = 3t².\n\n\n\n\n2. Definitions\n\nDerivative: The value that the ratio of the change in a function’s output (ds) to a small change in its input (dt) approaches as the change in the input (dt) approaches zero. Geometrically, it is the slope of the tangent line to the function’s graph at a point.\nInstantaneous Rate of Change: A conceptual idea for the rate of change at a single point in time. Mathematically, it is defined by the derivative.\nLimit: The value that a function approaches as its input approaches a certain value. The core concept that resolves the paradox of the derivative.\nTangent Line: A straight line that touches a curve at a single point and has the same slope as the curve at that point.\nSecant Line: A straight line connecting two distinct points on a curve.\n\n\n\n3. Formulas\n\nAverage Rate of Change: \\[ \\frac{\\Delta s}{\\Delta t} = \\frac{s(t_2) - s(t_1)}{t_2 - t_1} \\]\nDerivative (Limit Definition): \\[ \\frac{ds}{dt}(t) = \\lim_{dt \\to 0} \\frac{s(t + dt) - s(t)}{dt} \\]\nDerivative of t³ (Power Rule Example): \\[ \\frac{d}{dt}(t^3) = 3t^2 \\]\n\n\n\n4. Mistakes\n\nTreating dt as literally zero: In the derivative expression ds/dt, dividing by dt is a key step. You cannot divide by zero. The concept is about what happens as dt approaches zero, not what happens when it is zero.\nConfusing the derivative with an average rate of change: The derivative is the limit of the average rate of change as the interval shrinks, not the rate over a fixed interval like 0.01 seconds.\nBelieving “instantaneous rate of change” is a literal concept: Change requires a time interval. The derivative is a sophisticated mathematical tool to define the best constant approximation of a changing rate at a single point, resolving this paradox.\nThinking the derivative must be complex: While the limit definition can be algebraically intensive, the final derivative function (e.g., 3t²) is often much simpler than the original ratio.\n\n\n\n5. Examples\n\n5.1. Average Velocity Calculation\nQuestion: For a particle whose distance is given by s(t) = t³, what is its average velocity between t = 1 and t = 3?\n\n\nClick to see the solution\n\n\nFind the positions at t=1 and t=3:\n\ns(1) = 1³ = 1 meter.\ns(3) = 3³ = 27 meters.\n\nCalculate the change in distance and change in time:\n\nΔs = s(3) - s(1) = 27 - 1 = 26 meters.\nΔt = 3 - 1 = 2 seconds.\n\nCompute the average velocity: \\[ \\frac{\\Delta s}{\\Delta t} = \\frac{26 \\text{ meters}}{2 \\text{ seconds}} = 13 \\text{ m/s} \\]\n\nAnswer: The average velocity is 13 m/s.\n\n\n\n5.2. Derivative from Definition\nQuestion: Using the formal limit definition, find the derivative of s(t) = t³ at t = 1.\n\n\nClick to see the solution\n\n\nWrite the limit expression for the derivative: \\[ \\frac{ds}{dt}(1) = \\lim_{dt \\to 0} \\frac{s(1 + dt) - s(1)}{dt} \\]\nSubstitute s(t) = t³: \\[ \\lim_{dt \\to 0} \\frac{(1 + dt)^3 - 1^3}{dt} \\]\nExpand and simplify the numerator: \\[ \\lim_{dt \\to 0} \\frac{(1 + 3dt + 3(dt)^2 + (dt)^3) - 1}{dt} = \\lim_{dt \\to 0} \\frac{3dt + 3(dt)^2 + (dt)^3}{dt} \\]\nDivide by dt: \\[ \\lim_{dt \\to 0} (3 + 3dt + (dt)^2) \\]\nEvaluate the limit as dt approaches 0: \\[ 3 + 3(0) + (0)^2 = 3 \\]\n\nAnswer: The derivative at t = 1 is 3.\n\n\n\n5.3. Slope of the Tangent Line\nQuestion: What is the slope of the line tangent to the graph of y = x³ at the point x = 4?\n\n\nClick to see the solution\n\nThe slope of the tangent line is given by the derivative. The derivative of f(x) = x³ is f'(x) = 3x².\n\nEvaluate the derivative at x = 4: \\[ f'(4) = 3(4)^2 \\]\nCalculate the value: \\[ f'(4) = 3(16) = 48 \\]\n\nAnswer: The slope of the tangent line is 48.\n\n\n\n5.4. Instantaneous Velocity\nQuestion: If a particle’s position is given by s(t) = t³, what is its instantaneous velocity at t = 5 seconds?\n\n\nClick to see the solution\n\nThe instantaneous velocity is the derivative of the position function, s'(t) = 3t².\n\nEvaluate the derivative at t = 5: \\[ s'(5) = 3(5)^2 \\]\nCalculate the value: \\[ s'(5) = 3(25) = 75 \\]\n\nAnswer: The instantaneous velocity is 75 m/s.\n\n\n\n5.5. The Zeno Paradox\nQuestion: At t = 0, the derivative of s(t) = t³ is s'(0) = 3(0)² = 0. Does this mean the car is not moving? If so, how does it ever start moving?\n\n\nClick to see the solution\n\nThis is a classic paradox of calculus.\n\nThe Derivative’s Meaning: The derivative being zero at t = 0 means that the best constant approximation for the car’s velocity around that instant is 0 m/s. It does not mean the car is absolutely static for any duration of time.\nMovement over an Interval: For any small time interval after t = 0 (e.g., from t = 0 to t = 0.01), the car does move. Its position changes from s(0)=0 to s(0.01) = 0.000001. The average velocity over this interval is not zero.\nResolution: The paradox is resolved by understanding that the derivative describes a limit—the behavior approaching an instant, not the behavior at a durationless instant. Although its instantaneous rate of change is zero, its rate of change is itself changing (this relates to the second derivative, or acceleration), allowing it to move in the very next moment.\n\nAnswer: The car’s velocity is 0 at the exact instant t = 0, but it begins moving immediately after because its velocity is changing.\n\n\n\n5.6. Approximating Instantaneous Velocity\nQuestion: Approximate the instantaneous velocity of s(t) = t³ at t = 2 by calculating the average velocity over the interval [2, 2.01].\n\n\nClick to see the solution\n\n\nCalculate the change in distance Δs: \\[ \\Delta s = s(2.01) - s(2) = (2.01)^3 - 2^3 \\] \\[ \\Delta s = 8.120601 - 8 = 0.120601 \\text{ meters} \\]\nIdentify the change in time Δt: \\[ \\Delta t = 2.01 - 2 = 0.01 \\text{ seconds} \\]\nCalculate the average velocity: \\[ \\frac{\\Delta s}{\\Delta t} = \\frac{0.120601}{0.01} = 12.0601 \\text{ m/s} \\]\n\nAnswer: The average velocity is 12.0601 m/s, which is a close approximation to the true instantaneous velocity of 12 m/s.\n\n\n\n5.7. Relating Graph Slope to Velocity\nQuestion: Consider the graph of s(t) = t³. Is the velocity of the particle greater at t = 1 or t = 2? Explain using the concept of the tangent line.\n\n\nClick to see the solution\n\n\nVisualize the Graph: The graph of s(t) = t³ gets steeper as t increases. \nTangent Line Slope: The derivative, which represents instantaneous velocity, is the slope of the tangent line to the graph.\nCompare Slopes: A steeper curve means a tangent line with a larger slope. Since the curve is steeper at t = 2 than at t = 1, the slope of the tangent line is greater at t = 2.\nConclusion: Therefore, the velocity is greater at t = 2. We can confirm this with the derivative s'(t) = 3t²: s'(1) = 3 and s'(2) = 12.\n\nAnswer: The velocity is greater at t = 2 because the slope of the graph’s tangent line is steeper at that point.",
    "crumbs": [
      "Essence of calculus",
      "2. Derivatives, Instantaneous Rate of Change"
    ]
  },
  {
    "objectID": "Essence of calculus/vid_12.html",
    "href": "Essence of calculus/vid_12.html",
    "title": "12. Derivatives, Transformational View, Fixed Points",
    "section": "",
    "text": "1. Summary\n\n1.1 The Limitations of a Graph-Centric View\n\n1.1.1 Standard Calculus Visuals\nIn a typical introductory calculus course, the core concepts are heavily tied to the visual representation of functions as graphs.\n\nThe Derivative is visualized as the slope of the tangent line to the graph at a specific point.\nThe Integral is understood as the area under the graph over a certain interval.\n\nWhile these graphical intuitions are powerful for functions mapping real numbers to real numbers (from \\(\\mathbb{R}\\) to \\(\\mathbb{R}\\)), they become a conceptual hurdle when advancing to higher-level mathematics.\n\n\n1.1.2 Generalizing Calculus\nIn fields like multivariable calculus, complex analysis, or differential geometry, functions often operate in spaces where a simple 2D graph is not possible. For example, a function mapping a complex number to another complex number (\\(C \\rightarrow C\\)) would require four dimensions to graph. When the core understanding of a derivative is rigidly tied to the idea of “slope,” it becomes difficult to generalize the concept to these new contexts.\n\n\n\n1.2 The Transformational View of a Derivative\n\n1.2.1 Functions as Transformations\nAn alternative way to visualize a function is as a transformation that maps all the points from an input number line to corresponding points on an output number line. This view focuses on how the function moves, stretches, or squishes the space of numbers.\n\n\n\n1.2.2 The Derivative as a Scaling Factor\nIn this transformational context, the derivative of a function at a specific input point, \\(df/dx(x)\\), gives a precise measure of how much the space immediately surrounding that point is being stretched or squished.\n\nIf \\(|df/dx| &gt; 1\\), the space is stretched.\nIf \\(|df/dx| &lt; 1\\), the space is squished or contracted.\nIf \\(|df/dx| = 1\\), the space is locally unchanged in scale.\nIf \\(df/dx &lt; 0\\), the space is also flipped in its orientation.\n\nThis perspective is more flexible and generalizes more seamlessly to higher dimensions and different mathematical contexts.\n\n\n\n1.3 Fixed Points and Stability\n\n1.3.1 Defining Fixed Points\nA fixed point of a function \\(f(x)\\) is a value \\(x\\) such that \\(f(x) = x\\). When the function is applied to this value, the output is the same as the input; the point does not move.\nThis concept is crucial for analyzing iterative processes, such as the famous continued fraction for the golden ratio: \\[ x = 1 + \\frac{1}{1 + \\frac{1}{1 + \\dots}} \\] This is equivalent to finding the fixed point of the function \\(f(x) = 1 + \\frac{1}{x}\\).\n\n\n1.3.2 Stable vs. Unstable Fixed Points\nA function can have multiple fixed points, but not all are “attractive.”\n\nA Stable Fixed Point is a point where, if you start with an input near it and repeatedly apply the function, the outputs will get closer and closer, converging on the fixed point.\nAn Unstable Fixed Point is a point that repels nearby values. If you start near it and repeatedly apply the function, the outputs will move away.\n\nThe stability of a fixed point is determined by the derivative at that point.\n\nStable Fixed Point Condition: A fixed point \\(x\\) is stable if \\(|f'(x)| &lt; 1\\). The function contracts the space around the point, pulling nearby values inward.\nUnstable Fixed Point Condition: A fixed point \\(x\\) is unstable if \\(|f'(x)| &gt; 1\\). The function expands the space around the point, pushing nearby values away.\n\nFor the function \\(f(x) = 1 + \\frac{1}{x}\\), the fixed points are the golden ratio, \\(\\varphi \\approx 1.618\\), and its “little brother,” \\(1-\\varphi \\approx -0.618\\).\n\nAt \\(x = \\varphi\\), the derivative is \\(f'(\\varphi) = -1/\\varphi^2 \\approx -0.38\\). Since \\(|-0.38| &lt; 1\\), this is a stable fixed point.\nAt \\(x = 1-\\varphi\\), the derivative is \\(f'(1-\\varphi) = -1/(1-\\varphi)^2 \\approx -2.62\\). Since \\(|-2.62| &gt; 1\\), this is an unstable fixed point.\n\nThis explains why numerically iterating this function, regardless of the starting value (with very few exceptions), will always converge to the golden ratio.\n\n\n\n\n2. Definitions\n\nDerivative (Traditional View): The instantaneous rate of change of a function, visually represented as the slope of the tangent line to its graph.\nDerivative (Transformational View): A measure of the local scaling factor of a function. It describes how much the function stretches or squishes the input space around a specific point.\nFixed Point: An input value x for a function f such that f(x) = x. It is a point that remains unchanged after the function is applied.\nStable Fixed Point: A fixed point that attracts nearby values under repeated application of the function. This occurs when the absolute value of the derivative at the fixed point is less than 1.\nUnstable Fixed Point: A fixed point that repels nearby values under repeated application of the function. This occurs when the absolute value of the derivative at the fixed point is greater than 1.\n\n\n\n3. Formulas\n\nFixed Point Equation: \\(f(x) = x\\)\nCondition for a Stable Fixed Point: \\(|f'(x)| &lt; 1\\)\nCondition for an Unstable Fixed Point: \\(|f'(x)| &gt; 1\\)\nDerivative of \\(x^n\\) (Power Rule): \\(\\frac{d}{dx}(x^n) = nx^{n-1}\\)\n\n\n\n4. Mistakes\n\nRelying Solely on Graphical Intuition: Limiting the concept of a derivative to just the “slope of a graph” makes it difficult to apply in contexts beyond single-variable calculus, such as complex analysis or vector fields.\nAssuming All Fixed Points Are Stable: Finding a value where \\(f(x) = x\\) does not guarantee that an iterative process will converge to it. The stability depends entirely on the derivative at that point.\nIgnoring the Magnitude of the Derivative for Stability: The sign of the derivative indicates orientation (flipping), but it’s the absolute value (magnitude) that determines whether a fixed point is stable (&lt; 1) or unstable (&gt; 1).\nAssuming a Continued Fraction Represents All Fixed Points: A continued fraction, defined as a limit of an iterative process, will only converge to a stable fixed point. Unstable fixed points are valid algebraic solutions but are not reachable through this iterative method.\n\n\n\n5. Examples\n\n5.1 Derivative as a Scaling Factor\nQuestion: Consider the function \\(f(x) = x^3\\). What is the derivative at \\(x=2\\), and what does it mean from a transformational perspective?\n\n\nClick to see the solution\n\n\nFind the derivative: Using the power rule, \\(f'(x) = 3x^2\\).\nEvaluate at \\(x=2\\): \\(f'(2) = 3(2)^2 = 12\\).\nInterpretation: At the input \\(x=2\\), the function \\(f(x) = x^3\\) stretches the number line by a factor of 12. A very small interval around 2 will be mapped to an interval around \\(f(2)=8\\) that is 12 times larger.\n\nAnswer: The derivative is 12, which represents a local stretching factor of 12.\n\n\n\n5.2 Finding Fixed Points\nQuestion: Find the fixed points of the function \\(g(x) = x^2 - 2\\).\n\n\nClick to see the solution\n\n\nSet up the fixed-point equation: We need to solve \\(g(x) = x\\). \\[ x^2 - 2 = x \\]\nRearrange into a quadratic equation: \\[ x^2 - x - 2 = 0 \\]\nFactor the quadratic: \\[ (x-2)(x+1) = 0 \\]\nSolve for x: The solutions are \\(x = 2\\) and \\(x = -1\\).\n\nAnswer: The fixed points are 2 and -1.\n\n\n\n5.3 Determining Fixed Point Stability\nQuestion: For the function \\(g(x) = x^2 - 2\\), determine whether the fixed points at \\(x=2\\) and \\(x=-1\\) are stable or unstable.\n\n\nClick to see the solution\n\n\nFind the derivative: \\(g'(x) = 2x\\).\nCheck stability at \\(x=2\\):\n\nEvaluate the derivative: \\(g'(2) = 2(2) = 4\\).\nCheck the condition: \\(|g'(2)| = |4| = 4\\). Since \\(4 &gt; 1\\), the fixed point is unstable.\n\nCheck stability at \\(x=-1\\):\n\nEvaluate the derivative: \\(g'(-1) = 2(-1) = -2\\).\nCheck the condition: \\(|g'(-1)| = |-2| = 2\\). Since \\(2 &gt; 1\\), this fixed point is also unstable.\n\n\nAnswer: Both fixed points, 2 and -1, are unstable.\n\n\n\n5.4 Finding Another Fixed Point\nQuestion: Find the fixed point(s) of the function \\(h(x) = \\frac{1}{2}(x + \\frac{9}{x})\\).\n\n\nClick to see the solution\n\n\nSet up the equation \\(h(x) = x\\): \\[ \\frac{1}{2}\\left(x + \\frac{9}{x}\\right) = x \\]\nSolve for x: \\[ x + \\frac{9}{x} = 2x \\] \\[ \\frac{9}{x} = x \\] \\[ 9 = x^2 \\] \\[ x = \\pm 3 \\]\n\nAnswer: The fixed points are 3 and -3.\n\n\n\n5.5 Stability of a Square Root Function\nQuestion: For the function \\(h(x) = \\frac{1}{2}(x + \\frac{9}{x})\\), determine the stability of the fixed points \\(x=3\\) and \\(x=-3\\).\n\n\nClick to see the solution\n\n\nFind the derivative: \\[ h'(x) = \\frac{d}{dx}\\left(\\frac{1}{2}x + \\frac{9}{2}x^{-1}\\right) = \\frac{1}{2} - \\frac{9}{2}x^{-2} = \\frac{1}{2} - \\frac{9}{2x^2} \\]\nCheck stability at \\(x=3\\):\n\n\\(h'(3) = \\frac{1}{2} - \\frac{9}{2(3)^2} = \\frac{1}{2} - \\frac{9}{18} = \\frac{1}{2} - \\frac{1}{2} = 0\\).\n\\(|h'(3)| = 0\\). Since \\(0 &lt; 1\\), the fixed point is stable.\n\nCheck stability at \\(x=-3\\):\n\n\\(h'(-3) = \\frac{1}{2} - \\frac{9}{2(-3)^2} = \\frac{1}{2} - \\frac{9}{18} = 0\\).\n\\(|h'(-3)| = 0\\). Since \\(0 &lt; 1\\), this fixed point is also stable.\n\n\nAnswer: Both fixed points, 3 and -3, are stable. This iterative method is actually a way to find square roots, known as the Babylonian method.\n\n\n\n5.6 Unstable Divergence\nQuestion: Explain why repeatedly applying the function \\(f(x) = 3x\\) starting from any non-zero value will diverge from its fixed point at \\(x=0\\).\n\n\nClick to see the solution\n\n\nIdentify the fixed point: Solving \\(3x = x\\) gives \\(2x = 0\\), so \\(x=0\\) is the only fixed point.\nFind the derivative: \\(f'(x) = 3\\).\nCheck the stability: The derivative is constant. \\(|f'(0)| = 3\\). Since \\(3 &gt; 1\\), the fixed point is unstable.\nInterpretation: At every point, the function stretches the number line by a factor of 3. This pushes any starting value further away from the origin with each iteration, causing it to diverge.\n\nAnswer: The fixed point at \\(x=0\\) is unstable because the magnitude of the derivative, \\(|3|\\), is greater than 1.\n\n\n\n5.7 Stability of a Trigonometric Function\nQuestion: The function \\(f(x) = \\cos(x)\\) has a unique fixed point at \\(x \\approx 0.739\\). Determine if this point is stable.\n\n\nClick to see the solution\n\n\nFind the derivative of the function: \\[ f'(x) = -\\sin(x) \\]\nEvaluate the derivative at the fixed point \\(x \\approx 0.739\\) (in radians): \\[ f'(0.739) = -\\sin(0.739) \\approx -0.674 \\]\nCheck the stability condition: \\[ |f'(0.739)| = |-0.674| \\approx 0.674 \\] Since \\(0.674 &lt; 1\\), the fixed point is stable.\n\nAnswer: The fixed point is stable. If you repeatedly press the cosine button on a calculator (in radian mode), the result will converge to this value.",
    "crumbs": [
      "Essence of calculus",
      "12. Derivatives, Transformational View, Fixed Points"
    ]
  },
  {
    "objectID": "Essence of calculus/vid_6.html",
    "href": "Essence of calculus/vid_6.html",
    "title": "6. Implicit Differentiation, Related Rates",
    "section": "",
    "text": "1. Summary\n\n1.1 Implicit vs. Explicit Functions\n\n1.1.1 Explicit Functions\nMost functions you encounter in early calculus are explicit, meaning one variable is directly expressed in terms of another. For example, in the function \\(y = x^2\\), y is explicitly defined as a function of x. For any given input x, you can directly calculate the output y.\n\n\n1.1.2 Implicit Relations\nSome relationships between variables are not written this way. Consider the equation of a circle with a radius of 5: \\(x^2 + y^2 = 25\\). This is an implicit equation. Here, y is not isolated on one side. While you could solve for y to get \\(y = \\pm\\sqrt{25 - x^2}\\), this creates two separate functions. The original equation defines the entire curve with a single relationship where x and y are interdependent. Think of x and y as two values linked by a rule, rather than one being a direct input and the other an output.\n\n\n\n\n1.2 Finding the Slope of an Implicit Curve\nEven if a curve isn’t a function, we can still find the slope of its tangent line (\\(dy/dx\\)) at a given point using implicit differentiation. The core idea is to treat y as a function of x (even if we can’t write it down) and apply the chain rule.\nLet’s use the circle equation \\(x^2 + y^2 = 25\\). To find the slope, we differentiate both sides of the equation with respect to x.\n\nDifferentiate the x term: The derivative of \\(x^2\\) with respect to x is simply \\(2x\\).\nDifferentiate the y term: This is the key step. Since we’re assuming y depends on x, we must use the chain rule. The derivative of \\(y^2\\) with respect to x is \\(2y\\) (the derivative of the outer function) multiplied by the derivative of y with respect to x, which is \\(dy/dx\\). So, we get \\(2y \\frac{dy}{dx}\\).\nDifferentiate the constant: The derivative of the constant 25 is 0.\n\nPutting it all together, we have: \\[ 2x + 2y \\frac{dy}{dx} = 0 \\]\nNow, we can algebraically solve for \\(\\frac{dy}{dx}\\): \\[ 2y \\frac{dy}{dx} = -2x \\] \\[ \\frac{dy}{dx} = -\\frac{2x}{2y} = -\\frac{x}{y} \\]\nThis formula gives us the slope of the tangent line at any point \\((x, y)\\) on the circle. For instance, at the point (3, 4), the slope is \\(-\\frac{3}{4}\\).\n\n\n1.3 Connection to Related Rates\nImplicit differentiation is conceptually linked to related rates problems. In related rates, multiple variables are functions of a common variable, usually time t.\nImagine a 5-meter ladder leaning against a wall. The distance from the base of the wall to the ladder’s bottom is x(t), and the height of the ladder’s top is y(t). The Pythagorean theorem tells us that at any time t: \\[ (x(t))^2 + (y(t))^2 = 5^2 \\]\nIf we know the rate at which the ladder is sliding down the wall (\\(dy/dt\\)) and want to find the rate at which its base is moving away (\\(dx/dt\\)), we can differentiate the entire equation with respect to t.\nApplying the chain rule to both x(t) and y(t) yields: \\[ 2x(t)\\frac{dx}{dt} + 2y(t)\\frac{dy}{dt} = 0 \\]\nThis equation relates the variables (x and y) to their rates of change (\\(dx/dt\\) and \\(dy/dt\\)). This process is the same as implicit differentiation, but with respect to time t instead of x.\n\n\n\n2. Definitions\n\nImplicit Differentiation: A method used to find the derivative of a variable in an implicit equation by differentiating both sides with respect to that variable and applying the chain rule.\nImplicit Equation: An equation involving two or more variables where one variable is not explicitly expressed in terms of the others (e.g., \\(x^2 + y^2 = 25\\)).\nExplicit Function: A function where the dependent variable is expressed solely in terms of the independent variable (e.g., \\(y = x^2\\)).\nRelated Rates: Problems that involve finding the rate of change of one quantity by relating it to other quantities whose rates of change are known. The rates are typically with respect to time.\n\n\n\n3. Formulas\n\nThe Chain Rule for Implicit Differentiation: When differentiating a term with y with respect to x, if \\(y\\) is a function of \\(x\\), then \\(\\frac{d}{dx}[f(y)] = f'(y) \\cdot \\frac{dy}{dx}\\).\nGeneral Derivative of an Implicit Equation: Given an equation \\(F(x, y) = C\\), its derivative is found by applying \\(\\frac{d}{dx}\\) to both sides: \\(\\frac{d}{dx}[F(x, y)] = 0\\).\nDerivative of a Circle: For a circle defined by \\(x^2 + y^2 = r^2\\), the slope of the tangent line is \\(\\frac{dy}{dx} = -\\frac{x}{y}\\).\n\n\n\n4. Mistakes\n\nForgetting the Chain Rule for y: A common error is differentiating a term like \\(y^3\\) with respect to x and writing \\(3y^2\\) instead of the correct \\(3y^2 \\cdot \\frac{dy}{dx}\\). Why it’s wrong: Since y is treated as an inner function of x, the chain rule is mandatory.\nIncorrectly Differentiating a Product: Forgetting to use the product rule for terms like \\(xy\\). The derivative of \\(xy\\) is not simply \\(\\frac{dy}{dx}\\). Why it’s wrong: \\(xy\\) is a product of two functions of x (x and y(x)), so the product rule must be used: \\(1 \\cdot y + x \\cdot \\frac{dy}{dx}\\).\nAlgebraic Mistakes: After correctly differentiating, simple errors can be made when isolating \\(\\frac{dy}{dx}\\).\nDifferentiating Constants as Non-Zero: Forgetting that the derivative of any constant (like 25 in \\(x^2 + y^2 = 25\\)) is zero.\n\n\n\n5. Examples\n\n5.1 Find the Slope on a Circle\nQuestion: Find the slope of the tangent line to the circle \\(x^2 + y^2 = 25\\) at the point \\((3, -4)\\).\n\n\nClick to see the solution\n\n\nDifferentiate both sides with respect to x: \\[ \\frac{d}{dx}(x^2 + y^2) = \\frac{d}{dx}(25) \\] \\[ 2x + 2y\\frac{dy}{dx} = 0 \\]\nSolve for \\(\\frac{dy}{dx}\\): \\[ 2y\\frac{dy}{dx} = -2x \\] \\[ \\frac{dy}{dx} = -\\frac{x}{y} \\]\nSubstitute the point \\((3, -4)\\): \\[ \\frac{dy}{dx} \\bigg|_{(3,-4)} = -\\frac{3}{-4} = \\frac{3}{4} \\]\n\nAnswer: The slope is \\(\\frac{3}{4}\\).\n\n\n\n5.2 Using the Product Rule\nQuestion: Find \\(\\frac{dy}{dx}\\) for the equation \\(x^3 + y^3 = 6xy\\).\n\n\nClick to see the solution\n\n\nDifferentiate both sides with respect to x: \\[ \\frac{d}{dx}(x^3 + y^3) = \\frac{d}{dx}(6xy) \\]\nApply differentiation rules:\n\nLeft side: \\(3x^2 + 3y^2\\frac{dy}{dx}\\)\nRight side (use product rule on \\(xy\\)): \\(6(1 \\cdot y + x \\cdot \\frac{dy}{dx}) = 6y + 6x\\frac{dy}{dx}\\)\n\nSet them equal and solve for \\(\\frac{dy}{dx}\\): \\[ 3x^2 + 3y^2\\frac{dy}{dx} = 6y + 6x\\frac{dy}{dx} \\] \\[ 3y^2\\frac{dy}{dx} - 6x\\frac{dy}{dx} = 6y - 3x^2 \\] \\[ \\frac{dy}{dx}(3y^2 - 6x) = 6y - 3x^2 \\] \\[ \\frac{dy}{dx} = \\frac{6y - 3x^2}{3y^2 - 6x} = \\frac{2y - x^2}{y^2 - 2x} \\]\n\nAnswer: \\(\\frac{dy}{dx} = \\frac{2y - x^2}{y^2 - 2x}\\)\n\n\n\n5.3 Implicit Differentiation with Trig Functions\nQuestion: Find \\(\\frac{dy}{dx}\\) for the equation \\(\\sin(x) + \\cos(y) = 1\\).\n\n\nClick to see the solution\n\n\nDifferentiate both sides with respect to x: \\[ \\frac{d}{dx}(\\sin(x) + \\cos(y)) = \\frac{d}{dx}(1) \\]\nApply differentiation rules (using chain rule for \\(\\cos(y)\\)): \\[ \\cos(x) - \\sin(y)\\frac{dy}{dx} = 0 \\]\nSolve for \\(\\frac{dy}{dx}\\): \\[ -\\sin(y)\\frac{dy}{dx} = -\\cos(x) \\] \\[ \\frac{dy}{dx} = \\frac{-\\cos(x)}{-\\sin(y)} = \\frac{\\cos(x)}{\\sin(y)} \\]\n\nAnswer: \\(\\frac{dy}{dx} = \\frac{\\cos(x)}{\\sin(y)}\\)\n\n\n\n5.4 Finding the Equation of a Tangent Line\nQuestion: Find the equation of the tangent line to the curve \\(y^2 = x^3 - 3x + 3\\) at the point \\((1, 1)\\).\n\n\nClick to see the solution\n\n\nFind the slope using implicit differentiation: \\[ \\frac{d}{dx}(y^2) = \\frac{d}{dx}(x^3 - 3x + 3) \\] \\[ 2y\\frac{dy}{dx} = 3x^2 - 3 \\] \\[ \\frac{dy}{dx} = \\frac{3x^2 - 3}{2y} \\]\nCalculate the slope at \\((1, 1)\\): \\[ m = \\frac{3(1)^2 - 3}{2(1)} = \\frac{3 - 3}{2} = 0 \\]\nUse the point-slope form to find the line’s equation: \\[ y - y_1 = m(x - x_1) \\] \\[ y - 1 = 0(x - 1) \\] \\[ y - 1 = 0 \\implies y = 1 \\]\n\nAnswer: The equation of the tangent line is \\(y = 1\\).\n\n\n\n5.5 Find the Second Derivative\nQuestion: Find \\(\\frac{d^2y}{dx^2}\\) for \\(x^2 + y^2 = 25\\).\n\n\nClick to see the solution\n\n\nFirst, find the first derivative, \\(\\frac{dy}{dx}\\): We already found this in a previous example: \\(\\frac{dy}{dx} = -\\frac{x}{y}\\).\nDifferentiate \\(\\frac{dy}{dx}\\) with respect to x using the quotient rule: \\[ \\frac{d^2y}{dx^2} = \\frac{d}{dx}\\left(-\\frac{x}{y}\\right) = -\\frac{(1 \\cdot y) - (x \\cdot \\frac{dy}{dx})}{y^2} \\] \\[ = -\\frac{y - x\\frac{dy}{dx}}{y^2} \\]\nSubstitute the expression for \\(\\frac{dy}{dx}\\) back into the equation: \\[ = -\\frac{y - x(-\\frac{x}{y})}{y^2} = -\\frac{y + \\frac{x^2}{y}}{y^2} \\]\nSimplify the complex fraction: \\[ = -\\frac{\\frac{y^2 + x^2}{y}}{y^2} = -\\frac{x^2 + y^2}{y^3} \\]\nSubstitute the original relation \\(x^2 + y^2 = 25\\): \\[ = -\\frac{25}{y^3} \\]\n\nAnswer: \\(\\frac{d^2y}{dx^2} = -\\frac{25}{y^3}\\)\n\n\n\n5.6 Another Implicit Derivative\nQuestion: Find \\(\\frac{dy}{dx}\\) for \\(x \\cdot e^y = y\\).\n\n\nClick to see the solution\n\n\nDifferentiate both sides with respect to x. Use the product rule on the left side: \\[ \\frac{d}{dx}(x \\cdot e^y) = \\frac{d}{dx}(y) \\] \\[ (1 \\cdot e^y) + (x \\cdot e^y \\frac{dy}{dx}) = \\frac{dy}{dx} \\]\nGather terms with \\(\\frac{dy}{dx}\\) on one side: \\[ e^y = \\frac{dy}{dx} - x e^y \\frac{dy}{dx} \\] \\[ e^y = \\frac{dy}{dx}(1 - x e^y) \\]\nSolve for \\(\\frac{dy}{dx}\\): \\[ \\frac{dy}{dx} = \\frac{e^y}{1 - x e^y} \\]\n\nAnswer: \\(\\frac{dy}{dx} = \\frac{e^y}{1 - x e^y}\\)\n\n\n\n5.7 Related Rates Problem\nQuestion: A spherical balloon is being inflated. Its volume V is increasing at a rate of \\(100 \\text{ cm}^3/\\text{s}\\). At what rate is the radius r increasing when the radius is 10 cm? (The volume of a sphere is \\(V = \\frac{4}{3}\\pi r^3\\)).\n\n\nClick to see the solution\n\n\nIdentify the given information and what needs to be found:\n\nGiven: \\(\\frac{dV}{dt} = 100 \\text{ cm}^3/\\text{s}\\)\nFind: \\(\\frac{dr}{dt}\\) when \\(r = 10 \\text{ cm}\\)\n\nWrite the equation that relates the variables: \\[ V = \\frac{4}{3}\\pi r^3 \\]\nDifferentiate both sides with respect to time t: \\[ \\frac{d}{dt}(V) = \\frac{d}{dt}\\left(\\frac{4}{3}\\pi r^3\\right) \\] \\[ \\frac{dV}{dt} = \\frac{4}{3}\\pi \\cdot (3r^2 \\cdot \\frac{dr}{dt}) \\] \\[ \\frac{dV}{dt} = 4\\pi r^2 \\frac{dr}{dt} \\]\nSubstitute the known values and solve for \\(\\frac{dr}{dt}\\): \\[ 100 = 4\\pi (10)^2 \\frac{dr}{dt} \\] \\[ 100 = 400\\pi \\frac{dr}{dt} \\] \\[ \\frac{dr}{dt} = \\frac{100}{400\\pi} = \\frac{1}{4\\pi} \\]\n\nAnswer: The radius is increasing at a rate of \\(\\frac{1}{4\\pi} \\text{ cm/s}\\).",
    "crumbs": [
      "Essence of calculus",
      "6. Implicit Differentiation, Related Rates"
    ]
  },
  {
    "objectID": "Essence of calculus/vid_4.html",
    "href": "Essence of calculus/vid_4.html",
    "title": "4. Sum Rule, Product Rule, Chain Rule",
    "section": "",
    "text": "1. Summary\n\n1.1 Introduction\nA common analogy describes the process of applying differentiation rules:\n\n“Using the chain rule is like peeling an onion: you have to deal with each layer at a time, and if it is too big you will start crying.” - Anonymous Professor\n\nWhile calculus often starts with finding derivatives of simple functions like \\(f(x) = x^3\\) or \\(f(x) = \\sin(x)\\), most real-world applications involve functions that are combinations of these simpler forms. To handle these, we need rules for how to differentiate functions that are added, multiplied, or composed together.\n\n\n1.2 Three Basic Ways to Combine Functions\nThere are three fundamental ways to combine two functions, \\(g(x)\\) and \\(h(x)\\):\n\nAddition: \\(g(x) + h(x)\\)\nMultiplication: \\(g(x) \\cdot h(x)\\)\nComposition: \\(g(h(x))\\) (plugging one function into another)\n\nEach of these combinations has a corresponding rule for differentiation: the Sum Rule, the Product Rule, and the Chain Rule.\n\n\n1.3 The Sum Rule\n\n1.3.1 The Rule\nThe Sum Rule is the most straightforward. It states that the derivative of a sum of functions is the sum of their individual derivatives.\n\n\n1.3.2 Intuition\nConsider the function \\(f(x) = \\sin(x) + x^2\\). The value of \\(f(x)\\) at any point is the sum of the heights of the \\(\\sin(x)\\) and \\(x^2\\) graphs at that point.\nA derivative measures how a function’s output changes in response to a tiny nudge in its input. Let’s nudge the input \\(x\\) by a small amount, \\(dx\\). The resulting change in the output, \\(df\\), will be the sum of the changes from each part of the function.\n\nThe change in \\(\\sin(x)\\) is \\(d(\\sin(x))\\).\nThe change in \\(x^2\\) is \\(d(x^2)\\).\n\nTherefore, the total change is \\(df = d(\\sin(x)) + d(x^2)\\). To find the derivative, we look at the ratio \\(df/dx\\): \\[ \\frac{df}{dx} = \\frac{d(\\sin(x)) + d(x^2)}{dx} = \\frac{d}{dx}(\\sin(x)) + \\frac{d}{dx}(x^2) \\] Since we know the individual derivatives, we can complete the calculation: \\[ \\frac{d}{dx}(\\sin(x) + x^2) = \\cos(x) + 2x \\] \n\n\n\n1.4 The Product Rule\n\n1.4.1 The Rule\nThe Product Rule is used to find the derivative of a product of two functions. Unlike the Sum Rule, it’s not as simple as just multiplying the derivatives. The rule is expressed by the mnemonic: “Left d(Right) + Right d(Left)”.\n\n\n1.4.2 Intuition\nTo visualize this, consider the function \\(f(x) = \\sin(x) \\cdot x^2\\). We can think of this function as representing the area of a rectangle whose side lengths are \\(\\sin(x)\\) and \\(x^2\\).\nWhen we nudge the input \\(x\\) by a small amount \\(dx\\), both side lengths of the rectangle change. - The side \\(\\sin(x)\\) changes by a small amount \\(d(\\sin(x))\\). - The side \\(x^2\\) changes by a small amount \\(d(x^2)\\).\nThe total change in area, \\(df\\), is the sum of the areas of the three new slivers that are added to the rectangle: 1. A thin rectangle on the right side with area: \\(x^2 \\cdot d(\\sin(x))\\) 2. A thin rectangle on the bottom with area: \\(\\sin(x) \\cdot d(x^2)\\) 3. A tiny corner rectangle with area: \\(d(\\sin(x)) \\cdot d(x^2)\\)\nThe total change in area is \\(df = x^2 \\cdot d(\\sin(x)) + \\sin(x) \\cdot d(x^2) + d(\\sin(x)) \\cdot d(x^2)\\).\nThe third term, the corner rectangle, is the product of two very small quantities. Since \\(d(\\sin(x))\\) is proportional to \\(dx\\) and \\(d(x^2)\\) is also proportional to \\(dx\\), their product is proportional to \\((dx)^2\\), which is infinitesimally small and can be ignored.\nSo, the meaningful change in area is: \\[ df \\approx x^2 \\cdot d(\\sin(x)) + \\sin(x) \\cdot d(x^2) \\] Dividing by \\(dx\\) gives us the derivative: \\[ \\frac{df}{dx} = x^2 \\frac{d}{dx}(\\sin(x)) + \\sin(x) \\frac{d}{dx}(x^2) = x^2\\cos(x) + \\sin(x)(2x) \\] \n\n\n\n1.5 The Chain Rule\n\n1.5.1 The Rule\nThe Chain Rule is used for differentiating composite functions—that is, a function inside another function, like \\(f(x) = \\sin(x^2)\\). The rule states that you take the derivative of the outer function (leaving the inner function as its input) and then multiply by the derivative of the inner function.\n\n\n1.5.2 Intuition\nLet’s visualize the function \\(f(x) = \\sin(x^2)\\) as a three-step process using number lines. 1. Line 1: An input value \\(x\\). 2. Line 2: The function \\(h(x) = x^2\\) maps the value from Line 1 to a new value, \\(h\\), on Line 2. 3. Line 3: The function \\(g(h) = \\sin(h)\\) maps the value from Line 2 to the final output, \\(\\sin(x^2)\\), on Line 3.\nWe want to find how a tiny change, \\(dx\\), on Line 1 affects the final value on Line 3. - A change \\(dx\\) on Line 1 causes a change \\(d(x^2)\\) on Line 2. From the definition of a derivative, we know \\(d(x^2) \\approx 2x \\cdot dx\\). Let’s call this change \\(dh\\). - This change \\(dh\\) on Line 2 causes a change \\(d(\\sin(h))\\) on Line 3. Again, from the definition of a derivative, this change is \\(d(\\sin(h)) \\approx \\cos(h) \\cdot dh\\).\nNow, we substitute everything back in terms of \\(x\\): - The change on Line 3 is: \\(d(\\sin(x^2))\\). - This is equal to \\(\\cos(h) \\cdot dh\\), which becomes \\(\\cos(x^2) \\cdot d(x^2)\\). - Substituting \\(d(x^2)\\) gives: \\(\\cos(x^2) \\cdot (2x \\cdot dx)\\).\nSo, the total change in the output is \\(d(\\sin(x^2)) = \\cos(x^2) \\cdot 2x \\cdot dx\\). To get the derivative, we divide by \\(dx\\): \\[ \\frac{d}{dx}\\sin(x^2) = \\cos(x^2) \\cdot 2x \\] This process perfectly illustrates the Chain Rule: the derivative of the outer function, \\(\\cos(\\cdot)\\), evaluated at the inner function, \\(x^2\\), multiplied by the derivative of the inner function, \\(2x\\). \n\n\n\n\n2. Definitions\n\nSum Rule: A differentiation rule stating that the derivative of a sum of two or more functions is the sum of their individual derivatives.\nProduct Rule: A differentiation rule for finding the derivative of the product of two functions. It is given by the formula \\(d/dx(g(x)h(x)) = g(x)h'(x) + h(x)g'(x)\\).\nChain Rule: A differentiation rule for finding the derivative of a composite function. It is given by the formula \\(d/dx(g(h(x))) = g'(h(x)) \\cdot h'(x)\\).\nFunction Composition: The process of applying one function to the result of another. The composition of \\(g\\) and \\(h\\) is denoted as \\(g(h(x))\\).\n\n\n\n3. Formulas\n\nSum Rule: \\[ \\frac{d}{dx}(g(x) + h(x)) = \\frac{dg}{dx} + \\frac{dh}{dx} \\]\nProduct Rule: \\[ \\frac{d}{dx}(g(x)h(x)) = g(x)\\frac{dh}{dx} + h(x)\\frac{dg}{dx} \\]\nChain Rule (Leibniz Notation): \\[ \\frac{dg}{dx} = \\frac{dg}{dh} \\cdot \\frac{dh}{dx} \\]\nChain Rule (Prime Notation): \\[ \\frac{d}{dx}g(h(x)) = g'(h(x)) \\cdot h'(x) \\]\n\n\n\n4. Mistakes\n\nConfusing the Product Rule with the Sum Rule: A common mistake is to assume the derivative of a product is the product of the derivatives, i.e., \\((gh)' = g'h'\\). Why it’s wrong: The product rule, \\(g'h + gh'\\), accounts for how a change in each function affects the overall product, which involves two terms, not one.\nForgetting the Inner Derivative in the Chain Rule: Applying the derivative to the outer function but forgetting to multiply by the derivative of the inner function. Why it’s wrong: The chain rule links the rate of change of the outer function to the rate of change of the inner function. Omitting the inner derivative ignores this crucial link.\nIncorrectly Evaluating the Outer Derivative: When applying the chain rule to \\(g(h(x))\\), evaluating the derivative of the outer function at \\(x\\) instead of at \\(h(x)\\). For example, for \\(\\sin(x^2)\\), writing \\(\\cos(x) \\cdot 2x\\). Why it’s wrong: The rate of change of the outer function depends on the value of its immediate input, which is \\(h(x)\\), not the original variable \\(x\\).\nApplying the Sum Rule for Products: Incorrectly applying the simple addition rule to a product of functions. Why it’s wrong: Addition and multiplication are fundamentally different operations, and their differentiation rules reflect this.\n\n\n\n5. Examples\n\n5.1. Sum Rule Example\nQuestion: Find the derivative of \\(f(x) = x^4 + \\cos(x)\\).\n\n\nClick to see the solution\n\n\nApply the Sum Rule: The derivative of the sum is the sum of the derivatives. \\[ \\frac{df}{dx} = \\frac{d}{dx}(x^4) + \\frac{d}{dx}(\\cos(x)) \\]\nDifferentiate each term:\n\nThe derivative of \\(x^4\\) is \\(4x^3\\).\nThe derivative of \\(\\cos(x)\\) is \\(-\\sin(x)\\).\n\nCombine the results: \\[ \\frac{df}{dx} = 4x^3 - \\sin(x) \\]\n\nAnswer: \\(f'(x) = 4x^3 - \\sin(x)\\).\n\n\n\n5.2. Product Rule Example\nQuestion: Find the derivative of \\(f(x) = x^2 \\sin(x)\\).\n\n\nClick to see the solution\n\n\nIdentify Left and Right Functions: Let Left = \\(x^2\\) and Right = \\(\\sin(x)\\).\nFind their derivatives:\n\n\\(d(\\text{Left})/dx = 2x\\)\n\\(d(\\text{Right})/dx = \\cos(x)\\)\n\nApply the Product Rule Formula: Left \\(\\cdot\\) d(Right) + Right \\(\\cdot\\) d(Left) \\[ \\frac{df}{dx} = (x^2)(\\cos(x)) + (\\sin(x))(2x) \\]\n\nAnswer: \\(f'(x) = x^2\\cos(x) + 2x\\sin(x)\\).\n\n\n\n5.3. Chain Rule Example\nQuestion: Find the derivative of \\(f(x) = (x^3 + 2x)^5\\).\n\n\nClick to see the solution\n\n\nIdentify Outer and Inner Functions:\n\nOuter function: \\(g(h) = h^5\\)\nInner function: \\(h(x) = x^3 + 2x\\)\n\nFind their derivatives:\n\n\\(g'(h) = 5h^4\\)\n\\(h'(x) = 3x^2 + 2\\)\n\nApply the Chain Rule Formula: \\(g'(h(x)) \\cdot h'(x)\\) \\[ \\frac{df}{dx} = 5(x^3 + 2x)^4 \\cdot (3x^2 + 2) \\]\n\nAnswer: \\(f'(x) = 5(3x^2 + 2)(x^3 + 2x)^4\\).\n\n\n\n5.4. Combination of Rules (1)\nQuestion: Differentiate \\(f(x) = e^x(\\sin(x) + x^2)\\).\n\n\nClick to see the solution\n\n\nIdentify the main operation: This is a product, so we use the Product Rule. Let Left = \\(e^x\\) and Right = \\((\\sin(x) + x^2)\\).\nFind their derivatives:\n\n\\(d(\\text{Left})/dx = e^x\\)\nFor the right side, we use the Sum Rule: \\(d(\\text{Right})/dx = \\cos(x) + 2x\\).\n\nApply the Product Rule Formula: Left \\(\\cdot\\) d(Right) + Right \\(\\cdot\\) d(Left) \\[ \\frac{df}{dx} = e^x(\\cos(x) + 2x) + (\\sin(x) + x^2)e^x \\]\nSimplify (optional): \\[ \\frac{df}{dx} = e^x(\\cos(x) + 2x + \\sin(x) + x^2) \\]\n\nAnswer: \\(f'(x) = e^x(\\cos(x) + \\sin(x) + x^2 + 2x)\\).\n\n\n\n5.5. Combination of Rules (2)\nQuestion: Differentiate \\(f(x) = \\cos(x^4)\\).\n\n\nClick to see the solution\n\n\nIdentify Outer and Inner Functions: This is a composition.\n\nOuter function: \\(g(h) = \\cos(h)\\)\nInner function: \\(h(x) = x^4\\)\n\nFind their derivatives:\n\n\\(g'(h) = -\\sin(h)\\)\n\\(h'(x) = 4x^3\\)\n\nApply the Chain Rule Formula: \\(g'(h(x)) \\cdot h'(x)\\) \\[ \\frac{df}{dx} = -\\sin(x^4) \\cdot (4x^3) \\]\n\nAnswer: \\(f'(x) = -4x^3\\sin(x^4)\\).\n\n\n\n5.6. Nested Chain Rule\nQuestion: Differentiate \\(f(x) = e^{\\sin(x^2)}\\).\n\n\nClick to see the solution\n\n\nIdentify the outermost layer: The outer function is \\(e^{(\\cdot)}\\). The inner function is \\(\\sin(x^2)\\).\nApply the Chain Rule: \\[ \\frac{df}{dx} = e^{\\sin(x^2)} \\cdot \\frac{d}{dx}(\\sin(x^2)) \\]\nDifferentiate the inner part: Now we need the derivative of \\(\\sin(x^2)\\). This requires another application of the chain rule.\n\nOuter function: \\(\\sin(\\cdot)\\)\nInner function: \\(x^2\\)\nDerivative: \\(\\cos(x^2) \\cdot 2x\\)\n\nCombine everything: \\[ \\frac{df}{dx} = e^{\\sin(x^2)} \\cdot (\\cos(x^2) \\cdot 2x) \\]\n\nAnswer: \\(f'(x) = 2x \\cos(x^2) e^{\\sin(x^2)}\\).\n\n\n\n5.7. Product and Chain Rule Combined\nQuestion: Differentiate \\(f(x) = x^3 \\tan(5x)\\).\n\n\nClick to see the solution\n\n\nIdentify the main operation: This is a product, so we start with the Product Rule. Let Left = \\(x^3\\) and Right = \\(\\tan(5x)\\).\nFind their derivatives:\n\n\\(d(\\text{Left})/dx = 3x^2\\)\nTo find the derivative of \\(\\tan(5x)\\), we use the Chain Rule:\n\nOuter: \\(\\tan(\\cdot)\\), Derivative: \\(\\sec^2(\\cdot)\\)\nInner: \\(5x\\), Derivative: \\(5\\)\n\\(d(\\text{Right})/dx = \\sec^2(5x) \\cdot 5 = 5\\sec^2(5x)\\).\n\n\nApply the Product Rule Formula: Left \\(\\cdot\\) d(Right) + Right \\(\\cdot\\) d(Left) \\[ \\frac{df}{dx} = (x^3)(5\\sec^2(5x)) + (\\tan(5x))(3x^2) \\]\n\nAnswer: \\(f'(x) = 5x^3\\sec^2(5x) + 3x^2\\tan(5x)\\).",
    "crumbs": [
      "Essence of calculus",
      "4. Sum Rule, Product Rule, Chain Rule"
    ]
  },
  {
    "objectID": "Essence of calculus/vid_10.html",
    "href": "Essence of calculus/vid_10.html",
    "title": "10. Higher-Order Derivatives, Taylor Series, Acceleration, Jerk",
    "section": "",
    "text": "1. Summary\n\n1.1 Introduction to Higher-Order Derivatives\nA higher-order derivative is the result of repeatedly taking the derivative of a function. While the first derivative, df/dx, describes the rate of change of a function f(x), the second derivative describes the rate of change of the first derivative, the third derivative describes the rate of change of the second, and so on. These concepts are fundamental for understanding more complex behaviors of functions and are crucial in many areas of science and engineering.\n\n\n1.2 The Second Derivative\nThe second derivative, denoted as d²f/dx², is the derivative of the first derivative. It measures how the slope of the function’s graph is changing.\n\n1.2.1 Graphical Interpretation: Concavity\nThe second derivative describes the concavity or curvature of a function’s graph.  - Positive Second Derivative (d²f/dx² &gt; 0): If the second derivative is positive in an interval, the slope of the function is increasing. This means the graph is bending upwards, a shape known as concave up. Imagine a parabola that opens upwards (like a smile). - Negative Second Derivative (d²f/dx² &lt; 0): If the second derivative is negative, the slope is decreasing. The graph is bending downwards, which is called concave down. Think of a parabola opening downwards (like a frown). - Zero Second Derivative (d²f/dx² = 0): If the second derivative is zero, the graph has no curvature at that point. This often occurs at an inflection point, where the concavity changes (e.g., from up to down), or if the function is a straight line.\n\n\n1.2.2 Physical Interpretation: Acceleration\nIn physics, higher-order derivatives are used to describe motion. If a function s(t) represents the position (displacement) of an object over time t: - The first derivative, ds/dt, represents the object’s velocity (how fast the position is changing). - The second derivative, d²s/dt², represents the object’s acceleration (how fast the velocity is changing). A positive acceleration means the object is speeding up in the positive direction (or slowing down in the negative direction), while negative acceleration (deceleration) means it’s slowing down in the positive direction (or speeding up in the negative direction).\n\n\n\n1.3 The Third Derivative and Beyond\nWe can continue taking derivatives beyond the second. - The third derivative, d³s/dt³, is called jerk. It represents the rate of change of acceleration. A non-zero jerk means the acceleration is changing, which you might feel as a sudden jolt or “jerk” in a vehicle when the driver abruptly changes how they are pressing the gas or brake pedal. - Derivatives of the fourth order and higher also exist (sometimes called “snap,” “crackle,” and “pop”), though they are less commonly used in introductory physics.\n\n\n1.4 Notation for Higher-Order Derivatives\nThe notation for higher-order derivatives is an extension of Leibniz’s notation for the first derivative. The second derivative is the derivative of the first derivative: \\[ \\frac{d}{dx}\\left(\\frac{df}{dx}\\right) \\] This is cumbersome, so it’s abbreviated. Conceptually, we are looking at the change in the change of f, which can be written as d(df). This change occurs over an interval dx, and it turns out to be proportional to (dx)². The ratio is therefore: \\[ \\frac{d(df)}{(dx)^2} \\] For notational simplicity, this is written as: \\[ \\frac{d^2f}{dx^2} \\] The superscripts on d and x indicate the order of the derivative. For the nth derivative, the notation is dⁿf/dxⁿ.\n\n\n1.5 Application in Taylor Series\nHigher-order derivatives are essential for approximating complex functions with simpler polynomial functions. This technique, known as Taylor series, uses the value of a function and all its derivatives at a single point to construct a polynomial that closely matches the function around that point. Each term in the series uses a successively higher-order derivative.\n\n\n\n2. Definitions\n\nHigher-Order Derivative: A derivative of a function that is of an order higher than the first, obtained by repeatedly differentiating.\nSecond Derivative: The derivative of the first derivative of a function. It measures the rate at which the function’s slope changes.\nConcavity: The direction in which the graph of a function is curved. A graph is concave up if it bends upwards and concave down if it bends downwards.\nAcceleration: In the context of motion, the rate of change of velocity with respect to time. It is the second derivative of the position function.\nJerk: The rate of change of acceleration with respect to time. It is the third derivative of the position function.\n\n\n\n3. Formulas\n\nFirst Derivative: df/dx\nSecond Derivative: d²f/dx²\nThird Derivative: d³f/dx³\nnth Derivative: dⁿf/dxⁿ\nVelocity: \\(v(t) = \\frac{ds}{dt}\\)\nAcceleration: \\(a(t) = \\frac{dv}{dt} = \\frac{d^2s}{dt^2}\\)\nJerk: \\(j(t) = \\frac{da}{dt} = \\frac{d^3s}{dt^3}\\)\n\n\n\n4. Mistakes\n\nConfusing the second derivative with the square of the first derivative: The expression d²f/dx² represents the second derivative, not (df/dx)². Why it’s wrong: The first measures the rate of change of the slope (concavity), while the second is the square of the slope itself. They are fundamentally different quantities. For example, for \\(f(x) = x^2\\), the second derivative is \\(2\\), while the square of the first derivative is \\((2x)^2 = 4x^2\\).\nAssuming a zero second derivative implies a local maximum or minimum: A zero second derivative at a point only indicates a possible change in concavity (an inflection point). Why it’s wrong: The second derivative test is inconclusive when f''(x) = 0. For example, \\(f(x) = x^3\\) has f''(0) = 0, but \\(x=0\\) is neither a maximum nor a minimum.\nMisinterpreting the notation d²f/dx² as a fraction: The notation d/dx should be thought of as an operator acting on the function f. Why it’s wrong: While the notation looks like a fraction, treating the d and x terms as separate algebraic quantities can be misleading, especially with the placement of the superscripts ². It’s a convention representing the application of the differential operator twice.\n\n\n\n5. Examples\n\n5.1 Find the first three derivatives of a polynomial\nQuestion: Given the function \\(f(x) = 2x^4 - 3x^3 + 5x^2 - x + 10\\), find \\(f'(x)\\), \\(f''(x)\\), and \\(f'''(x)\\).\n\n\nClick to see the solution\n\n\nFirst Derivative: Apply the power rule to each term. \\[ f'(x) = \\frac{d}{dx}(2x^4 - 3x^3 + 5x^2 - x + 10) = 8x^3 - 9x^2 + 10x - 1 \\]\nSecond Derivative: Differentiate the first derivative. \\[ f''(x) = \\frac{d}{dx}(8x^3 - 9x^2 + 10x - 1) = 24x^2 - 18x + 10 \\]\nThird Derivative: Differentiate the second derivative. \\[ f'''(x) = \\frac{d}{dx}(24x^2 - 18x + 10) = 48x - 18 \\]\n\nAnswer: \\(f'(x) = 8x^3 - 9x^2 + 10x - 1\\) \\(f''(x) = 24x^2 - 18x + 10\\) \\(f'''(x) = 48x - 18\\)\n\n\n\n5.2 Determine Concavity\nQuestion: Determine the intervals where the function \\(f(x) = x^3 - 6x^2 + 5\\) is concave up and concave down.\n\n\nClick to see the solution\n\n\nFind the second derivative:\n\n\\(f'(x) = 3x^2 - 12x\\)\n\\(f''(x) = 6x - 12\\)\n\nFind where the second derivative is zero: This is a potential inflection point where concavity might change. \\[ 6x - 12 = 0 \\implies 6x = 12 \\implies x = 2 \\]\nTest intervals around the point \\(x=2\\):\n\nFor \\(x &lt; 2\\) (e.g., \\(x=0\\)): \\(f''(0) = 6(0) - 12 = -12\\). Since \\(f''(x) &lt; 0\\), the function is concave down.\nFor \\(x &gt; 2\\) (e.g., \\(x=3\\)): \\(f''(3) = 6(3) - 12 = 6\\). Since \\(f''(x) &gt; 0\\), the function is concave up.\n\n\n\nAnswer: The function is concave down on the interval \\((-\\infty, 2)\\) and concave up on the interval \\((2, \\infty)\\).\n\n\n\n5.3 Calculate Acceleration from Position\nQuestion: The position of a particle is given by the function \\(s(t) = t^3 - 3t^2 + 12\\) for \\(t \\ge 0\\), where s is in meters and t is in seconds. Find the acceleration of the particle at \\(t = 3\\) seconds.\n\n\nClick to see the solution\n\n\nFind the velocity function, \\(v(t)\\), by taking the first derivative of \\(s(t)\\): \\[ v(t) = s'(t) = 3t^2 - 6t \\]\nFind the acceleration function, \\(a(t)\\), by taking the derivative of \\(v(t)\\): \\[ a(t) = v'(t) = s''(t) = 6t - 6 \\]\nEvaluate the acceleration at \\(t=3\\): \\[ a(3) = 6(3) - 6 = 18 - 6 = 12 \\]\n\nAnswer: The acceleration of the particle at \\(t=3\\) seconds is \\(12 \\text{ m/s}^2\\).\n\n\n\n5.4 Calculate Jerk from Position\nQuestion: Using the same position function from the previous example, \\(s(t) = t^3 - 3t^2 + 12\\), find the jerk of the particle.\n\n\nClick to see the solution\n\n\nRecall the acceleration function, \\(a(t)\\): \\[ a(t) = 6t - 6 \\]\nFind the jerk function, \\(j(t)\\), by taking the derivative of \\(a(t)\\): \\[ j(t) = a'(t) = s'''(t) = \\frac{d}{dt}(6t - 6) = 6 \\]\n\nAnswer: The jerk is constant and equal to \\(6 \\text{ m/s}^3\\). This means the rate of change of acceleration is constant.\n\n\n\n5.5 Second Derivative of a Trigonometric Function\nQuestion: What is the second derivative of \\(f(x) = \\cos(x)\\)?\n\n\nClick to see the solution\n\n\nFind the first derivative: The derivative of \\(\\cos(x)\\) is \\(-\\sin(x)\\). \\[ f'(x) = -\\sin(x) \\]\nFind the second derivative: The derivative of \\(-\\sin(x)\\) is \\(-\\cos(x)\\). \\[ f''(x) = \\frac{d}{dx}(-\\sin(x)) = -\\cos(x) \\]\n\nAnswer: The second derivative of \\(\\cos(x)\\) is \\(-\\cos(x)\\).\n\n\n\n5.6 Finding a Function with a Given Second Derivative\nQuestion: Find a function \\(f(x)\\) whose second derivative is \\(f''(x) = 12x\\).\n\n\nClick to see the solution\n\n\nFind the first derivative by integrating the second derivative: \\[ f'(x) = \\int 12x \\,dx = 6x^2 + C_1 \\] where \\(C_1\\) is an arbitrary constant of integration.\nFind the function \\(f(x)\\) by integrating the first derivative: \\[ f(x) = \\int (6x^2 + C_1) \\,dx = 2x^3 + C_1x + C_2 \\] where \\(C_2\\) is another arbitrary constant of integration.\n\nAnswer: One possible function is \\(f(x) = 2x^3\\). A general solution is \\(f(x) = 2x^3 + C_1x + C_2\\) for any constants \\(C_1\\) and \\(C_2\\).\n\n\n\n5.7 Applying the Second Derivative Test\nQuestion: Use the second derivative test to classify the critical point of \\(f(x) = x^2 - 4x + 1\\).\n\n\nClick to see the solution\n\n\nFind the critical points by setting the first derivative to zero: \\[ f'(x) = 2x - 4 \\] \\[ 2x - 4 = 0 \\implies x = 2 \\] The only critical point is at \\(x = 2\\).\nFind the second derivative: \\[ f''(x) = 2 \\]\nEvaluate the second derivative at the critical point: \\[ f''(2) = 2 \\]\nInterpret the result: Since \\(f''(2) = 2 &gt; 0\\), the function is concave up at the critical point. Therefore, the critical point is a local minimum.  Answer: The critical point at \\(x=2\\) is a local minimum.",
    "crumbs": [
      "Essence of calculus",
      "10. Higher-Order Derivatives, Taylor Series, Acceleration, Jerk"
    ]
  },
  {
    "objectID": "Essence of linear algebra/vid_9.html",
    "href": "Essence of linear algebra/vid_9.html",
    "title": "9. Dot Product, Duality",
    "section": "",
    "text": "1. Summary\n\n1.1 Introduction to the Dot Product\nThe dot product is a fundamental operation in linear algebra that takes two vectors and returns a single scalar (a number). Traditionally, it is one of the first topics taught in a linear algebra course. However, its true significance and the connection between its numerical and geometric interpretations are best understood through the lens of linear transformations. This is why some approaches, like the one in this series, introduce it after concepts like matrices and transformations have been established.\n\n\n1.2 The Standard View\nThere are two primary ways to understand the dot product: numerically and geometrically.\n\n1.2.1 Numerical Calculation\nThe most straightforward way to compute the dot product of two vectors is to multiply their corresponding components and then add the results. For two vectors \\(\\vec{v}\\) and \\(\\vec{w}\\) of the same dimension, this is calculated as: \\[ \\vec{v} \\cdot \\vec{w} = v_1 w_1 + v_2 w_2 + \\dots + v_n w_n \\] For example, the dot product of \\(\\begin{pmatrix} 2 \\\\ 7 \\\\ 1 \\end{pmatrix}\\) and \\(\\begin{pmatrix} 8 \\\\ 2 \\\\ 8 \\end{pmatrix}\\) is \\((2 \\cdot 8) + (7 \\cdot 2) + (1 \\cdot 8) = 16 + 14 + 8 = 38\\).\n\n\n1.2.2 Geometric Interpretation\nThe geometric view of the dot product relates to the concept of projection. The dot product of two vectors, \\(\\vec{v}\\) and \\(\\vec{w}\\), is the length of the projection of \\(\\vec{w}\\) onto \\(\\vec{v}\\), multiplied by the length of \\(\\vec{v}\\). \\[ \\vec{v} \\cdot \\vec{w} = (\\text{Length of projected } \\vec{w}) \\times (\\text{Length of } \\vec{v}) \\]  This interpretation provides insight into the relationship between the vectors:\n\nPositive Dot Product ($ &gt; 0 $): The vectors point in generally the same direction. The angle between them is less than 90 degrees.\nZero Dot Product ($ = 0 $): The vectors are perpendicular (orthogonal). The projection of one onto the other has zero length.\nNegative Dot Product ($ &lt; 0 $): The vectors point in generally opposite directions. The angle between them is greater than 90 degrees. \n\n\n\n1.2.3 Symmetry of the Dot Product\nA key property of the dot product is that the order of the vectors does not matter: \\(\\vec{v} \\cdot \\vec{w} = \\vec{w} \\cdot \\vec{v}\\). This is obvious from the numerical calculation, but less so from the geometric projection definition. Projecting \\(\\vec{w}\\) onto \\(\\vec{v}\\) and multiplying by \\(||\\vec{v}||\\) feels different from projecting \\(\\vec{v}\\) onto \\(\\vec{w}\\) and multiplying by \\(||\\vec{w}||\\). The reason they are equivalent stems from the linearity of the operation.\n\n\n\n1.3 Duality: A Deeper Connection\nThe true reason for the connection between the numerical and geometric views of the dot product lies in a concept called duality.\n\n1.3.1 Linear Transformations to One Dimension\nA linear transformation that maps a 2D vector to a 1D number can be represented by a \\(1 \\times 2\\) matrix. This transformation is completely determined by where the basis vectors \\(\\hat{i}\\) and \\(\\hat{j}\\) land on the number line. For instance, if a transformation \\(L\\) maps \\(\\hat{i}\\) to 2 and \\(\\hat{j}\\) to 1, its matrix is \\(\\begin{pmatrix} 2 & 1 \\end{pmatrix}\\). Applying this transformation to a vector \\(\\begin{pmatrix} x \\\\ y \\end{pmatrix}\\) is done through matrix-vector multiplication: \\[ \\begin{pmatrix} 2 & 1 \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\end{pmatrix} = 2x + 1y \\]\n\n\n1.3.2 The Dual Vector\nFor any linear transformation from a vector space to the number line, there is a unique vector in that original space, called the dual vector, that is associated with it. Applying the transformation is equivalent to taking the dot product with this dual vector. In the example above, the dual vector is \\(\\begin{pmatrix} 2 \\\\ 1 \\end{pmatrix}\\).\n\n\n1.3.3 The Projection Transformation\nThe act of projecting 2D vectors onto a specific line (defined by a unit vector \\(\\hat{u}\\)) is a linear transformation. Its output is the length of the projected vector, which is a number. Therefore, this projection must have an associated dual vector.\nThe profound connection is this: the dual vector of this projection transformation is the unit vector \\(\\hat{u}\\) itself. The coordinates of \\(\\hat{u}\\) give the entries of the \\(1 \\times 2\\) matrix for the transformation. This means that projecting a vector \\(\\vec{v}\\) onto the line defined by \\(\\hat{u}\\) is the same as taking the dot product \\(\\hat{u} \\cdot \\vec{v}\\). This is the bridge that connects the two interpretations of the dot product.\n\n\n\n\n2. Definitions\n\nDot Product (Scalar Product): An operation that takes two equal-length sequences of numbers (usually coordinate vectors) and returns a single number. Geometrically, it is the product of the magnitudes of the two vectors and the cosine of the angle between them.\nVector Projection: The vector component of one vector that lies in the direction of another vector. The length of this projection is a scalar value representing how much of the first vector points along the second.\nDuality: A principle in mathematics where there is a natural-but-surprising correspondence between two different types of mathematical objects or concepts. In linear algebra, it often refers to the correspondence between vectors and linear maps from a vector space to its scalar field (e.g., the number line).\nDual Vector: For every linear transformation from a vector space to the number line, there is a unique corresponding vector in that space, called its dual vector. Applying the transformation is equivalent to taking the dot product with this dual vector.\n\n\n\n3. Formulas\n\nNumerical Dot Product (2D): For \\(\\vec{v} = \\begin{pmatrix} v_x \\\\ v_y \\end{pmatrix}\\) and \\(\\vec{w} = \\begin{pmatrix} w_x \\\\ w_y \\end{pmatrix}\\), the dot product is \\[ \\vec{v} \\cdot \\vec{w} = v_x w_x + v_y w_y \\]\nGeometric Dot Product: \\[ \\vec{v} \\cdot \\vec{w} = ||\\vec{v}|| \\cdot ||\\vec{w}|| \\cos(\\theta) \\] where \\(\\theta\\) is the angle between the vectors.\nProjection and Dot Product: \\[ \\vec{v} \\cdot \\vec{w} = ||\\text{proj}_{\\vec{v}}(\\vec{w})|| \\cdot ||\\vec{v}|| \\]\nTransformation Matrix (2D to 1D): A linear map \\(L\\) from 2D space to the number line is represented by a \\(1 \\times 2\\) matrix whose columns are the numbers where the basis vectors \\(\\hat{i}\\) and \\(\\hat{j}\\) land. \\[ \\text{Matrix for } L = \\begin{pmatrix} L(\\hat{i}) & L(\\hat{j}) \\end{pmatrix} \\]\n\n\n\n4. Mistakes\n\nConfusing Dot Product with Scalar Multiplication: The dot product of two vectors results in a scalar (a single number), not another vector. Scalar multiplication, on the other hand, scales a vector, resulting in a new vector.\nThinking the Dot Product is Only a Numerical Trick: Failing to understand the geometric meaning of projection leads to missing its utility in physics, computer graphics, and understanding orthogonality.\nAssuming the Geometric Definition is Symmetric: Projecting \\(\\vec{v}\\) onto \\(\\vec{w}\\) is geometrically different from projecting \\(\\vec{w}\\) onto \\(\\vec{v}\\). The final scalar result is the same, but the process is asymmetric. The symmetry is a consequence of linearity and duality.\nIncorrectly Calculating the Length of Projection: The dot product \\(\\vec{v} \\cdot \\vec{w}\\) is not the length of the projection of \\(\\vec{w}\\) onto \\(\\vec{v}\\). It is the length of that projection multiplied by the length of \\(\\vec{v}\\).\n\n\n\n5. Examples\n\n5.1. Numerical Dot Product (2D)\nQuestion: Calculate the dot product of \\(\\vec{a} = \\begin{pmatrix} 3 \\\\ -2 \\end{pmatrix}\\) and \\(\\vec{b} = \\begin{pmatrix} 4 \\\\ 1 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nMultiply corresponding components: Multiply the x-components and the y-components.\n\n\\(3 \\times 4 = 12\\)\n\\(-2 \\times 1 = -2\\)\n\nSum the products:\n\n\\(12 + (-2) = 10\\)\n\n\nAnswer: \\(\\vec{a} \\cdot \\vec{b} = 10\\).\n\n\n\n5.2. Numerical Dot Product (3D)\nQuestion: Find the dot product of \\(\\vec{u} = \\begin{pmatrix} 1 \\\\ 0 \\\\ 5 \\end{pmatrix}\\) and \\(\\vec{v} = \\begin{pmatrix} -2 \\\\ 8 \\\\ -1 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nMultiply corresponding components:\n\n\\(1 \\times -2 = -2\\)\n\\(0 \\times 8 = 0\\)\n\\(5 \\times -1 = -5\\)\n\nSum the products:\n\n\\(-2 + 0 + (-5) = -7\\)\n\n\nAnswer: \\(\\vec{u} \\cdot \\vec{v} = -7\\).\n\n\n\n5.3. Angle Interpretation\nQuestion: Are the vectors \\(\\vec{v} = \\begin{pmatrix} 6 \\\\ -2 \\end{pmatrix}\\) and \\(\\vec{w} = \\begin{pmatrix} 1 \\\\ 3 \\end{pmatrix}\\) pointing in similar, opposite, or perpendicular directions?\n\n\nClick to see the solution\n\n\nCalculate the dot product:\n\n\\(\\vec{v} \\cdot \\vec{w} = (6)(1) + (-2)(3) = 6 - 6 = 0\\)\n\nInterpret the result: A dot product of zero means the vectors are perpendicular.\n\nAnswer: The vectors are perpendicular.\n\n\n\n5.4. Finding Projection Length\nQuestion: Vector \\(\\vec{a}\\) has a length of 5. The dot product \\(\\vec{a} \\cdot \\vec{b} = 20\\). What is the length of the projection of \\(\\vec{b}\\) onto \\(\\vec{a}\\)?\n\n\nClick to see the solution\n\n\nRecall the geometric formula:\n\n\\(\\vec{a} \\cdot \\vec{b} = (\\text{Length of projected } \\vec{b}) \\times ||\\vec{a}||\\)\n\nSubstitute the known values:\n\n\\(20 = (\\text{Length of projected } \\vec{b}) \\times 5\\)\n\nSolve for the unknown:\n\nLength of projected \\(\\vec{b} = \\frac{20}{5} = 4\\)\n\n\nAnswer: The length of the projection is 4.\n\n\n\n5.5. Duality: Transformation to Vector\nQuestion: A linear transformation \\(L\\) maps 2D vectors to the number line. It transforms \\(\\hat{i}\\) to \\(-3\\) and \\(\\hat{j}\\) to \\(4\\). What is the dual vector associated with this transformation?\n\n\nClick to see the solution\n\nThe dual vector is the vector whose components are the values that the basis vectors land on.\nAnswer: The dual vector is \\(\\begin{pmatrix} -3 \\\\ 4 \\end{pmatrix}\\). Applying this transformation to any vector \\(\\begin{pmatrix} x \\\\ y \\end{pmatrix}\\) is equivalent to taking the dot product \\(\\begin{pmatrix} -3 \\\\ 4 \\end{pmatrix} \\cdot \\begin{pmatrix} x \\\\ y \\end{pmatrix}\\).\n\n\n\n5.6. Duality: Vector to Transformation\nQuestion: What is the \\(1 \\times 2\\) matrix that represents the linear transformation equivalent to taking the dot product with the vector \\(\\vec{p} = \\begin{pmatrix} 5 \\\\ -1 \\end{pmatrix}\\)?\n\n\nClick to see the solution\n\nThe matrix is formed by the components of the dual vector. In this case, \\(\\vec{p}\\) is the dual vector.\n\nFirst column: The x-component of \\(\\vec{p}\\), which is 5.\nSecond column: The y-component of \\(\\vec{p}\\), which is -1.\n\nAnswer: The transformation matrix is \\(\\begin{pmatrix} 5 & -1 \\end{pmatrix}\\).\n\n\n\n5.7. Non-Unit Vector Projection\nQuestion: Consider the dot product \\(\\vec{v} \\cdot \\vec{w}\\), where \\(\\vec{v} = \\begin{pmatrix} 4 \\\\ 0 \\end{pmatrix}\\). How does this relate to projection?\n\n\nClick to see the solution\n\n\nIdentify the unit vector: The unit vector in the direction of \\(\\vec{v}\\) is \\(\\hat{u} = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\).\nRelate \\(\\vec{v}\\) to \\(\\hat{u}\\): \\(\\vec{v} = 4\\hat{u}\\).\nInterpret the dot product: Taking the dot product with \\(\\vec{v}\\) is the same as projecting a vector onto the line of \\(\\vec{v}\\) (which is the x-axis) and then scaling the result by the length of \\(\\vec{v}\\), which is 4.\n\n\\(\\vec{v} \\cdot \\vec{w} = (4\\hat{u}) \\cdot \\vec{w} = 4(\\hat{u} \\cdot \\vec{w})\\)\n\\(\\hat{u} \\cdot \\vec{w}\\) gives the length of the projection of \\(\\vec{w}\\) onto the x-axis.\n\\(4(\\hat{u} \\cdot \\vec{w})\\) scales that length by 4.\n\n\nAnswer: The dot product with \\(\\begin{pmatrix} 4 \\\\ 0 \\end{pmatrix}\\) first projects a vector onto the x-axis and then scales the length of that projection by 4.",
    "crumbs": [
      "Essence of linear algebra",
      "9. Dot Product, Duality"
    ]
  },
  {
    "objectID": "Essence of linear algebra/vid_1.html",
    "href": "Essence of linear algebra/vid_1.html",
    "title": "1. Vectors, Vector Addition, Scalar Multiplication",
    "section": "",
    "text": "1. Summary\n\n“The introduction of numbers as coordinates is an act of violence.” -Hermann Weyl\n\n\n1.1 What is a Vector?\nThe fundamental building block of linear algebra is the vector. To understand linear algebra, it’s crucial to grasp what a vector is from multiple perspectives, as different fields interpret them in ways that are most useful for their applications. Broadly, there are three key perspectives: that of a physics student, a computer science student, and a mathematician.\n\n1.1.1 The Physics Perspective: Arrows in Space\nFrom a physics standpoint, a vector is best understood as an arrow in space. This arrow possesses two fundamental properties:\n\nLength: Also known as magnitude, this represents the size or quantity the vector describes (e.g., speed, force).\nDirection: This indicates the orientation of the vector in space.\n\nA key concept in this view is that a vector is not tied to a specific location. You can move a vector anywhere in space, and as long as its length and direction remain unchanged, it is considered the same vector. Vectors existing on a flat surface are called two-dimensional vectors, while those in the space we live in are three-dimensional vectors.\n\n\n\n1.1.2 The Computer Science Perspective: Lists of Numbers\nIn computer science and data analysis, a vector is conceptualized as an ordered list of numbers. This perspective is highly practical for organizing and manipulating data.\nFor example, if you were analyzing house prices, you might only care about two features: square footage and price. A specific house could be represented by a two-dimensional vector where the first number is its area and the second is its cost.\n\nA house of 2,600 square feet priced at $300,000 could be represented as the vector \\(\\begin{bmatrix} 2600 \\\\ 300,000 \\end{bmatrix}\\).\n\nIn this context, the order of the numbers is crucial. Reversing the numbers would completely change the meaning of the data. The “dimension” of the vector simply refers to how many numbers are in the list. Here, “vector” is essentially a synonym for “list.”\n\n\n1.1.3 The Mathematician’s Perspective: A Generalization\nA mathematician seeks to generalize both of these ideas. From this abstract viewpoint, a vector can be any object, as long as two fundamental operations can be sensibly applied to it:\n\nVector Addition: Combining two vectors to produce a third vector.\nScalar Multiplication: Multiplying a vector by a number (a scalar) to produce another vector.\n\nEssentially, anything that consistently follows the rules of these two operations can be treated as a vector. This abstract definition allows the principles of linear algebra to be applied to a wide range of concepts, including functions, not just arrows or lists of numbers.\n\n\n\n1.2 Vectors in a Coordinate System\nLinear algebra powerfully bridges the gap between the geometric (physics) and numerical (computer science) perspectives. The most effective way to do this is to think of vectors as arrows originating from a central point, the origin, within a coordinate system.\n\n\nIn a 2D system, we have a horizontal x-axis and a vertical y-axis.\nIn a 3D system, a z-axis is added, perpendicular to both the x and y axes.\n\nWhen a vector’s tail is placed at the origin, its tip points to a unique location. The coordinates of this tip become the numerical representation of the vector. For a 2D vector, its coordinates are a pair of numbers that provide instructions for reaching its tip from the origin:\n\nThe first number indicates movement along the x-axis (positive for right, negative for left).\nThe second number indicates movement along the y-axis (positive for up, negative for down).\n\nBy convention, a vector’s coordinates are written vertically in square brackets, such as \\(\\begin{bmatrix} 3 \\\\ -1 \\end{bmatrix}\\), to distinguish them from the coordinates of a point, which are typically written as \\((3, -1)\\).\n\n\n1.3 Fundamental Vector Operations\nAll of linear algebra is built upon two core operations: vector addition and scalar multiplication.\n\n1.3.1 Vector Addition\n\nGeometric View: To add two vectors, \\(\\vec{v}\\) and \\(\\vec{w}\\), we use the tip-to-tail method. Place the tail of \\(\\vec{w}\\) at the tip of \\(\\vec{v}\\). The resulting sum, \\(\\vec{v} + \\vec{w}\\), is the new vector drawn from the tail of \\(\\vec{v}\\) to the new tip of \\(\\vec{w}\\). This can be thought of as applying one movement after another, with the sum being the overall, direct path from the start to the end.\n\n\n\nNumerical View: The numerical representation is incredibly straightforward. You simply add the corresponding components of the two vectors. \\[\n\\begin{bmatrix} x_1 \\\\ y_1 \\end{bmatrix} + \\begin{bmatrix} x_2 \\\\ y_2 \\end{bmatrix} = \\begin{bmatrix} x_1 + x_2 \\\\ y_1 + y_2 \\end{bmatrix}\n\\]\n\n\n\n1.3.2 Scalar Multiplication\n\nGeometric View: Multiplying a vector by a number (a scalar) is called scaling. This operation stretches, squishes, or reverses the vector without changing its fundamental direction (or simply reversing it).\n\nMultiplying by 2 makes the vector twice as long.\nMultiplying by 1/3 makes it one-third as long.\nMultiplying by a negative number (e.g., -1.8) flips the vector’s direction and then scales its length.\n\n\n\n\nNumerical View: To perform scalar multiplication numerically, you multiply every component in the vector by that scalar. \\[\nc \\begin{bmatrix} x \\\\ y \\end{bmatrix} = \\begin{bmatrix} c \\cdot x \\\\ c \\cdot y \\end{bmatrix}\n\\]\n\n\n\n\n\n2. Definitions\n\nVector: A mathematical object that has both magnitude (length) and direction. It can be represented geometrically as an arrow or numerically as an ordered list of coordinates.\nScalar: A single numerical quantity (like 2, 1/3, or -1.8) that is used to scale vectors. In linear algebra, the term is used to distinguish numbers from vectors.\nOrigin: The zero point (0,0) in a coordinate system where the axes intersect. It serves as the standard starting point (tail) for vectors.\nVector Addition: The operation of combining two vectors. Geometrically, this is visualized by placing the vectors tip-to-tail. Numerically, it is done by adding their corresponding components.\nScalar Multiplication: The operation of multiplying a vector by a scalar. This scales the vector’s length by the scalar’s value and reverses its direction if the scalar is negative.\nCoordinates (of a vector): The set of numbers that describe a vector’s displacement from the origin along each axis.\n\n\n\n3. Formulas\n\nVector Addition: For two vectors \\(\\vec{u} = \\begin{bmatrix} u_x \\\\ u_y \\end{bmatrix}\\) and \\(\\vec{v} = \\begin{bmatrix} v_x \\\\ v_y \\end{bmatrix}\\), their sum is: \\[ \\vec{u} + \\vec{v} = \\begin{bmatrix} u_x + v_x \\\\ u_y + v_y \\end{bmatrix} \\]\nScalar Multiplication: For a scalar c and a vector \\(\\vec{v} = \\begin{bmatrix} v_x \\\\ v_y \\end{bmatrix}\\), the product is: \\[ c\\vec{v} = \\begin{bmatrix} c \\cdot v_x \\\\ c \\cdot v_y \\end{bmatrix} \\]\n\n\n\n4. Mistakes\n\nConfusing Vectors and Points: While a vector rooted at the origin points to a location, a vector itself represents displacement (a journey), not a fixed point (a destination).\nAdding Vectors of Different Dimensions: You cannot add a 2D vector to a 3D vector. Why it’s wrong: The operation relies on adding corresponding components, and the vectors do not have the same number of components.\nIgnoring Component Order: Treating the vector \\(\\begin{bmatrix} 2 \\\\ 1 \\end{bmatrix}\\) as the same as \\(\\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}\\). Why it’s wrong: The order defines the movement along each specific axis; changing it results in a completely different vector.\nAdding a Scalar to a Vector: Trying to compute \\(\\begin{bmatrix} 3 \\\\ 4 \\end{bmatrix} + 5\\). Why it’s wrong: This is an undefined operation. Scalars and vectors are different mathematical objects and cannot be added together. A scalar can only multiply (scale) a vector.\n\n\n\n5. Examples\n\n5.1 Simple Vector Addition\nQuestion: Given \\(\\vec{a} = \\begin{pmatrix} 2 \\\\ 3 \\end{pmatrix}\\) and \\(\\vec{b} = \\begin{pmatrix} 4 \\\\ 1 \\end{pmatrix}\\), find \\(\\vec{a} + \\vec{b}\\).\n\n\nClick to see the solution\n\n\nAdd the x-components: 2 + 4 = 6\nAdd the y-components: 3 + 1 = 4\n\nAnswer: \\(\\vec{a} + \\vec{b} = \\begin{pmatrix} 6 \\\\ 4 \\end{pmatrix}\\)\n\n\n\n5.2 Vector Addition with Negative Components\nQuestion: Given \\(\\vec{u} = \\begin{pmatrix} 5 \\\\ -2 \\end{pmatrix}\\) and \\(\\vec{v} = \\begin{pmatrix} -3 \\\\ 4 \\end{pmatrix}\\), find \\(\\vec{u} + \\vec{v}\\).\n\n\nClick to see the solution\n\n\nAdd the x-components: 5 + (-3) = 2\nAdd the y-components: -2 + 4 = 2\n\nAnswer: \\(\\vec{u} + \\vec{v} = \\begin{pmatrix} 2 \\\\ 2 \\end{pmatrix}\\)\n\n\n\n5.3 Basic Scalar Multiplication\nQuestion: Given \\(\\vec{c} = \\begin{pmatrix} 3 \\\\ 5 \\end{pmatrix}\\), find \\(4\\vec{c}\\).\n\n\nClick to see the solution\n\n\nMultiply the x-component by the scalar: 4 * 3 = 12\nMultiply the y-component by the scalar: 4 * 5 = 20\n\nAnswer: \\(4\\vec{c} = \\begin{pmatrix} 12 \\\\ 20 \\end{pmatrix}\\)\n\n\n\n5.4 Scalar Multiplication with a Negative Scalar\nQuestion: Given \\(\\vec{d} = \\begin{pmatrix} -2 \\\\ 6 \\end{pmatrix}\\), find \\(-3\\vec{d}\\).\n\n\nClick to see the solution\n\n\nMultiply the x-component by the scalar: -3 * -2 = 6\nMultiply the y-component by the scalar: -3 * 6 = -18\n\nAnswer: \\(-3\\vec{d} = \\begin{pmatrix} 6 \\\\ -18 \\end{pmatrix}\\)\n\n\n\n5.5 Scalar Multiplication with a Fraction\nQuestion: Given \\(\\vec{e} = \\begin{pmatrix} 10 \\\\ -4 \\end{pmatrix}\\), find \\(\\frac{1}{2}\\vec{e}\\).\n\n\nClick to see the solution\n\n\nMultiply the x-component by the scalar: (1/2) * 10 = 5\nMultiply the y-component by the scalar: (1/2) * -4 = -2\n\nAnswer: \\(\\frac{1}{2}\\vec{e} = \\begin{pmatrix} 5 \\\\ -2 \\end{pmatrix}\\)\n\n\n\n5.6 Combining Addition and Scalar Multiplication\nQuestion: Given \\(\\vec{u} = \\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix}\\) and \\(\\vec{v} = \\begin{pmatrix} 3 \\\\ -1 \\end{pmatrix}\\), find \\(2\\vec{u} + 3\\vec{v}\\).\n\n\nClick to see the solution\n\n\nFirst, calculate the scalar multiplications:\n\n\\(2\\vec{u} = 2 \\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix} = \\begin{pmatrix} 2 \\\\ 4 \\end{pmatrix}\\)\n\\(3\\vec{v} = 3 \\begin{pmatrix} 3 \\\\ -1 \\end{pmatrix} = \\begin{pmatrix} 9 \\\\ -3 \\end{pmatrix}\\)\n\nNext, add the resulting vectors:\n\n\\(\\begin{pmatrix} 2 \\\\ 4 \\end{pmatrix} + \\begin{pmatrix} 9 \\\\ -3 \\end{pmatrix} = \\begin{pmatrix} 2+9 \\\\ 4-3 \\end{pmatrix} = \\begin{pmatrix} 11 \\\\ 1 \\end{pmatrix}\\)\n\n\nAnswer: \\(2\\vec{u} + 3\\vec{v} = \\begin{pmatrix} 11 \\\\ 1 \\end{pmatrix}\\)\n\n\n\n5.7 Word Problem with Displacements\nQuestion: A robot starts at the origin. It first moves according to vector \\(\\vec{a} = \\begin{pmatrix} 5 \\\\ 2 \\end{pmatrix}\\) (5 units east, 2 units north). It then moves according to vector \\(\\vec{b} = \\begin{pmatrix} -3 \\\\ 4 \\end{pmatrix}\\) (3 units west, 4 units north). What single vector represents the robot’s final position relative to the origin?\n\n\nClick to see the solution\n\nThe total displacement is the sum of the individual displacement vectors. 1. Set up the addition: \\[ \\vec{a} + \\vec{b} = \\begin{pmatrix} 5 \\\\ 2 \\end{pmatrix} + \\begin{pmatrix} -3 \\\\ 4 \\end{pmatrix} \\] 2. Add the corresponding components: \\[ \\begin{pmatrix} 5 + (-3) \\\\ 2 + 4 \\end{pmatrix} = \\begin{pmatrix} 2 \\\\ 6 \\end{pmatrix} \\]\nAnswer: The vector representing the final position is \\(\\begin{pmatrix} 2 \\\\ 6 \\end{pmatrix}\\). This means the robot is 2 units east and 6 units north of its starting point.",
    "crumbs": [
      "Essence of linear algebra",
      "1. Vectors, Vector Addition, Scalar Multiplication"
    ]
  },
  {
    "objectID": "Essence of linear algebra/vid_2.html",
    "href": "Essence of linear algebra/vid_2.html",
    "title": "2. Linear Combinations, Span, and Basis Vectors",
    "section": "",
    "text": "1. Summary\n\n1.1 Vector Coordinates as Scalars\nEach number in a vector’s coordinates can be interpreted as a scalar that stretches or squishes a fundamental vector. For a 2D vector like \\(\\begin{pmatrix} 3 \\\\ -2 \\end{pmatrix}\\), the 3 scales the horizontal base vector, and the -2 scales the vertical base vector.\n\n\n1.2 Basis Vectors\nIn the standard XY coordinate system, there are two special, fundamental vectors called basis vectors: - î: The unit vector in the x-direction, with coordinates \\(\\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\). - ĵ: The unit vector in the y-direction, with coordinates \\(\\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\\).\nAny vector can be expressed as a sum of scaled versions of these basis vectors. For example, the vector \\(\\vec{v} = \\begin{pmatrix} 3 \\\\ -2 \\end{pmatrix}\\) is the sum of î scaled by 3 and ĵ scaled by -2. \\[ \\vec{v} = 3\\hat{\\imath} + (-2)\\hat{\\jmath} \\] This concept is crucial because it allows us to define a coordinate system with different basis vectors, leading to alternative ways of representing the same vector.\n\n\n\n1.3 Linear Combinations\nA linear combination of two vectors, \\(\\vec{v}\\) and \\(\\vec{w}\\), is the operation of scaling each vector by a scalar and then adding them together. The general form is: \\[ a\\vec{v} + b\\vec{w} \\] Here, a and b are scalars. The resulting vector is a new vector created from the combination of the original two.\n\n\n1.4 Span\nThe span of a set of vectors is the set of all possible vectors that can be reached by forming a linear combination of them. When the scalars can be any real number, the span represents all the points you can get to.\n\n\n1.4.1 Span in 2D\n\nTwo non-collinear vectors: If two 2D vectors \\(\\vec{v}\\) and \\(\\vec{w}\\) point in different directions, their span is the entire 2D plane. You can reach any point in the plane by choosing the right scalars a and b.\nTwo collinear vectors: If two 2D vectors lie on the same line (one is a scalar multiple of the other), their span is just that line passing through the origin.\n\n\n\n1.4.2 Span in 3D\n\nTwo non-collinear vectors: The span of two 3D vectors that point in different directions is a flat plane that passes through the origin in 3D space.\nThree vectors:\n\nIf a third vector is added that already lies on the plane spanned by the first two, the span doesn’t change; it’s still just that plane.\nIf the third vector points in a different direction (off the plane), their combined span is the entire 3D space.\n\n\n\n\n\n1.5 Linear Dependence vs. Independence\n\nLinearly Dependent: A set of vectors is linearly dependent if at least one vector is redundant, meaning it can be expressed as a linear combination of the others. This vector does not add a new dimension to the span. For example, if \\(\\vec{u}\\) is in the span of \\(\\vec{v}\\) and \\(\\vec{w}\\), the set \\(\\{\\vec{u}, \\vec{v}, \\vec{w}\\}\\) is linearly dependent.\nLinearly Independent: A set of vectors is linearly independent if no vector in the set can be written as a linear combination of the others. Each vector contributes a new dimension to the span.\n\n\n\n1.6 Basis (Technical Definition)\nThe basis of a vector space is a set of linearly independent vectors that span the entire space. - For 2D space, you need two linearly independent vectors (e.g., î and ĵ). - For 3D space, you need three linearly independent vectors.\n\n\n\n2. Definitions\n\nScalar: A single numerical quantity that scales a vector (stretching, shrinking, or reversing it).\nVector: A mathematical object with both magnitude and direction, often represented as an arrow from an origin.\nBasis Vectors: A set of linearly independent vectors whose span is the entire vector space. The standard basis in 2D is {î, ĵ}.\nLinear Combination: The sum of scaled vectors, such as \\(a\\vec{v} + b\\vec{w}\\), where a and b are scalars. [2]\nSpan: The set of all possible vectors that can be created from a linear combination of a given set of vectors. [4, 8]\nLinearly Dependent: A set of vectors where at least one vector can be expressed as a linear combination of the others. Intuitively, one of the vectors is redundant and doesn’t add to the span.\nLinearly Independent: A set of vectors where no vector can be expressed as a linear combination of the others. Each vector adds a new dimension to the span. [1]\n\n\n\n3. Formulas\n\nLinear Combination of Two Vectors: \\[ a\\vec{v} + b\\vec{w} \\]\nLinear Combination of Three Vectors: \\[ a\\vec{v} + b\\vec{w} + c\\vec{u} \\]\nCondition for Linear Dependence (for three vectors): The set \\(\\{\\vec{u}, \\vec{v}, \\vec{w}\\}\\) is linearly dependent if there exist scalars a and b such that: \\[ \\vec{u} = a\\vec{v} + b\\vec{w} \\]\nCondition for Linear Independence (for three vectors): The set is linearly independent if for all possible scalar values of a and b: \\[ \\vec{u} \\neq a\\vec{v} + b\\vec{w} \\]\n\n\n\n4. Mistakes\n\nAssuming any two vectors span a 2D plane: If the two vectors are collinear (point along the same line), their span is only that line, not the entire plane.\nConfusing a vector with a point: While we often represent the span as a collection of points (the tips of the vectors), the underlying concept is about the vectors themselves, which have both magnitude and direction.\nAssuming a third vector in 3D always expands the span: If the third vector is linearly dependent on the first two (i.e., it lies in the plane they span), it adds nothing to the span. The span remains a 2D plane.\nBelieving the basis for a space is unique: Any set of linearly independent vectors that spans the space can serve as a basis. The standard basis (î, ĵ) is just the most common and convenient choice.\n\n\n\n5. Examples\n\n5.1. Linear Combination in 2D\nQuestion: Calculate the linear combination \\(2\\vec{v} - 3\\vec{w}\\) for vectors \\(\\vec{v} = \\begin{pmatrix} 2 \\\\ 1 \\end{pmatrix}\\) and \\(\\vec{w} = \\begin{pmatrix} -1 \\\\ 4 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nScale each vector: Multiply vector \\(\\vec{v}\\) by scalar 2 and vector \\(\\vec{w}\\) by scalar -3. \\[ 2\\vec{v} = 2\\begin{pmatrix} 2 \\\\ 1 \\end{pmatrix} = \\begin{pmatrix} 4 \\\\ 2 \\end{pmatrix} \\] \\[ -3\\vec{w} = -3\\begin{pmatrix} -1 \\\\ 4 \\end{pmatrix} = \\begin{pmatrix} 3 \\\\ -12 \\end{pmatrix} \\]\nAdd the resulting vectors: \\[ \\begin{pmatrix} 4 \\\\ 2 \\end{pmatrix} + \\begin{pmatrix} 3 \\\\ -12 \\end{pmatrix} = \\begin{pmatrix} 4+3 \\\\ 2-12 \\end{pmatrix} = \\begin{pmatrix} 7 \\\\ -10 \\end{pmatrix} \\]\n\nAnswer: The resulting vector is \\(\\begin{pmatrix} 7 \\\\ -10 \\end{pmatrix}\\).\n\n\n\n5.2. Describing the Span of Two 2D Vectors\nQuestion: Describe the span of the vectors \\(\\vec{u} = \\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix}\\) and \\(\\vec{v} = \\begin{pmatrix} 3 \\\\ 1 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nCheck for linear independence: Determine if one vector is a scalar multiple of the other. Is there a scalar c such that \\(\\vec{v} = c\\vec{u}\\)? \\[ \\begin{pmatrix} 3 \\\\ 1 \\end{pmatrix} = c\\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix} \\implies 3 = c \\cdot 1 \\text{ and } 1 = c \\cdot 2 \\] From the first equation, \\(c=3\\). From the second, \\(c=0.5\\). Since there is no single value for c, the vectors are not collinear and are therefore linearly independent.\nDetermine the span: Since we have two linearly independent vectors in a 2D space (\\(R^2\\)), they form a basis for that space.\n\nAnswer: The span of \\(\\vec{u}\\) and \\(\\vec{v}\\) is the entire 2D plane (\\(R^2\\)).\n\n\n\n5.3. Describing the Span of Collinear Vectors\nQuestion: Describe the span of the vectors \\(\\vec{a} = \\begin{pmatrix} 2 \\\\ -1 \\end{pmatrix}\\) and \\(\\vec{b} = \\begin{pmatrix} -4 \\\\ 2 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nCheck for linear dependence: Observe if one vector is a scalar multiple of the other. \\[ \\vec{b} = \\begin{pmatrix} -4 \\\\ 2 \\end{pmatrix} = -2 \\begin{pmatrix} 2 \\\\ -1 \\end{pmatrix} = -2\\vec{a} \\] Since \\(\\vec{b}\\) is a scalar multiple of \\(\\vec{a}\\), the vectors are linearly dependent (collinear).\nDetermine the span: The linear combination of two collinear vectors can only produce other vectors on the same line.\n\nAnswer: The span is the line passing through the origin defined by the direction of vector \\(\\begin{pmatrix} 2 \\\\ -1 \\end{pmatrix}\\).\n\n\n\n5.4. Checking for Linear Dependence in 3D\nQuestion: Is the vector \\(\\vec{u} = \\begin{pmatrix} 7 \\\\ 7 \\\\ 0 \\end{pmatrix}\\) in the span of \\(\\vec{v} = \\begin{pmatrix} 1 \\\\ 2 \\\\ 0 \\end{pmatrix}\\) and \\(\\vec{w} = \\begin{pmatrix} 2 \\\\ 1 \\\\ 0 \\end{pmatrix}\\)?\n\n\nClick to see the solution\n\n\nSet up the linear combination equation: We need to find if there exist scalars a and b such that \\(\\vec{u} = a\\vec{v} + b\\vec{w}\\). \\[ \\begin{pmatrix} 7 \\\\ 7 \\\\ 0 \\end{pmatrix} = a\\begin{pmatrix} 1 \\\\ 2 \\\\ 0 \\end{pmatrix} + b\\begin{pmatrix} 2 \\\\ 1 \\\\ 0 \\end{pmatrix} = \\begin{pmatrix} a + 2b \\\\ 2a + b \\\\ 0 \\end{pmatrix} \\]\nCreate a system of equations from the components:\n\n\\(7 = a + 2b\\)\n\\(7 = 2a + b\\)\n\\(0 = 0\\) (This last equation is trivial and provides no information).\n\nSolve the system: From the second equation, \\(b = 7 - 2a\\). Substitute this into the first equation: \\[ 7 = a + 2(7 - 2a) \\implies 7 = a + 14 - 4a \\implies -7 = -3a \\implies a = \\frac{7}{3} \\] Now solve for b: \\[ b = 7 - 2(\\frac{7}{3}) = 7 - \\frac{14}{3} = \\frac{21-14}{3} = \\frac{7}{3} \\] Since we found a valid solution for a and b, the vector is in the span.\n\nAnswer: Yes, \\(\\vec{u}\\) is in the span of \\(\\vec{v}\\) and \\(\\vec{w}\\). The set of three vectors is linearly dependent.\n\n\n\n5.5. Span of Two 3D Vectors\nQuestion: What geometric object is described by the span of \\(\\vec{v} = \\begin{pmatrix} 1 \\\\ 1 \\\\ 0 \\end{pmatrix}\\) and \\(\\vec{w} = \\begin{pmatrix} 0 \\\\ 1 \\\\ 1 \\end{pmatrix}\\)?\n\n\nClick to see the solution\n\n\nCheck for linear independence: The vectors are not scalar multiples of each other, so they are linearly independent.\nDetermine the span: The span of two linearly independent vectors in 3D space is the set of all their linear combinations, which forms a 2D plane passing through the origin.\n\n\nAnswer: A plane in 3D space that contains the origin, \\(\\vec{v}\\), and \\(\\vec{w}\\).\n\n\n\n5.6. Linearly Independent Vectors as a Basis\nQuestion: Do the vectors \\(\\vec{a} = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\) and \\(\\vec{b} = \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}\\) form a basis for \\(R^2\\)?\n\n\nClick to see the solution\n\n\nCheck for linear independence: The vectors are not scalar multiples of each other, so they are linearly independent.\nCheck if they span the space: Since we have two linearly independent vectors in a 2-dimensional space, they must span the entire space.\n\nAnswer: Yes, they form a basis for \\(R^2\\) because they are a set of two linearly independent vectors in a 2D space.\n\n\n\n5.7. A Linearly Dependent Set\nQuestion: Is the set of vectors \\(\\{\\vec{a}, \\vec{b}, \\vec{c}\\}\\) with \\(\\vec{a}=\\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix}\\), \\(\\vec{b}=\\begin{pmatrix} -2 \\\\ -4 \\end{pmatrix}\\), \\(\\vec{c}=\\begin{pmatrix} 3 \\\\ 0 \\end{pmatrix}\\) linearly independent or dependent?\n\n\nClick to see the solution\n\n\nAnalyze the relationship between vectors: We can quickly see that \\(\\vec{b} = -2\\vec{a}\\).\nConclusion: Since one vector (\\(\\vec{b}\\)) can be written as a linear combination (in this case, just a scaling) of another vector (\\(\\vec{a}\\)), the set contains a redundant vector.\n\nAnswer: The set is linearly dependent.",
    "crumbs": [
      "Essence of linear algebra",
      "2. Linear Combinations, Span, and Basis Vectors"
    ]
  },
  {
    "objectID": "Essence of linear algebra/vid_16.html",
    "href": "Essence of linear algebra/vid_16.html",
    "title": "16. Vector Spaces, Axioms, Linearity, and Transformations",
    "section": "",
    "text": "1. Summary\n\n1.1 The Nature of Mathematical Definitions\nMathematics often uses abstraction to create powerful, generalized tools. As Vladimir Arnold noted, some formal definitions and axioms can seem unmotivated and serve to make a subject difficult for newcomers. However, this abstractness is the price of generality. By defining concepts like “vectors” and “linearity” through a set of fundamental rules (axioms), the resulting theories and tools can be applied to a wide variety of seemingly different contexts, from geometric arrows to functions in calculus.\n\n\n1.2 What is a Vector? Three Perspectives\nThe fundamental question “What are vectors?” can be answered from three different viewpoints, each valid in its own context.\n\n1.2.1 The Physicist’s Perspective: Geometric Vectors\nFrom a physics or geometry standpoint, a vector is an arrow in space defined by its length (magnitude) and direction. It is a fundamental object that can be described with a list of numbers (coordinates) for convenience, but its primary identity is spatial.\n\n\n1.2.2 The Programmer’s Perspective: Algebraic Vectors\nFrom a computer science or programming perspective, a vector is fundamentally a list of numbers. This list can be visualized as an arrow in space, but its core identity is the ordered collection of its components. This view is straightforward and unambiguous, easily extending to higher dimensions (e.g., a 4D vector is a list of 4 numbers, a 100D vector is a list of 100 numbers) where geometric visualization is impossible.\n\n\n1.2.3 The Mathematician’s Perspective: Vector Spaces\nA mathematician’s answer is that a vector is anything that belongs to a vector space. This is a more abstract definition. It encompasses both arrows and lists of numbers, but also includes other objects, like functions. This abstraction allows the powerful tools of linear algebra to be applied far beyond simple geometry.\n\n\n\n1.3 Vector Spaces\nA vector space is a collection of objects (which we call “vectors”) that follow a specific set of rules, or axioms. The only two things you need to be able to do with these objects are: 1. Add any two vectors together. 2. Multiply any vector by a scalar (a number).\nIf these operations of addition and scaling follow eight fundamental rules (the axioms), the collection is a valid vector space.\n\n1.3.1 Functions as Vectors\nFunctions can be treated as vectors. Just as you can add two vectors, you can add two functions, f(x) and g(x), to get a new function, (f + g)(x).  Similarly, you can scale a function f(x) by a scalar c to get a new function (c*f)(x). These operations of adding and scaling functions behave in the same sensible way that adding and scaling geometric vectors do, satisfying the required axioms.\n\n\n\n1.4 The Eight Axioms of a Vector Space\nThese are the formal rules that an operation of addition and scalar multiplication must satisfy for a collection of objects to be considered a vector space. 1. Associativity of addition: \\(\\vec{u} + (\\vec{v} + \\vec{w}) = (\\vec{u} + \\vec{v}) + \\vec{w}\\) 2. Commutativity of addition: \\(\\vec{v} + \\vec{w} = \\vec{w} + \\vec{v}\\) 3. Existence of a zero vector: There is a vector \\(\\vec{0}\\) such that \\(\\vec{0} + \\vec{v} = \\vec{v}\\) for all \\(\\vec{v}\\). 4. Existence of an additive inverse: For every vector \\(\\vec{v}\\), there is a vector \\(-\\vec{v}\\) such that \\(\\vec{v} + (-\\vec{v}) = \\vec{0}\\). 5. Associativity of scalar multiplication: \\(a(b\\vec{v}) = (ab)\\vec{v}\\) 6. Existence of a scalar identity: The scalar 1 times a vector \\(\\vec{v}\\) equals \\(\\vec{v}\\). 7. Distributivity over vector addition: \\(a(\\vec{v} + \\vec{w}) = a\\vec{v} + a\\vec{w}\\) 8. Distributivity over scalar addition: \\((a+b)\\vec{v} = a\\vec{v} + b\\vec{v}\\)\nThese axioms act as an interface. A mathematician can prove theorems based only on these axioms, and those theorems will then automatically apply to any vector space, whether it’s made of arrows, lists of numbers, or functions.\n\n\n1.5 Linearity and Transformations in Function Spaces\nThe concept of a linear transformation also extends from geometric vectors to abstract vector spaces like those containing functions.\n\n1.5.1 The Derivative as a Linear Operator\nThe derivative from calculus is a perfect example of a linear transformation (often called a linear operator when dealing with functions). It takes a function as input and produces another function (its derivative) as output. The derivative is linear because it satisfies the two core properties: 1. Additivity: The derivative of a sum of functions is the sum of their derivatives. \\[ \\frac{d}{dx}(f(x) + g(x)) = \\frac{d}{dx}f(x) + \\frac{d}{dx}g(x) \\] 2. Scaling: The derivative of a function multiplied by a constant is that constant times the derivative of the function. \\[ \\frac{d}{dx}(c \\cdot f(x)) = c \\frac{d}{dx}f(x) \\]\n\n\n1.5.2 Representing the Derivative with a Matrix\nTo describe this transformation with a matrix, we first need a coordinate system for our function space. Let’s consider the vector space of all polynomials. - Basis Functions: A natural choice for a basis is the set of pure powers of \\(x\\): \\(b_0(x)=1\\), \\(b_1(x)=x\\), \\(b_2(x)=x^2\\), and so on. This is an infinite basis, making our vector space infinite-dimensional. - Polynomials as Vectors: Any polynomial can be represented by its coefficients in this basis. For example, \\(P(x) = 5 \\cdot 1 + 4x + 1x^2 + 1x^3\\) corresponds to the infinite coordinate vector \\(\\begin{pmatrix} 5, 4, 1, 1, 0, \\dots \\end{pmatrix}^T\\).\nThe matrix for the derivative is found by seeing where it sends each basis function. The \\(n\\)-th column of the matrix is the coordinate vector of the derivative of the \\(n\\)-th basis function. - $ (b_0) = (1) = 0 $, which has coordinates \\(\\begin{pmatrix} 0, 0, 0, \\dots \\end{pmatrix}^T\\). - $ (b_1) = (x) = 1 $, which has coordinates \\(\\begin{pmatrix} 1, 0, 0, \\dots \\end{pmatrix}^T\\). - $ (b_2) = (x^2) = 2x $, which has coordinates \\(\\begin{pmatrix} 0, 2, 0, \\dots \\end{pmatrix}^T\\). - $ (b_n) = (x^n) = nx^{n-1} $, which has coordinates with \\(n\\) in the \\((n-1)\\)-th position. This results in an infinite matrix: \\[\n\\frac{d}{dx} =\n\\begin{pmatrix}\n0 & 1 & 0 & 0 & \\cdots \\\\\n0 & 0 & 2 & 0 & \\cdots \\\\\n0 & 0 & 0 & 3 & \\cdots \\\\\n0 & 0 & 0 & 0 & \\cdots \\\\\n\\vdots & \\vdots & \\vdots & \\vdots & \\ddots\n\\end{pmatrix}\n\\]\n\n\n\n\n2. Definitions\n\nVector: An object that is an element of a vector space. It can be represented in many forms, such as an arrow in space, a list of numbers, or a function, as long as it adheres to the axioms of vector spaces.\nVector Space: A collection of objects called vectors, along with a field of scalars, where two operations—vector addition and scalar multiplication—are defined and satisfy eight specific axioms.\nAxioms: A set of fundamental rules or statements that are assumed to be true and serve as the starting point for deducing other truths in a logical system.\nLinear Transformation (Operator): A function between two vector spaces, \\(L: V \\to W\\), that preserves the operations of vector addition and scalar multiplication. This means for any vectors \\(\\vec{u}, \\vec{v} \\in V\\) and any scalar \\(c\\), it satisfies \\(L(\\vec{u}+\\vec{v}) = L(\\vec{u}) + L(\\vec{v})\\) and \\(L(c\\vec{v}) = cL(\\vec{v})\\). When applied to function spaces, it is often called a linear operator.\nEigenfunction: A non-zero function that, when a linear operator is applied to it, results in a scalar multiple of itself. It is the function-space analog of an eigenvector. The scalar multiplier is the corresponding eigenvalue.\nInner Product: A generalization of the dot product for abstract vector spaces. It takes two vectors and returns a scalar, providing a notion of angle and length.\n\n\n\n3. Formulas\n\nAdditivity of Linear Transformations: \\[ L(\\vec{v} + \\vec{w}) = L(\\vec{v}) + L(\\vec{w}) \\]\nScaling Property of Linear Transformations: \\[ L(c\\vec{v}) = cL(\\vec{v}) \\]\nDerivative Sum Rule (Additivity): \\[ \\frac{d}{dx}(f(x) + g(x)) = \\frac{d}{dx}f(x) + \\frac{d}{dx}g(x) \\]\nDerivative Constant Multiple Rule (Scaling): \\[ \\frac{d}{dx}(c \\cdot f(x)) = c \\frac{d}{dx}f(x) \\]\nEigenvector / Eigenfunction Equation: \\[ A\\vec{v} = \\lambda\\vec{v} \\] Here, \\(A\\) is the linear operator, \\(\\vec{v}\\) is the eigenvector (or eigenfunction), and \\(\\lambda\\) is the scalar eigenvalue.\n\n\n\n4. Mistakes\n\nAssuming Vectors are Only Arrows in Space: This is a common starting point but is too restrictive. Many other mathematical objects, like polynomials and functions, behave like vectors and form vector spaces.\nBelieving All Vector Spaces are 2D or 3D: While 2D and 3D spaces are excellent for visualization, linear algebra applies to spaces of any number of dimensions, including infinite dimensions, like the space of all polynomials.\nTreating Axioms as Unimportant Formalities: The eight axioms of a vector space are crucial because they define the structure. Any system that satisfies them can be analyzed with the tools of linear algebra, which is why the field is so broadly applicable.\nForgetting that Linearity Has a Strict Definition: The intuitive geometric idea of “grid lines remaining parallel and evenly spaced” is a consequence of the two formal properties of linearity: additivity and scaling. These two properties are the true test of whether a transformation is linear.\n\n\n\n5. Examples\n\n5.1. Identifying a Vector Space\nQuestion: Do all polynomials of degree 3 or less (e.g., \\(ax^3 + bx^2 + cx + d\\)) form a vector space?\n\n\nClick to see the solution\n\nYes, they do. 1. Addition: Adding two polynomials of degree 3 or less results in another polynomial of degree 3 or less. For example, \\((2x^3 + x) + (x^2 - 4) = 2x^3 + x^2 + x - 4\\). 2. Scalar Multiplication: Multiplying a polynomial of degree 3 or less by a scalar results in another polynomial of degree 3 or less. For example, \\(5(x^2 - 2x) = 5x^2 - 10x\\). 3. Axioms: All eight axioms hold. For example, the zero vector is the zero polynomial (\\(0x^3 + 0x^2 + 0x + 0\\)), and addition is commutative and associative.\nAnswer: Yes, it is a vector space. In fact, it is a 4-dimensional vector space with a basis of \\(\\{x^3, x^2, x, 1\\}\\).\n\n\n\n5.2. Testing for Linearity\nQuestion: Is the transformation \\(L(f(x)) = f(x) + 1\\) a linear transformation on the space of polynomials?\n\n\nClick to see the solution\n\nLet’s test the two properties of linearity. 1. Additivity: Is \\(L(f(x) + g(x)) = L(f(x)) + L(g(x))\\)? - \\(L(f(x) + g(x)) = (f(x) + g(x)) + 1\\) - \\(L(f(x)) + L(g(x)) = (f(x) + 1) + (g(x) + 1) = f(x) + g(x) + 2\\) Since \\(f(x) + g(x) + 1 \\neq f(x) + g(x) + 2\\), the additivity property fails.\nAnswer: No, the transformation is not linear.\n\n\n\n5.3. Representing a Polynomial as a Vector\nQuestion: Using the basis \\(\\{1, x, x^2, x^3, \\dots\\}\\), what is the coordinate vector for the polynomial \\(P(x) = 8x^3 - 6x\\)?\n\n\nClick to see the solution\n\nWe need to find the coefficients for each basis function: \\(c_0 \\cdot 1 + c_1 \\cdot x + c_2 \\cdot x^2 + c_3 \\cdot x^3 + \\dots\\) - The coefficient of \\(1\\) is \\(0\\). - The coefficient of \\(x\\) is \\(-6\\). - The coefficient of \\(x^2\\) is \\(0\\). - The coefficient of \\(x^3\\) is \\(8\\). - All higher-order coefficients are \\(0\\). The coordinate vector is an infinite column vector listing these coefficients in order.\nAnswer: The coordinate vector is \\(\\begin{pmatrix} 0, -6, 0, 8, 0, 0, \\dots \\end{pmatrix}^T\\).\n\n\n\n5.4. Applying the Derivative Matrix\nQuestion: Use the derivative matrix to find the derivative of \\(P(x) = 2x^2 + 5x - 3\\).\n\n\nClick to see the solution\n\n\nWrite the coordinate vector for \\(P(x)\\): The basis is \\(\\{1, x, x^2, \\dots\\}\\), so the vector is \\(\\vec{p} = \\begin{pmatrix} -3, 5, 2, 0, \\dots \\end{pmatrix}^T\\).\nMultiply the derivative matrix by the vector: \\[\n\\begin{pmatrix}\n0 & 1 & 0 & 0 & \\cdots \\\\\n0 & 0 & 2 & 0 & \\cdots \\\\\n0 & 0 & 0 & 3 & \\cdots \\\\\n\\vdots & \\vdots & \\vdots & \\vdots & \\ddots\n\\end{pmatrix}\n\\begin{pmatrix}\n-3 \\\\ 5 \\\\ 2 \\\\ 0 \\\\ \\vdots\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n(0 \\cdot -3) + (1 \\cdot 5) + (0 \\cdot 2) + \\dots \\\\\n(0 \\cdot -3) + (0 \\cdot 5) + (2 \\cdot 2) + \\dots \\\\\n(0 \\cdot -3) + (0 \\cdot 5) + (0 \\cdot 2) + \\dots \\\\\n\\vdots\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n5 \\\\ 4 \\\\ 0 \\\\ 0 \\\\ \\vdots\n\\end{pmatrix}\n\\]\nConvert the resulting vector back to a polynomial: The vector \\(\\begin{pmatrix} 5, 4, 0, \\dots \\end{pmatrix}^T\\) corresponds to \\(5 \\cdot 1 + 4 \\cdot x = 4x + 5\\).\n\nAnswer: The derivative is \\(4x + 5\\).\n\n\n\n5.5. Eigenfunctions of the Derivative\nQuestion: Is the function \\(f(x) = e^{2x}\\) an eigenfunction of the derivative operator \\(\\frac{d}{dx}\\)? If so, what is its eigenvalue?\n\n\nClick to see the solution\n\nAn eigenfunction must satisfy the equation \\(A\\vec{v} = \\lambda\\vec{v}\\). Here, the operator \\(A\\) is \\(\\frac{d}{dx}\\) and the vector \\(\\vec{v}\\) is the function \\(f(x) = e^{2x}\\). 1. Apply the operator: \\[ \\frac{d}{dx}(e^{2x}) = 2e^{2x} \\] 2. Compare the result to \\(\\lambda f(x)\\): The result is \\(2 \\cdot (e^{2x})\\), which is in the form \\(\\lambda \\cdot f(x)\\).\nAnswer: Yes, \\(e^{2x}\\) is an eigenfunction of the derivative operator with an eigenvalue of \\(\\lambda = 2\\).\n\n\n\n5.6. Another Vector Space\nQuestion: Consider the set of all \\(2 \\times 2\\) matrices. Can this be a vector space?\n\n\nClick to see the solution\n\nYes. We can define addition and scalar multiplication for matrices. 1. Addition: Two \\(2 \\times 2\\) matrices can be added component-wise to produce another \\(2 \\times 2\\) matrix. 2. Scalar Multiplication: A \\(2 \\times 2\\) matrix can be multiplied by a scalar, resulting in another \\(2 \\times 2\\) matrix. 3. Axioms: These operations satisfy all eight axioms. The “zero vector” is the \\(2 \\times 2\\) zero matrix: \\(\\begin{pmatrix} 0 & 0 \\\\ 0 & 0 \\end{pmatrix}\\).\nAnswer: Yes, the set of all \\(2 \\times 2\\) matrices forms a vector space.\n\n\n\n5.7. A Non-Linear Operator\nQuestion: Is the transformation \\(L(f(x)) = (f(x))^2\\) a linear operator?\n\n\nClick to see the solution\n\nLet’s test the scaling property. Is \\(L(c \\cdot f(x)) = c \\cdot L(f(x))\\)? 1. Apply the operator to the scaled function: \\[ L(c \\cdot f(x)) = (c \\cdot f(x))^2 = c^2 (f(x))^2 \\] 2. Scale the result of the operator: \\[ c \\cdot L(f(x)) = c \\cdot (f(x))^2 \\] Since \\(c^2 (f(x))^2 \\neq c (f(x))^2\\) (unless \\(c=0\\) or \\(c=1\\)), the scaling property fails.\nAnswer: No, this is not a linear operator.",
    "crumbs": [
      "Essence of linear algebra",
      "16. Vector Spaces, Axioms, Linearity, and Transformations"
    ]
  },
  {
    "objectID": "Essence of linear algebra/vid_7.html",
    "href": "Essence of linear algebra/vid_7.html",
    "title": "7. Inverse Matrices, Column Space, Rank, Null Space",
    "section": "",
    "text": "1. Summary\n\n1.1 Linear Systems as Transformations\nThe central idea is to understand concepts like inverse matrices, column space, and null space not just as computational rules but as geometric phenomena related to linear transformations. A linear transformation is a way of moving or changing space, such as rotating, shearing, or scaling, where grid lines remain parallel and evenly spaced.\n\n\n1.2 Systems of Linear Equations\nLinear algebra is exceptionally useful for solving systems of linear equations. A linear system of equations is a set of equations where the variables are only multiplied by constants and added together.\n\nAllowed: \\(2x + 5y + 3z = -3\\)\nNot Allowed: \\(x^2\\), \\(\\sin(x)\\), \\(xy\\)\n\nThese systems can be rewritten in the compact matrix form \\(A\\vec{x} = \\vec{v}\\).\n\n\n\\(A\\) is the coefficient matrix, containing all the constant coefficients of the variables.\n\\(\\vec{x}\\) is a vector containing all the unknown variables.\n\\(\\vec{v}\\) is a constant vector, representing the right-hand side of the equations.\n\n\n\n1.3 The Geometric Interpretation of \\(A\\vec{x} = \\vec{v}\\)\nViewing the matrix \\(A\\) as a transformation of space, solving the equation \\(A\\vec{x} = \\vec{v}\\) means we are looking for a vector \\(\\vec{x}\\) which, after being transformed by \\(A\\), lands on the vector \\(\\vec{v}\\).\nThe nature of the solution depends heavily on whether the transformation \\(A\\) squishes all of space into a lower dimension (like a plane into a line) or not. This is determined by the determinant of \\(A\\).\n\n1.3.1 Case 1: det(A) ≠ 0 (Full Rank)\nWhen the determinant of matrix \\(A\\) is non-zero, the transformation does not reduce the dimensionality of the space (e.g., a 2D plane remains a 2D plane, a 3D space remains a 3D space).\n\nUnique Solution: In this case, there is always one and only one vector \\(\\vec{x}\\) that lands on \\(\\vec{v}\\).\nInverse Transformation: To find this unique \\(\\vec{x}\\), we can apply the “reverse” or inverse transformation, denoted as \\(A^{-1}\\). Applying the inverse transformation to \\(\\vec{v}\\) gives us the solution: \\(\\vec{x} = A^{-1}\\vec{v}\\).\nIdentity: Applying a transformation \\(A\\) and then immediately applying its inverse \\(A^{-1}\\) is equivalent to doing nothing. This “do-nothing” transformation is called the identity transformation. The matrix product \\(A^{-1}A\\) results in the identity matrix.\n\n\n\n1.3.2 Case 2: det(A) = 0 (Reduced Rank)\nWhen the determinant of \\(A\\) is zero, the transformation squishes space into a lower dimension.\n\nNo Inverse: There is no inverse transformation. You cannot “un-squish” a line to recreate a full plane, because each point on the line corresponds to a whole line of input vectors. A function can’t map one input to many outputs.\nPossibility of Solutions: A solution may still exist, but only if the vector \\(\\vec{v}\\) lies within the lower-dimensional output space (the line or plane that all vectors are squished onto). If \\(\\vec{v}\\) is outside this space, no solution exists. If it is inside, there are infinitely many solutions.\n\n\n\n\n1.4 Rank, Column Space, and Null Space\n\n1.4.1 Rank\nThe rank of a transformation (or its matrix) is the number of dimensions in its output.\n\nA 2D transformation that keeps space as a 2D plane is rank 2.\nA 2D transformation that squishes space onto a line is rank 1.\nA 3D transformation that squishes space onto a plane is rank 2.\nA 3D transformation that squishes space onto a line is rank 1.\nWhen the rank is as high as it can be (equal to the number of columns), the matrix is said to be of full rank.\n\n\n\n1.4.2 Column Space\nThe set of all possible outputs of a transformation is called its column space. For a matrix \\(A\\) and any vector \\(\\vec{v}\\), the output \\(A\\vec{v}\\) is always in the column space.\n\nThe column space is the span of the columns of the matrix. The columns of the matrix are simply the vectors where the basis vectors land after the transformation.\nThe rank of a matrix is more formally defined as the number of dimensions of its column space.\n\n\n\n\n1.4.3 Null Space or Kernel\nThe set of all vectors that land on the origin (the zero vector) after a transformation is called the null space or kernel of that transformation.\n\nFor a full-rank transformation, only the origin itself lands on the origin. The null space consists only of the zero vector.\nFor a lower-rank transformation, a whole line or plane of vectors gets squished onto the origin. This line or plane is the null space.\n\n\n\n\n\n2. Definitions\n\nLinear System: A set of equations where variables are only scaled by constants and added.\nInverse Matrix (\\(A^{-1}\\)): A matrix that represents the unique transformation which, when applied after the transformation represented by matrix \\(A\\), results in the identity transformation (i.e., it undoes the action of \\(A\\)). An inverse only exists if the determinant of \\(A\\) is non-zero.\nColumn Space: The set of all possible output vectors of a matrix transformation. It is equivalent to the span of the columns of the matrix.\nRank: The number of dimensions in the column space of a matrix.\nFull Rank: A matrix has full rank if its rank is equal to the number of columns. This indicates that the basis vectors remain linearly independent after the transformation.\nNull Space (or Kernel): The set of all input vectors that are mapped to the zero vector by a transformation.\nIdentity Matrix (\\(I\\)): A square matrix with ones on the main diagonal and zeros elsewhere. It represents the “do-nothing” transformation that leaves every vector unchanged.\n\n\n\n3. Formulas\n\nMatrix Equation for a Linear System: \\[ A\\vec{x} = \\vec{v} \\]\nSolution using the Inverse Matrix: \\[ \\vec{x} = A^{-1}\\vec{v} \\]\nIdentity Property: \\[ A^{-1}A = I \\]\n\n\n\n4. Mistakes\n\nAssuming every square matrix has an inverse. Only matrices with a non-zero determinant have an inverse. If det(A) = 0, the transformation squishes space into a lower dimension and cannot be perfectly reversed.\nBelieving that det(A) = 0 means no solution exists. A solution can exist if the output vector \\(\\vec{v}\\) lies on the line or plane that the transformation squishes space into (i.e., if \\(\\vec{v}\\) is in the column space of \\(A\\)). In this case, there will be infinite solutions.\nConfusing Rank with the matrix dimensions. The rank refers to the dimensions of the output space (the column space), which can be smaller than the dimensions of the matrix if det(A) = 0.\nConfusing the Null Space with the origin. The null space is a set of vectors. For full-rank matrices, this set contains only the zero vector, but for others, it can be an entire line or plane passing through the origin.\n\n\n\n5. Examples\n\n5.1. Determining Rank from Columns\nQuestion: A 2x2 matrix \\(A\\) transforms the basis vectors \\(\\hat{i}\\) and \\(\\hat{j}\\) to \\(\\begin{pmatrix} 2 \\\\ 1 \\end{pmatrix}\\) and \\(\\begin{pmatrix} -4 \\\\ -2 \\end{pmatrix}\\) respectively. What is the rank of matrix \\(A\\)?\n\n\nClick to see the solution\n\n\nIdentify the columns: The columns of the matrix are the transformed basis vectors: \\(\\text{col}_1 = \\begin{pmatrix} 2 \\\\ 1 \\end{pmatrix}\\) and \\(\\text{col}_2 = \\begin{pmatrix} -4 \\\\ -2 \\end{pmatrix}\\).\nDetermine the column space: The column space is the span of these two vectors.\nCheck for linear dependence: Notice that \\(\\begin{pmatrix} -4 \\\\ -2 \\end{pmatrix} = -2 \\times \\begin{pmatrix} 2 \\\\ 1 \\end{pmatrix}\\). The two column vectors are collinear (linearly dependent).\nFind the dimension of the column space: Since both columns lie on the same line through the origin, their span is just that line. A line is a one-dimensional space. \n\nAnswer: The rank of matrix \\(A\\) is 1.\n\n\n\n5.2. Unique Solution with Inverse\nQuestion: Given the system of equations: \\(2x + 1y = 4\\) \\(1x + 3y = 7\\) The inverse of the coefficient matrix \\(A = \\begin{pmatrix} 2 & 1 \\\\ 1 & 3 \\end{pmatrix}\\) is \\(A^{-1} = \\frac{1}{5}\\begin{pmatrix} 3 & -1 \\\\ -1 & 2 \\end{pmatrix}\\). Find the solution vector \\(\\vec{x}\\).\n\n\nClick to see the solution\n\n\nSet up the equation \\(\\vec{x} = A^{-1}\\vec{v}\\): The vector \\(\\vec{v}\\) is \\(\\begin{pmatrix} 4 \\\\ 7 \\end{pmatrix}\\). \\[ \\vec{x} = \\frac{1}{5}\\begin{pmatrix} 3 & -1 \\\\ -1 & 2 \\end{pmatrix} \\begin{pmatrix} 4 \\\\ 7 \\end{pmatrix} \\]\nPerform matrix-vector multiplication: \\[ \\vec{x} = \\frac{1}{5}\\begin{pmatrix} (3)(4) + (-1)(7) \\\\ (-1)(4) + (2)(7) \\end{pmatrix} = \\frac{1}{5}\\begin{pmatrix} 12 - 7 \\\\ -4 + 14 \\end{pmatrix} = \\frac{1}{5}\\begin{pmatrix} 5 \\\\ 10 \\end{pmatrix} \\]\nApply the scalar multiplication: \\[ \\vec{x} = \\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix} \\] Answer: The unique solution is \\(x=1, y=2\\), or \\(\\vec{x} = \\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix}\\).\n\n\n\n\n5.3. Null Space\nQuestion: The transformation matrix \\(A = \\begin{pmatrix} 1 & 2 \\\\ 2 & 4 \\end{pmatrix}\\) squishes 2D space onto the line \\(y=2x\\). What is the null space of this transformation?\n\n\nClick to see the solution\n\n\nSet up the equation \\(A\\vec{x} = \\vec{0}\\): We are looking for all vectors \\(\\vec{x} = \\begin{pmatrix} x \\\\ y \\end{pmatrix}\\) that land on the origin \\(\\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}\\). \\[ \\begin{pmatrix} 1 & 2 \\\\ 2 & 4 \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix} \\]\nWrite as a system of equations: \\(1x + 2y = 0\\) \\(2x + 4y = 0\\)\nSolve the system: Notice that the second equation is just twice the first. Both equations simplify to \\(x = -2y\\). This is the equation of a line. \n\nAnswer: The null space is the line \\(x = -2y\\), which is the set of all vectors of the form \\(c \\begin{pmatrix} -2 \\\\ 1 \\end{pmatrix}\\) for any scalar \\(c\\).\n\n\n\n5.4. No Solution Case\nQuestion: Using the matrix \\(A = \\begin{pmatrix} 1 & 2 \\\\ 2 & 4 \\end{pmatrix}\\) from the previous example, explain why there is no solution to the equation \\(A\\vec{x} = \\begin{pmatrix} 3 \\\\ 1 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nIdentify the column space: The transformation \\(A\\) squishes all of 2D space onto a single line, which is the span of its columns \\(\\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix}\\) and \\(\\begin{pmatrix} 2 \\\\ 4 \\end{pmatrix}\\). This span is the line \\(y=2x\\).\nCheck if \\(\\vec{v}\\) is in the column space: The target vector is \\(\\vec{v} = \\begin{pmatrix} 3 \\\\ 1 \\end{pmatrix}\\). For this vector, \\(y=1\\) and \\(x=3\\). Since \\(1 \\neq 2(3)\\), the vector \\(\\vec{v}\\) is not on the line \\(y=2x\\).\nConclusion: Because the transformation’s entire output (its column space) is the line \\(y=2x\\), it is impossible for any input vector \\(\\vec{x}\\) to be transformed into an output vector that is not on that line. \n\nAnswer: No solution exists because the vector \\(\\begin{pmatrix} 3 \\\\ 1 \\end{pmatrix}\\) is not in the column space of matrix \\(A\\).\n\n\n\n5.5. Infinite Solutions Case\nQuestion: Using the matrix \\(A = \\begin{pmatrix} 1 & 2 \\\\ 2 & 4 \\end{pmatrix}\\) again, describe the set of solutions to \\(A\\vec{x} = \\begin{pmatrix} 3 \\\\ 6 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nCheck if \\(\\vec{v}\\) is in the column space: The target vector is \\(\\vec{v} = \\begin{pmatrix} 3 \\\\ 6 \\end{pmatrix}\\). Here, \\(y=6\\) and \\(x=3\\). Since \\(6 = 2(3)\\), the vector \\(\\vec{v}\\) lies on the line \\(y=2x\\), which is the column space of \\(A\\). Therefore, solutions exist.\nFind one particular solution: We need to find one vector \\(\\vec{x}\\) that solves the equation. By inspection, we can see that if \\(\\vec{x} = \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}\\), then \\(A\\vec{x} = \\begin{pmatrix} 1(1) + 2(1) \\\\ 2(1) + 4(1) \\end{pmatrix} = \\begin{pmatrix} 3 \\\\ 6 \\end{pmatrix}\\). So, \\(\\vec{x}_p = \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}\\) is a solution.\nAdd the null space: The complete set of solutions is found by taking this particular solution and adding any vector from the null space. We found the null space to be all vectors of the form \\(c \\begin{pmatrix} -2 \\\\ 1 \\end{pmatrix}\\). This is because any vector in the null space gets mapped to zero, so \\(A(\\vec{x}_p + \\vec{x}_n) = A\\vec{x}_p + A\\vec{x}_n = \\vec{v} + \\vec{0} = \\vec{v}\\). \n\nAnswer: The solutions form a line in the input space, given by the set of vectors \\(\\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} + c \\begin{pmatrix} -2 \\\\ 1 \\end{pmatrix}\\) for any scalar \\(c\\).\n\n\n\n5.6. Rank of a 3x3 Matrix\nQuestion: What is the rank of the matrix \\(A = \\begin{pmatrix} 1 & 0 & 2 \\\\ 0 & 1 & 3 \\\\ 0 & 0 & 0 \\end{pmatrix}\\)?\n\n\nClick to see the solution\n\n\nIdentify the columns: The columns are \\(\\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix}\\), \\(\\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\end{pmatrix}\\), and \\(\\begin{pmatrix} 2 \\\\ 3 \\\\ 0 \\end{pmatrix}\\).\nAnalyze the span of the columns: The first two columns are the standard basis vectors \\(\\hat{i}\\) and \\(\\hat{j}\\) in 3D space. They span the xy-plane. The third column is a linear combination of the first two: \\(2\\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix} + 3\\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\end{pmatrix} = \\begin{pmatrix} 2 \\\\ 3 \\\\ 0 \\end{pmatrix}\\).\nDetermine the dimension of the column space: Since the third column lies in the plane spanned by the first two, it doesn’t add a new dimension. The entire column space is the xy-plane, which is a two-dimensional space.\n\nAnswer: The rank of the matrix is 2.\n\n\n\n5.7. Full Rank and Invertibility\nQuestion: A matrix \\(A\\) has a rank equal to its number of columns. What can you say about its determinant and the existence of its inverse?\n\n\nClick to see the solution\n\n\nInterpret “Full Rank”: A matrix with rank equal to its number of columns is a “full rank” matrix. This means that the transformation it represents does not reduce the dimensionality of the space. The columns are linearly independent and span the entire space.\nRelate Rank to Determinant: A transformation that does not reduce dimensionality has a non-zero determinant. The determinant represents the factor by which area (in 2D) or volume (in 3D) is scaled. If the dimension is not reduced, this factor is not zero.\nRelate Determinant to Inverse: A matrix has an inverse if and only if its determinant is non-zero.\n\nAnswer: The determinant of the matrix is non-zero, and therefore its inverse exists.",
    "crumbs": [
      "Essence of linear algebra",
      "7. Inverse Matrices, Column Space, Rank, Null Space"
    ]
  },
  {
    "objectID": "Essence of linear algebra/vid_13.html",
    "href": "Essence of linear algebra/vid_13.html",
    "title": "13. Change of Basis, Coordinate Systems",
    "section": "",
    "text": "1. Summary\n\n1.1 The Standard Coordinate System\n\n1.1.1 Geometric vs. Linear Algebra View\nA vector in a 2D space, such as one with coordinates \\(\\begin{pmatrix} 3 \\\\ 2 \\end{pmatrix}\\), can be understood in two primary ways: 1. Geometrically: An instruction to move from the vector’s tail to its tip—in this case, 3 units to the right and 2 units up. 2. Linear Algebra Perspective: The coordinates are treated as scalars that scale special vectors called basis vectors.\n\n\n\n1.1.2 Basis Vectors\nIn the standard Cartesian coordinate system, the two basis vectors are: * \\(\\hat{i}\\) (i-hat): A vector of length 1 pointing directly to the right along the x-axis. Its coordinates are \\(\\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\). * \\(\\hat{j}\\) (j-hat): A vector of length 1 pointing directly up along the y-axis. Its coordinates are \\(\\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\\).\nA vector like \\(\\begin{pmatrix} 3 \\\\ 2 \\end{pmatrix}\\) is the sum of the scaled basis vectors: one vector scaled by 3 (stretching \\(\\hat{i}\\) to be 3 times its original length) and another scaled by 2 (stretching \\(\\hat{j}\\) to be twice its original length). The final vector is the sum: \\(3\\hat{i} + 2\\hat{j}\\).\n\n\n\n1.1.3 Implicit Assumptions\nThe choice of \\(\\hat{i}\\) and \\(\\hat{j}\\) as the basis encapsulates all the implicit assumptions about our coordinate system: * The direction of the x-axis (rightward). * The direction of the y-axis (upward). * The unit of distance or length.\nAny system for translating between vectors and numbers is called a coordinate system, and the chosen basis vectors are the foundation of that system.\n\n\n\n1.2 Alternate Coordinate Systems\n\n1.2.1 Different Basis Vectors\nIt is possible to use a different set of basis vectors. For instance, consider a different coordinate system with two alternate basis vectors, \\(\\vec{b_1}\\) and \\(\\vec{b_2}\\).\nIn our standard system, these might have coordinates like: * \\(\\vec{b_1} = \\begin{pmatrix} 2 \\\\ 1 \\end{pmatrix}\\) * \\(\\vec{b_2} = \\begin{pmatrix} -1 \\\\ 1 \\end{pmatrix}\\)\n\nIn this new system, a vector’s coordinates are the scalars that stretch or squish these new basis vectors. For example, a vector with coordinates \\(\\begin{pmatrix} -1 \\\\ 2 \\end{pmatrix}\\) in this new system would be calculated as: \\[ (-1)\\vec{b_1} + (2)\\vec{b_2} \\]\nThis demonstrates that the same vector in space can have completely different coordinates depending on the chosen basis. The basis vectors essentially define the “language” used to describe vectors numerically.\n\n\n1.2.2 The Grid as a Construct\nThe familiar square grid of the Cartesian plane is a visual construct based on our choice of \\(\\hat{i}\\) and \\(\\hat{j}\\). If we use a different basis, like Jennifer’s, her grid would look different—it would be composed of parallelograms formed by her basis vectors. However, both grids describe the same underlying 2D space; they just use different reference points.\n\n\n\n\n1.3 Translating Between Coordinate Systems\nA central task in linear algebra is translating vector representations between different coordinate systems.\n\n1.3.1 From an Alternate System to the Standard System\nTo translate a vector’s coordinates from an alternate system (e.g., Jennifer’s) to our standard system, we use a change of basis matrix. 1. Construct the Matrix: Create a matrix whose columns are the coordinates of the alternate basis vectors written in our standard system. \\[ A = \\begin{pmatrix} 2 & -1 \\\\ 1 & 1 \\end{pmatrix} \\] (Here, the first column is \\(\\vec{b_1}\\) and the second is \\(\\vec{b_2}\\).) 2. Multiply: Multiply this matrix by the vector’s coordinates in the alternate system. The result gives the vector’s coordinates in the standard system. \\[ \\begin{pmatrix} 2 & -1 \\\\ 1 & 1 \\end{pmatrix} \\begin{pmatrix} -1 \\\\ 2 \\end{pmatrix} = \\begin{pmatrix} (2)(-1) + (-1)(2) \\\\ (1)(-1) + (1)(2) \\end{pmatrix} = \\begin{pmatrix} -4 \\\\ 1 \\end{pmatrix} \\] So, a vector that is \\(\\begin{pmatrix} -1 \\\\ 2 \\end{pmatrix}\\) in Jennifer’s language is \\(\\begin{pmatrix} -4 \\\\ 1 \\end{pmatrix}\\) in our language.\n\n\n1.3.2 From the Standard System to an Alternate System\nTo translate a vector from our standard system to an alternate system, we need to reverse the process. This is done by multiplying the vector (in our coordinates) by the inverse of the change of basis matrix (\\(A^{-1}\\)). * Formula: \\(\\vec{v}_{\\text{alternate}} = A^{-1} \\cdot \\vec{v}_{\\text{standard}}\\)\nFor the matrix \\(A = \\begin{pmatrix} 2 & -1 \\\\ 1 & 1 \\end{pmatrix}\\), its inverse is \\(A^{-1} = \\begin{pmatrix} 1/3 & 1/3 \\\\ -1/3 & 2/3 \\end{pmatrix}\\). To find the coordinates of our vector \\(\\begin{pmatrix} 3 \\\\ 2 \\end{pmatrix}\\) in Jennifer’s system: \\[ \\begin{pmatrix} 1/3 & 1/3 \\\\ -1/3 & 2/3 \\end{pmatrix} \\begin{pmatrix} 3 \\\\ 2 \\end{pmatrix} = \\begin{pmatrix} (1/3)(3) + (1/3)(2) \\\\ (-1/3)(3) + (2/3)(2) \\end{pmatrix} = \\begin{pmatrix} 5/3 \\\\ 1/3 \\end{pmatrix} \\]\n\n\n\n1.4 Translating Linear Transformations\nThe numerical representation of a linear transformation (e.g., a 90-degree rotation) is also dependent on the choice of basis. The standard rotation matrix \\(M = \\begin{pmatrix} 0 & -1 \\\\ 1 & 0 \\end{pmatrix}\\) describes a rotation in our \\(\\hat{i}, \\hat{j}\\) system. To find the equivalent matrix in Jennifer’s system, we perform a three-step process:\n\nTranslate to our language: Take a vector \\(\\vec{v}\\) described in Jennifer’s coordinates and multiply it by the change of basis matrix A to find its representation in our system. (\\(A\\vec{v}\\))\nApply the transformation: Multiply the result by the standard transformation matrix M to perform the rotation. (\\(M(A\\vec{v})\\))\nTranslate back to Jennifer’s language: Multiply the result by the inverse change of basis matrix A⁻¹ to get the final vector in Jennifer’s coordinates. (\\(A^{-1}(M(A\\vec{v}))\\))\n\n\nThis sequence of operations, \\(A^{-1}MA\\), gives a single matrix that represents the same geometric transformation but from the perspective of the alternate coordinate system. This expression suggests a form of “mathematical empathy”: shifting to another’s perspective (A), performing an action (M), and then shifting back (A⁻¹).\n\n\n\n2. Definitions\n\nBasis Vectors: A set of linearly independent vectors whose linear combinations can represent every vector in a given vector space. For 2D space, the standard basis vectors are \\(\\hat{i} = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\) and \\(\\hat{j} = \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\\).\nCoordinate System: A framework defined by a set of basis vectors and an origin, which allows vectors and transformations to be described numerically. The same geometric vector will have different coordinates in different systems.\nScalar: A single number used to scale a vector, stretching or shrinking it without changing its direction.\nChange of Basis Matrix: A matrix used to translate the coordinates of a vector from one basis to another. Its columns are the basis vectors of the “new” coordinate system written in the “old” coordinate system’s language.\nInverse of a Matrix (\\(A^{-1}\\)): A matrix which, when multiplied by the original matrix \\(A\\), yields the identity matrix. Geometrically, it represents the transformation that reverses the effect of \\(A\\).\n\n\n\n3. Formulas\n\nVector as a Linear Combination: A vector \\(\\vec{v}\\) with coordinates \\(\\begin{pmatrix} x \\\\ y \\end{pmatrix}\\) in the standard basis is given by: \\[ \\vec{v} = x\\hat{i} + y\\hat{j} \\]\nTranslation from Alternate to Standard Basis: Let \\(A\\) be the change of basis matrix whose columns are the alternate basis vectors. A vector \\(\\vec{v}_{\\text{alt}}\\) in the alternate basis is translated to the standard basis \\(\\vec{v}_{\\text{std}}\\) by: \\[ \\vec{v}_{\\text{std}} = A \\cdot \\vec{v}_{\\text{alt}} \\]\nTranslation from Standard to Alternate Basis: A vector \\(\\vec{v}_{\\text{std}}\\) in the standard basis is translated to the alternate basis \\(\\vec{v}_{\\text{alt}}\\) by: \\[ \\vec{v}_{\\text{alt}} = A^{-1} \\cdot \\vec{v}_{\\text{std}} \\]\nTransformation Matrix in an Alternate Basis: If \\(M\\) is the transformation matrix in the standard basis, the equivalent transformation matrix \\(M'\\) in the alternate basis (defined by matrix \\(A\\)) is: \\[ M' = A^{-1}MA \\]\n\n\n\n4. Mistakes\n\nConfusing the Direction of Translation: Multiplying by the change of basis matrix \\(A\\) converts from the alternate basis to the standard basis, not the other way around. The inverse \\(A^{-1}\\) is needed to go from standard to alternate.\nAssuming a Transformation Matrix is Universal: Believing that a matrix for a transformation (e.g., rotation) is the same regardless of the coordinate system. Why it’s wrong: The matrix’s columns describe where the basis vectors land, so a change in basis vectors necessitates a change in the transformation matrix.\nIncorrectly Constructing the Change of Basis Matrix: The columns must be the basis vectors of the target language expressed in the source language’s coordinates. For example, to go from Jennifer’s language to ours, the columns are Jennifer’s basis vectors in our coordinates.\nForgetting the Order of Matrix Multiplication: The expression \\(A^{-1}MA\\) is not commutative. The order matters: first translate, then apply the transformation, then translate back.\nMisinterpreting Coordinates: Forgetting that a set of coordinates like \\(\\begin{pmatrix} c_1 \\\\ c_2 \\end{pmatrix}\\) is only meaningful with respect to a specific set of basis vectors. The numbers themselves are just scalars.\n\n\n\n5. Examples\n\n5.1. Standard to Alternate Coordinates\nQuestion: Your standard coordinate system uses basis vectors \\(\\hat{i} = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\) and \\(\\hat{j} = \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\\). An alternate system uses basis vectors \\(\\vec{b_1} = \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}\\) and \\(\\vec{b_2} = \\begin{pmatrix} -1 \\\\ 1 \\end{pmatrix}\\). What are the coordinates of the vector \\(\\vec{v} = \\begin{pmatrix} 4 \\\\ 6 \\end{pmatrix}\\) (in your system) in the alternate system?\n\n\nClick to see the solution\n\n\nConstruct the change of basis matrix A from the alternate basis to the standard basis. The columns of A are the alternate basis vectors. \\[ A = \\begin{pmatrix} 1 & -1 \\\\ 1 & 1 \\end{pmatrix} \\]\nFind the inverse of A (\\(A^{-1}\\)). For a 2x2 matrix \\(\\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}\\), the inverse is \\(\\frac{1}{ad-bc} \\begin{pmatrix} d & -b \\\\ -c & a \\end{pmatrix}\\). \\[ \\text{det}(A) = (1)(1) - (-1)(1) = 2 \\] \\[ A^{-1} = \\frac{1}{2} \\begin{pmatrix} 1 & 1 \\\\ -1 & 1 \\end{pmatrix} = \\begin{pmatrix} 0.5 & 0.5 \\\\ -0.5 & 0.5 \\end{pmatrix} \\]\nMultiply \\(A^{-1}\\) by the vector \\(\\vec{v}\\) to translate it into the alternate system. \\[ \\vec{v}_{\\text{alt}} = A^{-1} \\vec{v}_{\\text{std}} = \\begin{pmatrix} 0.5 & 0.5 \\\\ -0.5 & 0.5 \\end{pmatrix} \\begin{pmatrix} 4 \\\\ 6 \\end{pmatrix} = \\begin{pmatrix} (0.5)(4) + (0.5)(6) \\\\ (-0.5)(4) + (0.5)(6) \\end{pmatrix} = \\begin{pmatrix} 2 + 3 \\\\ -2 + 3 \\end{pmatrix} = \\begin{pmatrix} 5 \\\\ 1 \\end{pmatrix} \\]\n\nAnswer: The coordinates of the vector in the alternate system are \\(\\begin{pmatrix} 5 \\\\ 1 \\end{pmatrix}\\).\n\n\n\n5.2. Alternate to Standard Coordinates\nQuestion: Using the same alternate basis from the previous example (\\(\\vec{b_1} = \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}\\), \\(\\vec{b_2} = \\begin{pmatrix} -1 \\\\ 1 \\end{pmatrix}\\)), a vector has coordinates \\(\\begin{pmatrix} 3 \\\\ -2 \\end{pmatrix}\\) in this alternate system. What are its coordinates in the standard system?\n\n\nClick to see the solution\n\n\nConstruct the change of basis matrix A. \\[ A = \\begin{pmatrix} 1 & -1 \\\\ 1 & 1 \\end{pmatrix} \\]\nMultiply A by the vector’s alternate coordinates. \\[ \\vec{v}_{\\text{std}} = A \\vec{v}_{\\text{alt}} = \\begin{pmatrix} 1 & -1 \\\\ 1 & 1 \\end{pmatrix} \\begin{pmatrix} 3 \\\\ -2 \\end{pmatrix} = \\begin{pmatrix} (1)(3) + (-1)(-2) \\\\ (1)(3) + (1)(-2) \\end{pmatrix} = \\begin{pmatrix} 3 + 2 \\\\ 3 - 2 \\end{pmatrix} = \\begin{pmatrix} 5 \\\\ 1 \\end{pmatrix} \\]\n\nAnswer: The coordinates of the vector in the standard system are \\(\\begin{pmatrix} 5 \\\\ 1 \\end{pmatrix}\\).\n\n\n\n5.3. Transformation in an Alternate Basis (Conceptual)\nQuestion: You have a transformation that reflects vectors across the y-axis, represented by the matrix \\(M = \\begin{pmatrix} -1 & 0 \\\\ 0 & 1 \\end{pmatrix}\\). Using the alternate basis from before, \\(\\vec{b_1} = \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}\\) and \\(\\vec{b_2} = \\begin{pmatrix} -1 \\\\ 1 \\end{pmatrix}\\), find the matrix that represents this same reflection from the perspective of the alternate coordinate system.\n\n\nClick to see the solution\n\n\nRecall the necessary matrices:\n\nChange of basis matrix: \\(A = \\begin{pmatrix} 1 & -1 \\\\ 1 & 1 \\end{pmatrix}\\)\nInverse change of basis: \\(A^{-1} = \\begin{pmatrix} 0.5 & 0.5 \\\\ -0.5 & 0.5 \\end{pmatrix}\\)\nTransformation matrix: \\(M = \\begin{pmatrix} -1 & 0 \\\\ 0 & 1 \\end{pmatrix}\\)\n\nUse the formula \\(M' = A^{-1}MA\\).\n\nFirst, compute \\(MA\\): \\[ MA = \\begin{pmatrix} -1 & 0 \\\\ 0 & 1 \\end{pmatrix} \\begin{pmatrix} 1 & -1 \\\\ 1 & 1 \\end{pmatrix} = \\begin{pmatrix} (-1)(1) + (0)(1) & (-1)(-1) + (0)(1) \\\\ (0)(1) + (1)(1) & (0)(-1) + (1)(1) \\end{pmatrix} = \\begin{pmatrix} -1 & 1 \\\\ 1 & 1 \\end{pmatrix} \\]\nNext, compute \\(A^{-1}(MA)\\): \\[ M' = \\begin{pmatrix} 0.5 & 0.5 \\\\ -0.5 & 0.5 \\end{pmatrix} \\begin{pmatrix} -1 & 1 \\\\ 1 & 1 \\end{pmatrix} = \\begin{pmatrix} (0.5)(-1) + (0.5)(1) & (0.5)(1) + (0.5)(1) \\\\ (-0.5)(-1) + (0.5)(1) & (-0.5)(1) + (0.5)(1) \\end{pmatrix} = \\begin{pmatrix} 0 & 1 \\\\ 1 & 0 \\end{pmatrix} \\]\n\n\nAnswer: The transformation matrix in Jennifer’s coordinate system is \\(\\begin{pmatrix} 0 & 1 \\\\ 1 & 0 \\end{pmatrix}\\).\n\n\n\n5.4. Verifying the Transformation\nQuestion: Using the result from the previous problem, take the vector with alternate coordinates \\(\\begin{pmatrix} 5 \\\\ 1 \\end{pmatrix}\\) and apply the alternate transformation matrix \\(\\begin{pmatrix} 0 & 1 \\\\ 1 & 0 \\end{pmatrix}\\). Translate the result back to standard coordinates and verify it’s a reflection of the original standard vector \\(\\begin{pmatrix} 4 \\\\ 6 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nOriginal vectors:\n\nStandard coordinates: \\(\\begin{pmatrix} 4 \\\\ 6 \\end{pmatrix}\\). Its reflection across the y-axis is \\(\\begin{pmatrix} -4 \\\\ 6 \\end{pmatrix}\\).\nAlternate coordinates: \\(\\begin{pmatrix} 5 \\\\ 1 \\end{pmatrix}\\).\n\nApply the alternate transformation matrix: \\[ \\begin{pmatrix} 0 & 1 \\\\ 1 & 0 \\end{pmatrix} \\begin{pmatrix} 5 \\\\ 1 \\end{pmatrix} = \\begin{pmatrix} (0)(5) + (1)(1) \\\\ (1)(5) + (0)(1) \\end{pmatrix} = \\begin{pmatrix} 1 \\\\ 5 \\end{pmatrix} \\] This is the transformed vector in alternate coordinates.\nTranslate the result back to standard coordinates using the matrix \\(A\\): \\[ A \\cdot \\vec{v}'_{\\text{alt}} = \\begin{pmatrix} 1 & -1 \\\\ 1 & 1 \\end{pmatrix} \\begin{pmatrix} 1 \\\\ 5 \\end{pmatrix} = \\begin{pmatrix} (1)(1) + (-1)(5) \\\\ (1)(1) + (1)(5) \\end{pmatrix} = \\begin{pmatrix} -4 \\\\ 6 \\end{pmatrix} \\]\n\nAnswer: The result \\(\\begin{pmatrix} -4 \\\\ 6 \\end{pmatrix}\\) is indeed the reflection of the original vector \\(\\begin{pmatrix} 4 \\\\ 6 \\end{pmatrix}\\). The alternate matrix works correctly.\n\n\n\n5.5. Different Basis\nQuestion: Let the standard basis be \\(\\hat{i}, \\hat{j}\\). An alternate basis is given by \\(\\vec{b_1} = \\begin{pmatrix} 3 \\\\ 0 \\end{pmatrix}\\) and \\(\\vec{b_2} = \\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix}\\). What are the standard coordinates of a vector \\(\\vec{w}\\) which has coordinates \\(\\begin{pmatrix} -1 \\\\ 4 \\end{pmatrix}\\) in the alternate basis?\n\n\nClick to see the solution\n\n\nConstruct the change of basis matrix A: \\[ A = \\begin{pmatrix} 3 & 1 \\\\ 0 & 2 \\end{pmatrix} \\]\nMultiply A by the alternate coordinates: \\[ \\vec{w}_{\\text{std}} = \\begin{pmatrix} 3 & 1 \\\\ 0 & 2 \\end{pmatrix} \\begin{pmatrix} -1 \\\\ 4 \\end{pmatrix} = \\begin{pmatrix} (3)(-1) + (1)(4) \\\\ (0)(-1) + (2)(4) \\end{pmatrix} = \\begin{pmatrix} 1 \\\\ 8 \\end{pmatrix} \\]\n\nAnswer: The standard coordinates are \\(\\begin{pmatrix} 1 \\\\ 8 \\end{pmatrix}\\).\n\n\n\n5.6. Another Standard to Alternate Translation\nQuestion: Using the basis from the previous question (\\(\\vec{b_1} = \\begin{pmatrix} 3 \\\\ 0 \\end{pmatrix}\\), \\(\\vec{b_2} = \\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix}\\)), find the alternate coordinates for the standard vector \\(\\vec{u} = \\begin{pmatrix} 6 \\\\ 6 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nFind the inverse of the change of basis matrix \\(A = \\begin{pmatrix} 3 & 1 \\\\ 0 & 2 \\end{pmatrix}\\): \\[ \\text{det}(A) = (3)(2) - (1)(0) = 6 \\] \\[ A^{-1} = \\frac{1}{6} \\begin{pmatrix} 2 & -1 \\\\ 0 & 3 \\end{pmatrix} = \\begin{pmatrix} 1/3 & -1/6 \\\\ 0 & 1/2 \\end{pmatrix} \\]\nMultiply \\(A^{-1}\\) by the standard vector \\(\\vec{u}\\): \\[ \\vec{u}_{\\text{alt}} = \\begin{pmatrix} 1/3 & -1/6 \\\\ 0 & 1/2 \\end{pmatrix} \\begin{pmatrix} 6 \\\\ 6 \\end{pmatrix} = \\begin{pmatrix} (1/3)(6) + (-1/6)(6) \\\\ (0)(6) + (1/2)(6) \\end{pmatrix} = \\begin{pmatrix} 2 - 1 \\\\ 3 \\end{pmatrix} = \\begin{pmatrix} 1 \\\\ 3 \\end{pmatrix} \\]\n\nAnswer: The coordinates in the alternate basis are \\(\\begin{pmatrix} 1 \\\\ 3 \\end{pmatrix}\\).\n\n\n\n5.7. A Non-Standard Origin\nQuestion: All previous examples assume the origins of both coordinate systems are the same. If Jennifer’s origin was located at \\(\\begin{pmatrix} 5 \\\\ 5 \\end{pmatrix}\\) in our system, how would that change the translation of a vector?\n\n\nClick to see the solution\n\nThe change of basis matrices only handle linear transformations (scaling and rotation), which keep the origin fixed. Translating the origin is an affine transformation, not a linear one. To handle this, you would first perform the change of basis rotation/scaling with the matrix, and then add the offset vector of the new origin. 1. Translate the vector from her coordinates to ours using the change of basis matrix \\(A\\). 2. Add the vector for her origin’s position in our coordinates.\nThis two-step process (matrix multiplication followed by vector addition) is required when origins differ.\nAnswer: The translation would involve multiplying by the change of basis matrix and then adding the vector representing the new origin’s position.",
    "crumbs": [
      "Essence of linear algebra",
      "13. Change of Basis, Coordinate Systems"
    ]
  },
  {
    "objectID": "Essence of linear algebra/vid_4.html",
    "href": "Essence of linear algebra/vid_4.html",
    "title": "4. Matrix Multiplication, Composition of Linear Transformations",
    "section": "",
    "text": "1. Summary\n\n1.1 Recap: Linear Transformations and Matrices\nA linear transformation is a function that takes a vector as an input and produces another vector as an output. Geometrically, it’s a transformation of space that keeps grid lines parallel and evenly spaced, and the origin remains fixed.\nA key principle is that a linear transformation is entirely determined by where it sends the basis vectors, î and ĵ in two dimensions. Any vector v with coordinates \\(\\begin{pmatrix} x \\\\ y \\end{pmatrix}\\) can be expressed as a linear combination of these basis vectors: $ = x + y $.\nBecause the transformation is linear, the transformed vector L(v) can be found using the same linear combination of the transformed basis vectors: \\[ L(\\vec{v}) = xL(\\hat{i}) + yL(\\hat{j}) \\]\nThe transformation is captured numerically by a matrix, where the columns are the coordinates of the transformed basis vectors. The first column is L(î) and the second column is L(ĵ). Multiplying this matrix by a vector \\(\\begin{pmatrix} x \\\\ y \\end{pmatrix}\\) is the computational method for applying the transformation.\n\n\n\n1.2 Composition of Transformations\nOften, you might want to apply multiple linear transformations sequentially. For instance, you could first apply a rotation and then a shear. The overall effect, from start to finish, is a single new linear transformation called the composition of the two original transformations.\nLike any linear transformation, this composite transformation can be described by its own matrix. The question is how to find this new matrix from the original two.\n\n\n1.3 Matrix Multiplication as Composition\nThe product of two matrices, say \\(M_2 M_1\\), represents the geometric action of applying the transformation of \\(M_1\\) first, followed by the transformation of \\(M_2\\). To find the matrix for this composite transformation, we track where the basis vectors î and ĵ land.\n\nTrack î:\n\nFirst, apply transformation \\(M_1\\) to î. The resulting vector is given by the first column of \\(M_1\\).\nThen, apply transformation \\(M_2\\) to this new vector. This is done by multiplying the matrix \\(M_2\\) by the first column of \\(M_1\\).\nThe final vector is the first column of the new composition matrix, \\(M_2 M_1\\).\n\nTrack ĵ:\n\nSimilarly, apply \\(M_1\\) to ĵ. The result is the second column of \\(M_1\\).\nApply \\(M_2\\) to that resulting vector by multiplying \\(M_2\\) by the second column of \\(M_1\\).\nThe final vector is the second column of the composition matrix, \\(M_2 M_1\\).\n\n\n\n1.3.1 The Order of Multiplication Matters\nWhen composing transformations, the order is crucial. Applying a rotation and then a shear gives a different result than applying a shear and then a rotation.\n\nThis means that matrix multiplication is not commutative; in general, \\(M_1 M_2 \\neq M_2 M_1\\). The order of operations is read from right to left, just like in function notation. For the product \\(M_2 M_1\\), you first apply the transformation on the right (\\(M_1\\)), then the one on the left (\\(M_2\\)).\n\n\n\n1.4 Associativity\nWhile not commutative, matrix multiplication is associative. This means if you are multiplying three matrices, say A, B, and C, the order of multiplication doesn’t change the result: \\[ (AB)C = A(BC) \\] Geometrically, this is intuitive. Both sides of the equation represent applying transformation C, then B, then A. It doesn’t matter if you first combine B and C into a single transformation BC and then apply A, or if you first combine A and B into AB and then apply C. The sequence of transformations remains the same.\nThis geometric intuition provides a clear understanding of associativity, which is much more enlightening than a tedious numerical proof. As mathematician Emil Artin noted, “It is my experience that proofs involving matrices can be shortened by 50% if one throws the matrices out.”\n\n\n\n2. Definitions\n\nComposition (of transformations): The overall transformation resulting from applying one linear transformation followed by another.\nMatrix Multiplication: The operation of multiplying two matrices, which corresponds to the composition of their respective linear transformations. The product \\(M_2 M_1\\) represents applying transformation \\(M_1\\) first, then \\(M_2\\).\nCommutativity: A property of an operation where the order of operands does not change the outcome (e.g., \\(a+b = b+a\\)). Matrix multiplication is generally not commutative.\nAssociativity: A property of an operation where the grouping of operands does not change the outcome. Matrix multiplication is associative: \\((AB)C = A(BC)\\).\n\n\n\n3. Formulas\n\nMatrix-Vector Multiplication: \\[ \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\end{pmatrix} = x \\begin{pmatrix} a \\\\ c \\end{pmatrix} + y \\begin{pmatrix} b \\\\ d \\end{pmatrix} = \\begin{pmatrix} ax + by \\\\ cx + dy \\end{pmatrix} \\]\n2x2 Matrix Multiplication: \\[ \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} \\begin{pmatrix} e & f \\\\ g & h \\end{pmatrix} = \\begin{pmatrix} ae+bg & af+bh \\\\ ce+dg & cf+dh \\end{pmatrix} \\]\nAssociative Property: \\[ (M_1 M_2) M_3 = M_1 (M_2 M_3) \\]\n\n\n\n4. Mistakes\n\nAssuming matrix multiplication is commutative: Believing that \\(M_1 M_2\\) is always equal to \\(M_2 M_1\\). Why it’s wrong: Applying transformations in different orders generally produces different final results. For example, rotating then shearing is not the same as shearing then rotating.\nReading the order of operations from left to right: In the product \\(M_2 M_1\\), applying the transformation \\(M_2\\) first. Why it’s wrong: The convention comes from function notation. The matrix on the right represents the first transformation to be applied, and you proceed to the left.\nMultiplying matrices element-wise: Multiplying the corresponding entries of two matrices. Why it’s wrong: This operation is not standard matrix multiplication and does not represent the composition of linear transformations.\nForgetting the geometric interpretation: Treating matrix multiplication as a purely mechanical, symbol-pushing process. Why it’s wrong: Understanding the geometry (composition of transformations) provides intuition for why the rules work the way they do and helps in remembering properties like non-commutativity and associativity.\n\n\n\n5. Examples\n\n5.1 Rotation then Shear\nQuestion: Let \\(M_1\\) be a 90-degree counter-clockwise rotation and \\(M_2\\) be a shear. Find the composition matrix for applying the rotation first, then the shear. The rotation matrix is \\(M_1 = \\begin{pmatrix} 0 & -1 \\\\ 1 & 0 \\end{pmatrix}\\), and the shear matrix is \\(M_2 = \\begin{pmatrix} 1 & 1 \\\\ 0 & 1 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\nSince the rotation is applied first, we compute the product \\(M_2 M_1\\). \\[ M_2 M_1 = \\begin{pmatrix} 1 & 1 \\\\ 0 & 1 \\end{pmatrix} \\begin{pmatrix} 0 & -1 \\\\ 1 & 0 \\end{pmatrix} \\] 1. First column: Multiply \\(M_2\\) by the first column of \\(M_1\\), \\(\\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\\). \\[ \\begin{pmatrix} 1 & 1 \\\\ 0 & 1 \\end{pmatrix} \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix} = 0 \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix} + 1 \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} = \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} \\] 2. Second column: Multiply \\(M_2\\) by the second column of \\(M_1\\), \\(\\begin{pmatrix} -1 \\\\ 0 \\end{pmatrix}\\). \\[ \\begin{pmatrix} 1 & 1 \\\\ 0 & 1 \\end{pmatrix} \\begin{pmatrix} -1 \\\\ 0 \\end{pmatrix} = -1 \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix} + 0 \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} = \\begin{pmatrix} -1 \\\\ 0 \\end{pmatrix} \\] Answer: The composition matrix is \\(\\begin{pmatrix} 1 & -1 \\\\ 1 & 0 \\end{pmatrix}\\).\n\n\n\n5.2 Shear then Rotation\nQuestion: Using the same matrices as above, find the composition matrix for applying the shear first, then the rotation.\n\n\nClick to see the solution\n\nSince the shear is applied first, we compute the product \\(M_1 M_2\\). \\[ M_1 M_2 = \\begin{pmatrix} 0 & -1 \\\\ 1 & 0 \\end{pmatrix} \\begin{pmatrix} 1 & 1 \\\\ 0 & 1 \\end{pmatrix} \\] 1. First column: Multiply \\(M_1\\) by the first column of \\(M_2\\), \\(\\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\). \\[ \\begin{pmatrix} 0 & -1 \\\\ 1 & 0 \\end{pmatrix} \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix} = 1 \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix} + 0 \\begin{pmatrix} -1 \\\\ 0 \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix} \\] 2. Second column: Multiply \\(M_1\\) by the second column of \\(M_2\\), \\(\\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}\\). \\[ \\begin{pmatrix} 0 & -1 \\\\ 1 & 0 \\end{pmatrix} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} = 1 \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix} + 1 \\begin{pmatrix} -1 \\\\ 0 \\end{pmatrix} = \\begin{pmatrix} -1 \\\\ 1 \\end{pmatrix} \\] Answer: The composition matrix is \\(\\begin{pmatrix} 0 & -1 \\\\ 1 & 1 \\end{pmatrix}\\). Notice this is different from the previous example.\n\n\n\n5.3 Numerical Multiplication 1\nQuestion: Compute the product of \\(A = \\begin{pmatrix} 1 & -2 \\\\ 1 & 0 \\end{pmatrix}\\) and \\(B = \\begin{pmatrix} 0 & 2 \\\\ 1 & 0 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\nWe want to find \\(AB\\). \\[ AB = \\begin{pmatrix} 1 & -2 \\\\ 1 & 0 \\end{pmatrix} \\begin{pmatrix} 0 & 2 \\\\ 1 & 0 \\end{pmatrix} \\] 1. First column: \\(\\begin{pmatrix} 1 & -2 \\\\ 1 & 0 \\end{pmatrix} \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix} = 0\\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} + 1\\begin{pmatrix} -2 \\\\ 0 \\end{pmatrix} = \\begin{pmatrix} -2 \\\\ 0 \\end{pmatrix}\\) 2. Second column: \\(\\begin{pmatrix} 1 & -2 \\\\ 1 & 0 \\end{pmatrix} \\begin{pmatrix} 2 \\\\ 0 \\end{pmatrix} = 2\\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} + 0\\begin{pmatrix} -2 \\\\ 0 \\end{pmatrix} = \\begin{pmatrix} 2 \\\\ 2 \\end{pmatrix}\\) Answer: The product is \\(\\begin{pmatrix} -2 & 2 \\\\ 0 & 2 \\end{pmatrix}\\).\n\n\n\n5.4 Numerical Multiplication 2\nQuestion: Compute the product of \\(A = \\begin{pmatrix} 2 & 1 \\\\ 3 & 4 \\end{pmatrix}\\) and \\(B = \\begin{pmatrix} 5 & 6 \\\\ 7 & 8 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\nWe calculate \\(AB\\) using the formula: $\n\\[\\begin{pmatrix} ae+bg & af+bh \\\\ ce+dg & cf+dh \\end{pmatrix}\\]\n\\(.\\)$\n\\[\\begin{pmatrix} 2(5)+1(7) & 2(6)+1(8) \\\\ 3(5)+4(7) & 3(6)+4(8) \\end{pmatrix}\\]\n\\[\n\\]\n\\[\\begin{pmatrix} 10+7 & 12+8 \\\\ 15+28 & 18+32 \\end{pmatrix}\\]\n$$ Answer: The product is \\(\\begin{pmatrix} 17 & 20 \\\\ 43 & 50 \\end{pmatrix}\\).\n\n\n\n5.5 Verifying Non-Commutativity\nQuestion: Given \\(M_1 = \\begin{pmatrix} 1 & 1 \\\\ 0 & 1 \\end{pmatrix}\\) and \\(M_2 = \\begin{pmatrix} 2 & 0 \\\\ 0 & 1/2 \\end{pmatrix}\\), show that \\(M_1 M_2 \\neq M_2 M_1\\).\n\n\nClick to see the solution\n\nFirst, compute \\(M_1 M_2\\): \\[ M_1 M_2 = \\begin{pmatrix} 1 & 1 \\\\ 0 & 1 \\end{pmatrix} \\begin{pmatrix} 2 & 0 \\\\ 0 & 1/2 \\end{pmatrix} = \\begin{pmatrix} 1(2)+1(0) & 1(0)+1(1/2) \\\\ 0(2)+1(0) & 0(0)+1(1/2) \\end{pmatrix} = \\begin{pmatrix} 2 & 1/2 \\\\ 0 & 1/2 \\end{pmatrix} \\] Next, compute \\(M_2 M_1\\): \\[ M_2 M_1 = \\begin{pmatrix} 2 & 0 \\\\ 0 & 1/2 \\end{pmatrix} \\begin{pmatrix} 1 & 1 \\\\ 0 & 1 \\end{pmatrix} = \\begin{pmatrix} 2(1)+0(0) & 2(1)+0(1) \\\\ 0(1)+1/2(0) & 0(1)+1/2(1) \\end{pmatrix} = \\begin{pmatrix} 2 & 2 \\\\ 0 & 1/2 \\end{pmatrix} \\] Answer: Since \\(\\begin{pmatrix} 2 & 1/2 \\\\ 0 & 1/2 \\end{pmatrix} \\neq \\begin{pmatrix} 2 & 2 \\\\ 0 & 1/2 \\end{pmatrix}\\), the matrices do not commute.\n\n\n\n5.6 Verifying Associativity\nQuestion: Given \\(A = \\begin{pmatrix} 1 & 0 \\\\ 1 & 1 \\end{pmatrix}\\), \\(B = \\begin{pmatrix} 2 & 1 \\\\ 0 & 1 \\end{pmatrix}\\), and \\(C = \\begin{pmatrix} 3 & 3 \\\\ 2 & 1 \\end{pmatrix}\\), show that \\((AB)C = A(BC)\\).\n\n\nClick to see the solution\n\nFirst, compute the left side, \\((AB)C\\): \\[ AB = \\begin{pmatrix} 1 & 0 \\\\ 1 & 1 \\end{pmatrix} \\begin{pmatrix} 2 & 1 \\\\ 0 & 1 \\end{pmatrix} = \\begin{pmatrix} 2 & 1 \\\\ 2 & 2 \\end{pmatrix} \\] \\[ (AB)C = \\begin{pmatrix} 2 & 1 \\\\ 2 & 2 \\end{pmatrix} \\begin{pmatrix} 3 & 3 \\\\ 2 & 1 \\end{pmatrix} = \\begin{pmatrix} 2(3)+1(2) & 2(3)+1(1) \\\\ 2(3)+2(2) & 2(3)+2(1) \\end{pmatrix} = \\begin{pmatrix} 8 & 7 \\\\ 10 & 8 \\end{pmatrix} \\] Next, compute the right side, \\(A(BC)\\): \\[ BC = \\begin{pmatrix} 2 & 1 \\\\ 0 & 1 \\end{pmatrix} \\begin{pmatrix} 3 & 3 \\\\ 2 & 1 \\end{pmatrix} = \\begin{pmatrix} 2(3)+1(2) & 2(3)+1(1) \\\\ 0(3)+1(2) & 0(3)+1(1) \\end{pmatrix} = \\begin{pmatrix} 8 & 7 \\\\ 2 & 1 \\end{pmatrix} \\] \\[ A(BC) = \\begin{pmatrix} 1 & 0 \\\\ 1 & 1 \\end{pmatrix} \\begin{pmatrix} 8 & 7 \\\\ 2 & 1 \\end{pmatrix} = \\begin{pmatrix} 1(8)+0(2) & 1(7)+0(1) \\\\ 1(8)+1(2) & 1(7)+1(1) \\end{pmatrix} = \\begin{pmatrix} 8 & 7 \\\\ 10 & 8 \\end{pmatrix} \\] Answer: Both sides yield the same result, \\(\\begin{pmatrix} 8 & 7 \\\\ 10 & 8 \\end{pmatrix}\\), demonstrating associativity.\n\n\n\n5.7 Multiplication with Identity Matrix\nQuestion: Let \\(A = \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}\\) and \\(I = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix}\\). Compute \\(AI\\) and \\(IA\\).\n\n\nClick to see the solution\n\nFirst, compute \\(AI\\): \\[ AI = \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} = \\begin{pmatrix} a(1)+b(0) & a(0)+b(1) \\\\ c(1)+d(0) & c(0)+d(1) \\end{pmatrix} = \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} \\] Next, compute \\(IA\\): \\[ IA = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} = \\begin{pmatrix} 1(a)+0(c) & 1(b)+0(d) \\\\ 0(a)+1(c) & 0(b)+1(d) \\end{pmatrix} = \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} \\] Answer: Both \\(AI\\) and \\(IA\\) equal \\(A\\). The matrix \\(I\\) is the identity matrix, and it represents a transformation that does nothing.",
    "crumbs": [
      "Essence of linear algebra",
      "4. Matrix Multiplication, Composition of Linear Transformations"
    ]
  },
  {
    "objectID": "Essence of linear algebra/vid_10.html",
    "href": "Essence of linear algebra/vid_10.html",
    "title": "10. Cross Product, Duality, Determinants, Linear Transformations",
    "section": "",
    "text": "1. Summary\n\n1.1 Introduction to the Cross Product\nThis chapter introduces the cross product, a fundamental operation in linear algebra, from two perspectives. The first part covers the standard geometric and computational introduction. The second part, detailed in the next chapter, explores a deeper understanding through the lens of linear transformations and duality.\n\n\n1.2 Cross Product in Two Dimensions\n\n1.2.1 Geometric Interpretation: Signed Area\nWhile the true cross product is a 3D operation, a related concept exists in 2D. Given two vectors, \\(\\vec{v}\\) and \\(\\vec{w}\\), they define a parallelogram. The cross product of these two vectors, \\(\\vec{v} \\times \\vec{w}\\), represents the signed area of this parallelogram.\n\n\nPositive Area: The area is considered positive if \\(\\vec{v}\\) is to the right of \\(\\vec{w}\\). This corresponds to a counter-clockwise orientation from \\(\\vec{v}\\) to \\(\\vec{w}\\). The convention is established by the basis vectors: \\(\\hat{i} \\times \\hat{j} = +1\\).\nNegative Area: The area is negative if \\(\\vec{v}\\) is to the left of \\(\\vec{w}\\). This corresponds to a clockwise orientation.\nZero Area: If the vectors are collinear (pointing in the same or opposite directions), the parallelogram has no area, and the cross product is zero.\n\nThis orientation dependency means that the order of operations is crucial. The cross product is anti-commutative: \\[ \\vec{v} \\times \\vec{w} = -(\\vec{w} \\times \\vec{v}) \\]\n\n\n1.2.2 Computation with Determinants\nThe signed area of the parallelogram can be calculated using the determinant. Construct a 2x2 matrix where the first column is the components of \\(\\vec{v}\\) and the second column is the components of \\(\\vec{w}\\). The determinant of this matrix equals the signed area.\nFor \\(\\vec{v} = \\begin{pmatrix} v_1 \\\\ v_2 \\end{pmatrix}\\) and \\(\\vec{w} = \\begin{pmatrix} w_1 \\\\ w_2 \\end{pmatrix}\\): \\[ \\vec{v} \\times \\vec{w} = \\det \\begin{pmatrix} v_1 & w_1 \\\\ v_2 & w_2 \\end{pmatrix} = v_1w_2 - v_2w_1 \\]\nThe connection arises because a linear transformation that maps the basis vectors \\(\\hat{i}\\) and \\(\\hat{j}\\) to \\(\\vec{v}\\) and \\(\\vec{w}\\) respectively, will transform the unit square (with area 1) into the parallelogram spanned by \\(\\vec{v}\\) and \\(\\vec{w}\\). The determinant of this transformation matrix measures the factor by which area is scaled, which in this case is the area of the parallelogram itself.\n\n\n\n1.3 Cross Product in Three Dimensions\nThe true cross product is an operation that takes two 3D vectors and returns a new 3D vector. Let this new vector be \\(\\vec{p} = \\vec{v} \\times \\vec{w}\\).\n\n1.3.1 Geometric Interpretation\n\nMagnitude: The length of the resulting vector, \\(|\\vec{p}|\\), is equal to the area of the parallelogram spanned by \\(\\vec{v}\\) and \\(\\vec{w}\\).\nDirection: The direction of \\(\\vec{p}\\) is perpendicular to the plane containing the parallelogram.\n\n\n\n\n1.3.2 The Right-Hand Rule\nSince there are two possible directions perpendicular to a plane, a convention called the Right-Hand Rule is used to determine the correct one: 1. Point the index finger of your right hand in the direction of the first vector, \\(\\vec{v}\\). 2. Point your middle finger in the direction of the second vector, \\(\\vec{w}\\). 3. Your thumb will now point in the direction of the cross product, \\(\\vec{v} \\times \\vec{w}\\).\n\n\n1.3.3 Computation with a Formal Determinant\nThe standard method for computing the 3D cross product uses a formal determinant of a 3x3 matrix. This is a notational mnemonic rather than a mathematically rigorous determinant, as the first column contains basis vectors instead of numbers.\n\nCreate a 3x3 matrix.\nThe first column consists of the basis vectors: \\(\\hat{i}, \\hat{j}, \\hat{k}\\).\nThe second column contains the components of the first vector, \\(\\vec{v}\\).\nThe third column contains the components of the second vector, \\(\\vec{w}\\).\n\n\\[\n\\vec{v} \\times \\vec{w} = \\det \\begin{pmatrix} \\hat{i} & v_1 & w_1 \\\\ \\hat{j} & v_2 & w_2 \\\\ \\hat{k} & v_3 & w_3 \\end{pmatrix}\n\\]\nExpanding this determinant gives the resulting vector:\n\\[\n\\vec{v} \\times \\vec{w} = \\hat{i}(v_2w_3 - v_3w_2) + \\hat{j}(v_3w_1 - v_1w_3) + \\hat{k}(v_1w_2 - v_2w_1)\n\\]\nThis can be written as a final vector:\n\\[\n\\begin{pmatrix} v_2w_3 - v_3w_2 \\\\ v_3w_1 - v_1w_3 \\\\ v_1w_2 - v_2w_1 \\end{pmatrix}\n\\] The deeper connection between this computation, linear transformations, and duality is explored in the next chapter.\n\n\n\n\n2. Definitions\n\nCross Product (3D): An operation on two vectors in 3D space, \\(\\vec{v}\\) and \\(\\vec{w}\\), that results in a new vector, \\(\\vec{p}\\), which is perpendicular to both \\(\\vec{v}\\) and \\(\\vec{w}\\). The magnitude of \\(\\vec{p}\\) is the area of the parallelogram formed by \\(\\vec{v}\\) and \\(\\vec{w}\\), and its direction is determined by the right-hand rule.\nSigned Area (2D): A scalar value representing the area of a parallelogram defined by two 2D vectors. The sign (+ or -) depends on the orientation of the vectors relative to each other.\nDeterminant: A scalar value calculated from a square matrix. Geometrically, it represents the factor by which area (in 2D) or volume (in 3D) is scaled under the linear transformation described by the matrix. A negative determinant indicates a change in orientation.\nRight-Hand Rule: A mnemonic used to determine the direction of the cross product vector. It establishes a standard orientation for 3D space.\nAnti-commutative: A property of an operation where changing the order of the operands negates the result, such as \\(\\vec{v} \\times \\vec{w} = -(\\vec{w} \\times \\vec{v})\\).\n\n\n\n3. Formulas\n\n2D Cross Product (Signed Area): \\[ \\vec{v} \\times \\vec{w} = \\det \\begin{pmatrix} v_1 & w_1 \\\\ v_2 & w_2 \\end{pmatrix} = v_1w_2 - v_2w_1 \\]\n3D Cross Product (Determinant Mnemonic): \\[ \\vec{v} \\times \\vec{w} = \\det \\begin{pmatrix} \\hat{i} & v_1 & w_1 \\\\ \\hat{j} & v_2 & w_2 \\\\ \\hat{k} & v_3 & w_3 \\end{pmatrix} \\]\n3D Cross Product (Component Formula): \\[ \\vec{v} \\times \\vec{w} = \\begin{pmatrix} v_2w_3 - v_3w_2 \\\\ v_3w_1 - v_1w_3 \\\\ v_1w_2 - v_2w_1 \\end{pmatrix} \\]\nAnti-Commutative Property: \\[ \\vec{v} \\times \\vec{w} = -(\\vec{w} \\times \\vec{v}) \\]\n\n\n\n4. Mistakes\n\nConfusing Cross Product with Dot Product: The dot product of two vectors results in a scalar value, whereas the cross product results in a vector.\nIgnoring the Order of Vectors: The cross product is anti-commutative, meaning \\(\\vec{v} \\times \\vec{w} \\neq \\vec{w} \\times \\vec{v}\\). Swapping the order inverts the direction of the resulting vector.\nIncorrectly Applying the Right-Hand Rule: Using the left hand or misaligning the fingers (e.g., pointing the index finger to \\(\\vec{w}\\) first) will result in a vector pointing in the opposite direction.\nApplying the 3D Cross Product Formula to 2D Vectors: The standard cross product is defined for 3D vectors. For 2D vectors, the concept of signed area (calculated with a 2x2 determinant) is used instead.\nAssuming the Cross Product is Associative: The cross product is not associative. In general, \\((\\vec{a} \\times \\vec{b}) \\times \\vec{c} \\neq \\vec{a} \\times (\\vec{b} \\times \\vec{c})\\).\n\n\n\n5. Examples\n\n5.1. Calculating a 2D Cross Product (Signed Area)\nQuestion: Calculate the signed area of the parallelogram formed by vectors \\(\\vec{v} = \\begin{pmatrix} 3 \\\\ 1 \\end{pmatrix}\\) and \\(\\vec{w} = \\begin{pmatrix} 2 \\\\ -1 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nSet up the determinant: Place the components of \\(\\vec{v}\\) in the first column and \\(\\vec{w}\\) in the second. \\[ \\det \\begin{pmatrix} 3 & 2 \\\\ 1 & -1 \\end{pmatrix} \\]\nCalculate the determinant: \\[ (3 \\times -1) - (2 \\times 1) = -3 - 2 = -5 \\]\n\nAnswer: The signed area is -5. The negative sign indicates that \\(\\vec{v}\\) is to the left of \\(\\vec{w}\\).\n\n\n\n5.2. Calculating a 3D Cross Product\nQuestion: Find the cross product of \\(\\vec{v} = \\begin{pmatrix} 1 \\\\ 2 \\\\ 1 \\end{pmatrix}\\) and \\(\\vec{w} = \\begin{pmatrix} 3 \\\\ 0 \\\\ 4 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nSet up the 3x3 determinant mnemonic: \\[ \\vec{v} \\times \\vec{w} = \\det \\begin{pmatrix} \\hat{i} & 1 & 3 \\\\ \\hat{j} & 2 & 0 \\\\ \\hat{k} & 1 & 4 \\end{pmatrix} \\]\nCalculate the component for \\(\\hat{i}\\): \\[ \\hat{i} \\det \\begin{pmatrix} 2 & 0 \\\\ 1 & 4 \\end{pmatrix} = \\hat{i}((2)(4) - (0)(1)) = 8\\hat{i} \\]\nCalculate the component for \\(\\hat{j}\\): \\[ \\hat{j} \\det \\begin{pmatrix} 1 & 3 \\\\ 1 & 4 \\end{pmatrix} \\rightarrow \\text{ remember to negate} \\rightarrow -\\hat{j}((1)(4) - (3)(1)) = -\\hat{j}(1) = -1\\hat{j} \\]\nCalculate the component for \\(\\hat{k}\\): \\[ \\hat{k} \\det \\begin{pmatrix} 1 & 3 \\\\ 2 & 0 \\end{pmatrix} = \\hat{k}((1)(0) - (3)(2)) = -6\\hat{k} \\]\nCombine the components: \\[ 8\\hat{i} - 1\\hat{j} - 6\\hat{k} \\]\n\nAnswer: The cross product is the vector \\(\\begin{pmatrix} 8 \\\\ -1 \\\\ -6 \\end{pmatrix}\\).\n\n\n\n5.3. Finding the Area of a Parallelogram in 3D\nQuestion: What is the area of the parallelogram defined by the vectors \\(\\vec{a} = \\begin{pmatrix} 0 \\\\ 0 \\\\ 2 \\end{pmatrix}\\) and \\(\\vec{b} = \\begin{pmatrix} 0 \\\\ 2 \\\\ 0 \\end{pmatrix}\\)?\n\n\nClick to see the solution\n\n\nFind the cross product \\(\\vec{a} \\times \\vec{b}\\): \\[ \\vec{a} \\times \\vec{b} = \\det \\begin{pmatrix} \\hat{i} & 0 & 0 \\\\ \\hat{j} & 0 & 2 \\\\ \\hat{k} & 2 & 0 \\end{pmatrix} = \\hat{i}(0\\cdot0 - 2\\cdot2) - \\hat{j}(0\\cdot0 - 0\\cdot2) + \\hat{k}(0\\cdot2 - 0\\cdot0) = -4\\hat{i} = \\begin{pmatrix} -4 \\\\ 0 \\\\ 0 \\end{pmatrix} \\]\nCalculate the magnitude (length) of the resulting vector: The area is the length of this new vector. \\[ \\text{Area} = |\\vec{a} \\times \\vec{b}| = \\sqrt{(-4)^2 + 0^2 + 0^2} = \\sqrt{16} = 4 \\]\n\nAnswer: The area of the parallelogram is 4.\n\n\n\n5.4. Anti-Commutative Property\nQuestion: Using the vectors from the previous problem, calculate \\(\\vec{b} \\times \\vec{a}\\) and show that it is equal to \\(-(\\vec{a} \\times \\vec{b})\\).\n\n\nClick to see the solution\n\n\nSet up the determinant for \\(\\vec{b} \\times \\vec{a}\\): \\[ \\vec{b} \\times \\vec{a} = \\det \\begin{pmatrix} \\hat{i} & 0 & 0 \\\\ \\hat{j} & 2 & 0 \\\\ \\hat{k} & 0 & 2 \\end{pmatrix} = \\hat{i}(2\\cdot2 - 0\\cdot0) - \\hat{j}(0\\cdot2 - 0\\cdot0) + \\hat{k}(0\\cdot0 - 2\\cdot0) = 4\\hat{i} = \\begin{pmatrix} 4 \\\\ 0 \\\\ 0 \\end{pmatrix} \\]\nCompare with the previous result: From problem 5.3, we found \\(\\vec{a} \\times \\vec{b} = \\begin{pmatrix} -4 \\\\ 0 \\\\ 0 \\end{pmatrix}\\). Therefore, \\(\\begin{pmatrix} 4 \\\\ 0 \\\\ 0 \\end{pmatrix} = - \\begin{pmatrix} -4 \\\\ 0 \\\\ 0 \\end{pmatrix}\\).\n\nAnswer: \\(\\vec{b} \\times \\vec{a} = -(\\vec{a} \\times \\vec{b})\\), confirming the anti-commutative property.\n\n\n\n5.5. Cross Product of Parallel Vectors\nQuestion: Calculate the cross product of \\(\\vec{u} = \\begin{pmatrix} 1 \\\\ 2 \\\\ 3 \\end{pmatrix}\\) and \\(\\vec{v} = \\begin{pmatrix} 2 \\\\ 4 \\\\ 6 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\nNotice that \\(\\vec{v} = 2\\vec{u}\\), so the vectors are parallel. Geometrically, the parallelogram they span is flat, so its area is zero. The resulting cross product should be the zero vector.\n\nSet up the determinant: \\[ \\vec{u} \\times \\vec{v} = \\det \\begin{pmatrix} \\hat{i} & 1 & 2 \\\\ \\hat{j} & 2 & 4 \\\\ \\hat{k} & 3 & 6 \\end{pmatrix} \\]\nCalculate components:\n\n\\(\\hat{i}\\): \\((2)(6) - (4)(3) = 12 - 12 = 0\\)\n\\(\\hat{j}\\): \\((3)(2) - (1)(6) = 6 - 6 = 0\\)\n\\(\\hat{k}\\): \\((1)(4) - (2)(2) = 4 - 4 = 0\\)\n\n\nAnswer: The cross product is the zero vector, \\(\\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\end{pmatrix}\\).\n\n\n\n5.6. Using the Right-Hand Rule\nQuestion: What is the direction of \\(\\hat{j} \\times \\hat{i}\\)?\n\n\nClick to see the solution\n\n\nPosition your right hand: Point your index finger along the positive y-axis (direction of \\(\\hat{j}\\)).\nAlign your middle finger: Point your middle finger along the positive x-axis (direction of \\(\\hat{i}\\)).\nCheck your thumb: Your thumb points along the negative z-axis.\n\nAnswer: The direction is along the negative z-axis, which is the direction of \\(-\\hat{k}\\).\n\n\n\n5.7. Scaling a Vector in a Cross Product\nQuestion: Given \\(\\vec{v} \\times \\vec{w} = \\begin{pmatrix} 8 \\\\ -1 \\\\ -6 \\end{pmatrix}\\), what is \\((3\\vec{v}) \\times \\vec{w}\\)?\n\n\nClick to see the solution\n\nScaling one of the vectors by a constant scales the resulting cross product by the same constant. This is because the area of the parallelogram is scaled by that factor.\n\nMultiply the original cross product by the scalar: \\[ 3 \\times (\\vec{v} \\times \\vec{w}) = 3 \\begin{pmatrix} 8 \\\\ -1 \\\\ -6 \\end{pmatrix} \\]\nDistribute the scalar: \\[ \\begin{pmatrix} 3 \\times 8 \\\\ 3 \\times -1 \\\\ 3 \\times -6 \\end{pmatrix} = \\begin{pmatrix} 24 \\\\ -3 \\\\ -18 \\end{pmatrix} \\]\n\nAnswer: The result is \\(\\begin{pmatrix} 24 \\\\ -3 \\\\ -18 \\end{pmatrix}\\).",
    "crumbs": [
      "Essence of linear algebra",
      "10. Cross Product, Duality, Determinants, Linear Transformations"
    ]
  },
  {
    "objectID": "Essence of linear algebra/vid_5.html",
    "href": "Essence of linear algebra/vid_5.html",
    "title": "5. Linear Transformations, Matrices, 3D Space",
    "section": "",
    "text": "1. Summary\n\n1.1 From Two to Three Dimensions\nThe principles of linear transformations that apply in two-dimensional space extend directly to three dimensions. While 2D transformations are easier to visualize on a screen, understanding them provides a solid foundation for working with higher dimensions. A linear transformation in 3D is a mapping that takes 3D vectors as inputs and produces 3D vectors as outputs, while adhering to specific rules.\n\n1.1.1 The Rules of Linear Transformations\nA transformation is considered linear if it maintains the structure of the vector space. Visually, this means: - The origin of the coordinate system remains fixed. - All grid lines, which represent the vector space, remain parallel and are evenly spaced after the transformation.\nThis ensures that the transformation is consistent across the entire space. Any vector can be described as a linear combination of basis vectors, and the transformed vector is the same linear combination of the transformed basis vectors.\n\n\n\n1.2 Basis Vectors in 3D Space\nJust as in 2D, a 3D linear transformation is completely determined by where the standard basis vectors land. In three dimensions, we have three basis vectors, each representing a unit length along one of the primary axes:\n\n\\(\\hat{i}\\) is the unit vector along the x-axis: \\(\\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix}\\).\n\\(\\hat{j}\\) is the unit vector along the y-axis: \\(\\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\end{pmatrix}\\).\n\\(\\hat{k}\\) is the unit vector along the z-axis: \\(\\begin{pmatrix} 0 \\\\ 0 \\\\ 1 \\end{pmatrix}\\).\n\nBy tracking the destination of these three vectors, we can deduce the outcome of the transformation for any other vector in the space.\n\n\n1.3 The 3x3 Transformation Matrix\nA linear transformation in 3D is encoded by a 3x3 matrix. This matrix is constructed by using the coordinates of the transformed basis vectors as its columns:\n\nThe first column contains the coordinates of where \\(\\hat{i}\\) lands.\nThe second column contains the coordinates of where \\(\\hat{j}\\) lands.\nThe third column contains the coordinates of where \\(\\hat{k}\\) lands.\n\nThis 3x3 matrix, containing nine numbers, fully describes the transformation.\n\n\n\n1.4 Applying the Transformation\nTo find the destination of a vector \\(\\vec{v}\\) with coordinates \\(\\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix}\\), you multiply the transformation matrix by this vector. This operation is a weighted sum of the transformed basis vectors, where the weights are the components of \\(\\vec{v}\\):\nTransformed Vector \\(= x \\cdot (\\text{transformed } \\hat{i}) + y \\cdot (\\text{transformed } \\hat{j}) + z \\cdot (\\text{transformed } \\hat{k})\\)\nThis process is identical to the logic used in 2D transformations, but with an additional dimension and basis vector.\n\n\n1.5 Composition of Transformations\nApplying multiple linear transformations in sequence is known as composition. This corresponds to the multiplication of their respective matrices. The order of multiplication is crucial and works from right to left. If you first apply transformation \\(A\\) and then transformation \\(B\\), the resulting composite transformation is represented by the matrix product \\(B \\cdot A\\).\nThis concept is fundamental in fields like computer graphics and robotics, where complex movements and orientations are broken down into a series of simpler transformations like rotations and scaling.\n\n\n\n2. Definitions\n\nLinear Transformation (in 3D): A function that maps 3D vectors to other 3D vectors such that the origin remains fixed and grid lines remain parallel and evenly spaced.\n3D Basis Vectors: The set of three mutually perpendicular unit vectors, denoted as \\(\\hat{i}\\), \\(\\hat{j}\\), and \\(\\hat{k}\\), which point along the positive x, y, and z axes, respectively.\n3x3 Matrix: A rectangular array of nine numbers arranged in three rows and three columns, used to represent a linear transformation in three-dimensional space.\nComposition of Transformations: The process of applying one transformation followed by another. The composite transformation is represented by the product of their corresponding matrices.\n\n\n\n3. Formulas\n\n3D Vector Representation: \\[ \\vec{v} = \\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix} = x\\hat{i} + y\\hat{j} + z\\hat{k} \\]\n3D Transformation Matrix-Vector Multiplication: \\[\n\\begin{pmatrix} a & b & c \\\\ d & e & f \\\\ g & h & i \\end{pmatrix}\n\\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix} =\nx \\begin{pmatrix} a \\\\ d \\\\ g \\end{pmatrix} +\ny \\begin{pmatrix} b \\\\ e \\\\ h \\end{pmatrix} +\nz \\begin{pmatrix} c \\\\ f \\\\ i \\end{pmatrix} =\n\\begin{pmatrix} ax + by + cz \\\\ dx + ey + fz \\\\ gx + hy + iz \\end{pmatrix}\n\\] Where the columns \\(\\begin{pmatrix} a \\\\ d \\\\ g \\end{pmatrix}\\), \\(\\begin{pmatrix} b \\\\ e \\\\ h \\end{pmatrix}\\), and \\(\\begin{pmatrix} c \\\\ f \\\\ i \\end{pmatrix}\\) are the transformed basis vectors \\(\\hat{i}\\), \\(\\hat{j}\\), and \\(\\hat{k}\\).\n\n\n\n4. Mistakes\n\nConfusing the order of matrix multiplication for composite transformations: Applying transformation A then B is calculated as \\(B \\cdot A\\), not \\(A \\cdot B\\). Why it’s wrong: Matrix multiplication is not commutative, and the right-to-left order reflects the sequence of operations on the vector.\nIncorrectly constructing the transformation matrix: Placing the transformed basis vectors into rows instead of columns. Why it’s wrong: By convention, the columns of a transformation matrix define where the basis vectors land. Misplacing them will result in a completely different transformation (the transpose).\nAssuming translation is a linear transformation: Shifting an object in space is not a linear transformation. Why it’s wrong: Linear transformations must keep the origin fixed (\\(L(\\vec{0}) = \\vec{0}\\)). Translation moves the origin, violating this core requirement.\nMixing up rotation axes: Confusing a rotation around the x-axis with a rotation around the y- or z-axis. Why it’s wrong: Each rotation affects the basis vectors differently. For example, a rotation around the y-axis leaves the \\(\\hat{j}\\) vector unchanged, while a rotation around the x-axis leaves the \\(\\hat{i}\\) vector unchanged.\n\n\n\n5. Examples\n\n5.1. Rotation Matrix\nQuestion: Determine the 3x3 matrix for a 90-degree counter-clockwise rotation around the y-axis.\n\n\nClick to see the solution\n\n\nTrack \\(\\hat{i}\\): The vector \\(\\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix}\\) on the x-axis rotates to the negative z-axis. Its new coordinates are \\(\\begin{pmatrix} 0 \\\\ 0 \\\\ -1 \\end{pmatrix}\\). This is the first column.\nTrack \\(\\hat{j}\\): The vector \\(\\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\end{pmatrix}\\) is on the axis of rotation, so it does not move. Its new coordinates are \\(\\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\end{pmatrix}\\). This is the second column.\nTrack \\(\\hat{k}\\): The vector \\(\\begin{pmatrix} 0 \\\\ 0 \\\\ 1 \\end{pmatrix}\\) on the z-axis rotates to the positive x-axis. Its new coordinates are \\(\\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix}\\). This is the third column.\n\nAnswer: The transformation matrix is \\(\\begin{pmatrix} 0 & 0 & 1 \\\\ 0 & 1 & 0 \\\\ -1 & 0 & 0 \\end{pmatrix}\\).\n\n\n\n5.2. Applying a Rotation\nQuestion: Using the rotation matrix from the previous example, find the new coordinates of the vector \\(\\vec{v} = \\begin{pmatrix} 2 \\\\ 5 \\\\ 3 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\nMultiply the matrix by the vector: \\[ \\begin{pmatrix} 0 & 0 & 1 \\\\ 0 & 1 & 0 \\\\ -1 & 0 & 0 \\end{pmatrix} \\begin{pmatrix} 2 \\\\ 5 \\\\ 3 \\end{pmatrix} = \\begin{pmatrix} (0)(2) + (0)(5) + (1)(3) \\\\ (0)(2) + (1)(5) + (0)(3) \\\\ (-1)(2) + (0)(5) + (0)(3) \\end{pmatrix} = \\begin{pmatrix} 3 \\\\ 5 \\\\ -2 \\end{pmatrix} \\]\nAnswer: The transformed vector is \\(\\begin{pmatrix} 3 \\\\ 5 \\\\ -2 \\end{pmatrix}\\).\n\n\n\n5.3. Scaling Matrix\nQuestion: What is the transformation matrix that scales vectors by a factor of 3 along the x-axis, 0.5 along the y-axis, and 2 along the z-axis?\n\n\nClick to see the solution\n\n\nTrack \\(\\hat{i}\\): \\(\\hat{i} = \\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix}\\) is scaled by 3 to become \\(\\begin{pmatrix} 3 \\\\ 0 \\\\ 0 \\end{pmatrix}\\).\nTrack \\(\\hat{j}\\): \\(\\hat{j} = \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\end{pmatrix}\\) is scaled by 0.5 to become \\(\\begin{pmatrix} 0 \\\\ 0.5 \\\\ 0 \\end{pmatrix}\\).\nTrack \\(\\hat{k}\\): \\(\\hat{k} = \\begin{pmatrix} 0 \\\\ 0 \\\\ 1 \\end{pmatrix}\\) is scaled by 2 to become \\(\\begin{pmatrix} 0 \\\\ 0 \\\\ 2 \\end{pmatrix}\\).\n\nAnswer: The transformation matrix is \\(\\begin{pmatrix} 3 & 0 & 0 \\\\ 0 & 0.5 & 0 \\\\ 0 & 0 & 2 \\end{pmatrix}\\).\n\n\n\n5.4. Applying a Scaling Transformation\nQuestion: Apply the scaling transformation from the previous example to the vector \\(\\vec{v} = \\begin{pmatrix} 1 \\\\ 4 \\\\ -2 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\nMultiply the matrix by the vector: \\[ \\begin{pmatrix} 3 & 0 & 0 \\\\ 0 & 0.5 & 0 \\\\ 0 & 0 & 2 \\end{pmatrix} \\begin{pmatrix} 1 \\\\ 4 \\\\ -2 \\end{pmatrix} = \\begin{pmatrix} (3)(1) \\\\ (0.5)(4) \\\\ (2)(-2) \\end{pmatrix} = \\begin{pmatrix} 3 \\\\ 2 \\\\ -4 \\end{pmatrix} \\]\nAnswer: The transformed vector is \\(\\begin{pmatrix} 3 \\\\ 2 \\\\ -4 \\end{pmatrix}\\).\n\n\n\n5.5. Projection Matrix\nQuestion: Find the matrix that represents a projection of 3D space onto the xy-plane.\n\n\nClick to see the solution\n\nThis transformation sets the z-component of every vector to zero. 1. Track \\(\\hat{i}\\): \\(\\hat{i} = \\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix}\\) is already on the xy-plane, so it stays at \\(\\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix}\\). 2. Track \\(\\hat{j}\\): \\(\\hat{j} = \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\end{pmatrix}\\) is also on the xy-plane, so it stays at \\(\\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\end{pmatrix}\\). 3. Track \\(\\hat{k}\\): \\(\\hat{k} = \\begin{pmatrix} 0 \\\\ 0 \\\\ 1 \\end{pmatrix}\\) is projected to the origin, becoming \\(\\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\end{pmatrix}\\).\nAnswer: The projection matrix is \\(\\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 0 \\end{pmatrix}\\).\n\n\n\n5.6. Composite Transformation\nQuestion: Find the single matrix that represents a 90-degree rotation around the y-axis (from example 5.1) followed by a projection onto the xy-plane (from example 5.5).\n\n\nClick to see the solution\n\nLet the rotation matrix be \\(R_y\\) and the projection matrix be \\(P_{xy}\\). We want to find the composite matrix \\(C = P_{xy} \\cdot R_y\\). The transformation applied first (rotation) is on the right. \\[ C = \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 0 \\end{pmatrix} \\begin{pmatrix} 0 & 0 & 1 \\\\ 0 & 1 & 0 \\\\ -1 & 0 & 0 \\end{pmatrix} \\] \\[ C = \\begin{pmatrix} 1(0)+0(0)+0(-1) & 1(0)+0(1)+0(0) & 1(1)+0(0)+0(0) \\\\ 0(0)+1(0)+0(-1) & 0(0)+1(1)+0(0) & 0(1)+1(0)+0(0) \\\\ 0(0)+0(0)+0(-1) & 0(0)+0(1)+0(0) & 0(1)+0(0)+0(0) \\end{pmatrix} = \\begin{pmatrix} 0 & 0 & 1 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 0 \\end{pmatrix} \\]\nAnswer: The composite matrix is \\(\\begin{pmatrix} 0 & 0 & 1 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 0 \\end{pmatrix}\\).\n\n\n\n5.7. Interpreting a Transformation Matrix\nQuestion: Given the transformation matrix \\(A = \\begin{pmatrix} 1 & 1 & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1 \\end{pmatrix}\\), describe what it does geometrically.\n\n\nClick to see the solution\n\n\nAnalyze the columns:\n\nFirst column \\(\\begin{pmatrix} 1 \\\\ 0 \\\\ 0 \\end{pmatrix}\\): \\(\\hat{i}\\) does not change.\nSecond column \\(\\begin{pmatrix} 1 \\\\ 1 \\\\ 0 \\end{pmatrix}\\): \\(\\hat{j}\\) moves to \\(\\begin{pmatrix} 1 \\\\ 1 \\\\ 0 \\end{pmatrix}\\). It is shifted one unit in the x-direction.\nThird column \\(\\begin{pmatrix} 0 \\\\ 0 \\\\ 1 \\end{pmatrix}\\): \\(\\hat{k}\\) does not change.\n\nDescribe the effect: Since \\(\\hat{i}\\) and \\(\\hat{k}\\) are unchanged, the xz-plane is fixed. The \\(\\hat{j}\\) vector is tilted in the x-direction. This is a shear transformation. Every point is shifted in the x-direction by an amount proportional to its y-coordinate.\n\nAnswer: The matrix represents a shear transformation that slants the y-axis toward the positive x-axis.",
    "crumbs": [
      "Essence of linear algebra",
      "5. Linear Transformations, Matrices, 3D Space"
    ]
  },
  {
    "objectID": "Essence of linear algebra/vid_11.html",
    "href": "Essence of linear algebra/vid_11.html",
    "title": "11. Cross Product, Duality, Determinants",
    "section": "",
    "text": "1. Summary\n\n1.1 The Standard Computation of the Cross Product\nThe cross product is a fundamental operation in three-dimensional space involving two vectors, let’s call them \\(\\vec{v}\\) and \\(\\vec{w}\\), which results in a new vector, let’s call it \\(\\vec{p}\\).\nA common method taught for computing the cross product \\(\\vec{v} \\times \\vec{w}\\) involves a special mnemonic using the determinant. You construct a \\(3 \\times 3\\) matrix where: - The first column contains the basis vectors \\(\\hat{i}\\), \\(\\hat{j}\\), and \\(\\hat{k}\\). - The second column contains the components of the first vector, \\(\\vec{v} = (v_1, v_2, v_3)\\). - The third column contains the components of the second vector, \\(\\vec{w} = (w_1, w_2, w_3)\\).\n\nThe cross product is then defined as the determinant of this matrix: \\[\n\\vec{v} \\times \\vec{w} = \\det \\begin{pmatrix} \\hat{i} & v_1 & w_1 \\\\ \\hat{j} & v_2 & w_2 \\\\ \\hat{k} & v_3 & w_3 \\end{pmatrix}\n\\] Although the basis vectors in the first column aren’t numbers, treating them as such for the calculation yields the correct resulting vector. Expanding this determinant gives the standard formula: \\[\n\\vec{v} \\times \\vec{w} = \\hat{i}(v_2w_3 - v_3w_2) + \\hat{j}(v_3w_1 - v_1w_3) + \\hat{k}(v_1w_2 - v_2w_1)\n\\] This formula provides the three components of the new vector \\(\\vec{p}\\).\n\n\n1.2 Geometric Interpretation of the Cross Product\nThe vector \\(\\vec{p}\\) that results from the cross product \\(\\vec{v} \\times \\vec{w}\\) has specific geometric properties that are crucial to its application: - Magnitude: The length of the vector \\(\\vec{p}\\) is equal to the area of the parallelogram formed by the vectors \\(\\vec{v}\\) and \\(\\vec{w}\\). - Direction: The vector \\(\\vec{p}\\) is perpendicular to both \\(\\vec{v}\\) and \\(\\vec{w}\\). This means it is orthogonal to the plane that contains \\(\\vec{v}\\) and \\(\\vec{w}\\). - Orientation: The direction of \\(\\vec{p}\\) is determined by the right-hand rule. If you point your right index finger in the direction of \\(\\vec{v}\\) and your middle finger in the direction of \\(\\vec{w}\\), your thumb will point in the direction of \\(\\vec{v} \\times \\vec{w}\\).\n\n\n\n1.3 The Concept of Duality\nTo understand the cross product on a deeper level, we can use the concept of duality. Duality establishes a relationship between linear transformations and vectors.\nSpecifically, any linear transformation from a multi-dimensional space to the one-dimensional number line is associated with a unique vector in that original space, known as its dual vector. Applying this transformation to a vector is computationally the same as taking the dot product of that vector with the dual vector.\nFor example, a linear transformation from 3D space to the number line can be represented by a \\(1 \\times 3\\) matrix. Applying this transformation to a vector \\((x, y, z)\\) is equivalent to taking the dot product of \\((x, y, z)\\) with the vector formed by the entries of the \\(1 \\times 3\\) matrix. \\[\n\\begin{pmatrix} p_1 & p_2 & p_3 \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix} = \\begin{pmatrix} p_1 \\\\ p_2 \\\\ p_3 \\end{pmatrix} \\cdot \\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix}\n\\]\n\n\n1.4 A New Linear Transformation\nLet’s define a specific linear transformation from 3D to 1D using two fixed vectors, \\(\\vec{v}\\) and \\(\\vec{w}\\). For any variable vector \\(\\vec{u} = (x, y, z)\\), the function maps it to the determinant of a \\(3 \\times 3\\) matrix whose columns are the coordinates of \\(\\vec{u}\\), \\(\\vec{v}\\), and \\(\\vec{w}\\). \\[\nf\\left(\\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix}\\right) = \\det \\begin{pmatrix} x & v_1 & w_1 \\\\ y & v_2 & w_2 \\\\ z & v_3 & w_3 \\end{pmatrix}\n\\] This function is a linear transformation. Geometrically, it calculates the signed volume of the parallelepiped formed by the three vectors.\n\n\n1.5 Connecting Duality and the Cross Product\nSince this function is a linear transformation from 3D space to the number line, it must have a dual vector \\(\\vec{p}\\). This means there’s a vector \\(\\vec{p}\\) such that applying the transformation is the same as taking the dot product with \\(\\vec{p}\\). \\[\n\\vec{p} \\cdot \\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix} = \\det \\begin{pmatrix} x & v_1 & w_1 \\\\ y & v_2 & w_2 \\\\ z & v_3 & w_3 \\end{pmatrix}\n\\] When we expand the determinant on the right side, we get: \\[\nx(v_2w_3 - v_3w_2) + y(v_3w_1 - v_1w_3) + z(v_1w_2 - v_2w_1)\n\\] This expression has the exact form of a dot product between some vector and \\((x, y, z)\\). The components of that vector must be the coefficients of \\(x\\), \\(y\\), and \\(z\\). - \\(p_1 = v_2w_3 - v_3w_2\\) - \\(p_2 = v_3w_1 - v_1w_3\\) - \\(p_3 = v_1w_2 - v_2w_1\\) These are precisely the components of the cross product \\(\\vec{v} \\times \\vec{w}\\) derived from the standard computational trick. This reveals that the cross product \\(\\vec{v} \\times \\vec{w}\\) is fundamentally the dual vector to the linear transformation that computes the volume of a parallelepiped using \\(\\vec{v}\\), \\(\\vec{w}\\), and a variable third vector. This elegant connection explains why the seemingly arbitrary computational trick for the cross product works and is deeply tied to its geometric meaning.\n\n\n\n2. Definitions\n\nCross Product: A binary operation on two vectors in three-dimensional space, denoted \\(\\vec{v} \\times \\vec{w}\\). The result is a vector that is perpendicular to both of the original vectors. Its magnitude is the area of the parallelogram spanned by the two vectors, and its direction is given by the right-hand rule.\nDeterminant: A scalar value derived from a square matrix. For a \\(3 \\times 3\\) matrix, the determinant represents the signed volume of the parallelepiped formed by its column vectors.\nDuality: A fundamental concept in linear algebra that establishes a one-to-one correspondence between linear transformations from a vector space to its field of scalars (the number line) and the vectors within that space.\nDual Vector: For a linear transformation from a vector space to the number line, the dual vector is the unique vector in that space with the property that applying the transformation is equivalent to taking the dot product with this vector.\n\n\n\n3. Formulas\n\nStandard Cross Product Computation (Mnemonic): \\[\n\\vec{v} \\times \\vec{w} = \\det \\begin{pmatrix} \\hat{i} & v_1 & w_1 \\\\ \\hat{j} & v_2 & w_2 \\\\ \\hat{k} & v_3 & w_3 \\end{pmatrix}\n\\]\nExpanded Cross Product Formula: \\[\n\\vec{v} \\times \\vec{w} = \\begin{pmatrix} v_2w_3 - v_3w_2 \\\\ v_3w_1 - v_1w_3 \\\\ v_1w_2 - v_2w_1 \\end{pmatrix}\n\\]\nCross Product as a Dual Vector: \\[\n(\\vec{v} \\times \\vec{w}) \\cdot \\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix} = \\det \\begin{pmatrix} x & v_1 & w_1 \\\\ y & v_2 & w_2 \\\\ z & v_3 & w_3 \\end{pmatrix}\n\\]\n\n\n\n4. Mistakes\n\nConfusing Cross Product with Dot Product: The cross product results in a vector, whereas the dot product results in a scalar. Why it’s wrong: These are two distinct operations with different mathematical definitions and geometric interpretations.\nIncorrectly Applying the Right-Hand Rule: Swapping the order of the vectors (computing \\(\\vec{w} \\times \\vec{v}\\) instead of \\(\\vec{v} \\times \\vec{w}\\)) results in a vector pointing in the opposite direction. Why it’s wrong: The cross product is anti-commutative, meaning \\(\\vec{v} \\times \\vec{w} = -(\\vec{w} \\times \\vec{v})\\).\nCalculating the Determinant Incorrectly: Forgetting to subtract the products of the anti-diagonals or mixing up the signs for the components (especially the negative sign associated with the \\(\\hat{j}\\) component in cofactor expansion) is a common computational error. Why it’s wrong: This leads to an incorrect vector that does not have the right magnitude or direction.\nApplying the Cross Product to 2D Vectors: The cross product as defined here is an operation for 3D vectors. The 2D equivalent returns a scalar representing a signed area, not a vector. Why it’s wrong: The concept of a unique perpendicular vector doesn’t exist in 2D in the same way it does in 3D.\n\n\n\n5. Examples\n\n5.1. Basic Cross Product\nQuestion: Calculate the cross product of \\(\\vec{v} = \\begin{pmatrix} 1 \\\\ 2 \\\\ 3 \\end{pmatrix}\\) and \\(\\vec{w} = \\begin{pmatrix} 4 \\\\ 5 \\\\ 6 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\nWe set up the determinant: \\[\n\\vec{v} \\times \\vec{w} = \\det \\begin{pmatrix} \\hat{i} & 1 & 4 \\\\ \\hat{j} & 2 & 5 \\\\ \\hat{k} & 3 & 6 \\end{pmatrix}\n\\] Now, we expand along the first column: \\[\n= \\hat{i}(2 \\cdot 6 - 3 \\cdot 5) - \\hat{j}(1 \\cdot 6 - 3 \\cdot 4) + \\hat{k}(1 \\cdot 5 - 2 \\cdot 4)\n\\] \\[\n= \\hat{i}(12 - 15) - \\hat{j}(6 - 12) + \\hat{k}(5 - 8)\n\\] \\[\n= -3\\hat{i} + 6\\hat{j} - 3\\hat{k}\n\\]\nAnswer: The resulting vector is \\(\\begin{pmatrix} -3 \\\\ 6 \\\\ -3 \\end{pmatrix}\\).\n\n\n\n5.2. Cross Product with a Basis Vector\nQuestion: Find the cross product of \\(\\vec{v} = \\begin{pmatrix} 3 \\\\ -1 \\\\ 2 \\end{pmatrix}\\) and \\(\\hat{j} = \\begin{pmatrix} 0 \\\\ 1 \\\\ 0 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\nSet up the determinant: \\[\n\\vec{v} \\times \\hat{j} = \\det \\begin{pmatrix} \\hat{i} & 3 & 0 \\\\ \\hat{j} & -1 & 1 \\\\ \\hat{k} & 2 & 0 \\end{pmatrix}\n\\] Expand the determinant: \\[\n= \\hat{i}(-1 \\cdot 0 - 2 \\cdot 1) - \\hat{j}(3 \\cdot 0 - 2 \\cdot 0) + \\hat{k}(3 \\cdot 1 - (-1) \\cdot 0)\n\\] \\[\n= \\hat{i}(-2) - \\hat{j}(0) + \\hat{k}(3)\n\\] \\[\n= -2\\hat{i} + 3\\hat{k}\n\\]\nAnswer: The resulting vector is \\(\\begin{pmatrix} -2 \\\\ 0 \\\\ 3 \\end{pmatrix}\\).\n\n\n\n5.3. Cross Product of Parallel Vectors\nQuestion: What is the cross product of \\(\\vec{v} = \\begin{pmatrix} 2 \\\\ 4 \\\\ 6 \\end{pmatrix}\\) and \\(\\vec{w} = \\begin{pmatrix} 3 \\\\ 6 \\\\ 9 \\end{pmatrix}\\)?\n\n\nClick to see the solution\n\nNote that \\(\\vec{w} = 1.5 \\cdot \\vec{v}\\), so the vectors are parallel. The area of the parallelogram they span should be zero. Let’s verify with the formula. \\[\n\\vec{v} \\times \\vec{w} = \\det \\begin{pmatrix} \\hat{i} & 2 & 3 \\\\ \\hat{j} & 4 & 6 \\\\ \\hat{k} & 6 & 9 \\end{pmatrix}\n\\] \\[\n= \\hat{i}(4 \\cdot 9 - 6 \\cdot 6) - \\hat{j}(2 \\cdot 9 - 6 \\cdot 3) + \\hat{k}(2 \\cdot 6 - 4 \\cdot 3)\n\\] \\[\n= \\hat{i}(36 - 36) - \\hat{j}(18 - 18) + \\hat{k}(12 - 12)\n\\] \\[\n= 0\\hat{i} - 0\\hat{j} + 0\\hat{k}\n\\]\nAnswer: The resulting vector is the zero vector, \\(\\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\end{pmatrix}\\).\n\n\n\n5.4. Cross Product with Negative Components\nQuestion: Calculate \\(\\vec{v} \\times \\vec{w}\\) for \\(\\vec{v} = \\begin{pmatrix} 1 \\\\ 1 \\\\ 0 \\end{pmatrix}\\) and \\(\\vec{w} = \\begin{pmatrix} 0 \\\\ -2 \\\\ 3 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\nSet up the determinant: \\[\n\\vec{v} \\times \\vec{w} = \\det \\begin{pmatrix} \\hat{i} & 1 & 0 \\\\ \\hat{j} & 1 & -2 \\\\ \\hat{k} & 0 & 3 \\end{pmatrix}\n\\] Expand the determinant: \\[\n= \\hat{i}(1 \\cdot 3 - 0 \\cdot (-2)) - \\hat{j}(1 \\cdot 3 - 0 \\cdot 0) + \\hat{k}(1 \\cdot (-2) - 1 \\cdot 0)\n\\] \\[\n= \\hat{i}(3) - \\hat{j}(3) + \\hat{k}(-2)\n\\] \\[\n= 3\\hat{i} - 3\\hat{j} - 2\\hat{k}\n\\]\nAnswer: The resulting vector is \\(\\begin{pmatrix} 3 \\\\ -3 \\\\ -2 \\end{pmatrix}\\).\n\n\n\n5.5. Anti-Commutativity\nQuestion: Given \\(\\vec{v} = \\begin{pmatrix} 1 \\\\ 2 \\\\ 0 \\end{pmatrix}\\) and \\(\\vec{w} = \\begin{pmatrix} 0 \\\\ 1 \\\\ 3 \\end{pmatrix}\\), show that \\(\\vec{v} \\times \\vec{w} = -(\\vec{w} \\times \\vec{v})\\).\n\n\nClick to see the solution\n\nFirst, calculate \\(\\vec{v} \\times \\vec{w}\\): \\[\n\\vec{v} \\times \\vec{w} = \\det \\begin{pmatrix} \\hat{i} & 1 & 0 \\\\ \\hat{j} & 2 & 1 \\\\ \\hat{k} & 0 & 3 \\end{pmatrix} = \\hat{i}(6-0) - \\hat{j}(3-0) + \\hat{k}(1-0) = \\begin{pmatrix} 6 \\\\ -3 \\\\ 1 \\end{pmatrix}\n\\] Next, calculate \\(\\vec{w} \\times \\vec{v}\\): \\[\n\\vec{w} \\times \\vec{v} = \\det \\begin{pmatrix} \\hat{i} & 0 & 1 \\\\ \\hat{j} & 1 & 2 \\\\ \\hat{k} & 3 & 0 \\end{pmatrix} = \\hat{i}(0-6) - \\hat{j}(0-3) + \\hat{k}(0-1) = \\begin{pmatrix} -6 \\\\ 3 \\\\ -1 \\end{pmatrix}\n\\] Comparing the two results: \\[\n\\begin{pmatrix} 6 \\\\ -3 \\\\ 1 \\end{pmatrix} = - \\begin{pmatrix} -6 \\\\ 3 \\\\ -1 \\end{pmatrix}\n\\]\nAnswer: The property is verified.\n\n\n\n5.6. Finding a Perpendicular Vector\nQuestion: Find a vector that is perpendicular to both \\(\\vec{v} = \\begin{pmatrix} 5 \\\\ 0 \\\\ 1 \\end{pmatrix}\\) and \\(\\vec{w} = \\begin{pmatrix} -1 \\\\ 2 \\\\ 2 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\nThe cross product of two vectors yields a vector perpendicular to both. \\[\n\\vec{v} \\times \\vec{w} = \\det \\begin{pmatrix} \\hat{i} & 5 & -1 \\\\ \\hat{j} & 0 & 2 \\\\ \\hat{k} & 1 & 2 \\end{pmatrix}\n\\] \\[\n= \\hat{i}(0 \\cdot 2 - 1 \\cdot 2) - \\hat{j}(5 \\cdot 2 - 1 \\cdot (-1)) + \\hat{k}(5 \\cdot 2 - 0 \\cdot (-1))\n\\] \\[\n= \\hat{i}(-2) - \\hat{j}(10 + 1) + \\hat{k}(10)\n\\] \\[\n= -2\\hat{i} - 11\\hat{j} + 10\\hat{k}\n\\]\nAnswer: A vector perpendicular to both is \\(\\begin{pmatrix} -2 \\\\ -11 \\\\ 10 \\end{pmatrix}\\).\n\n\n\n5.7. Area of a Parallelogram\nQuestion: What is the area of the parallelogram spanned by the vectors \\(\\vec{v} = \\begin{pmatrix} 2 \\\\ 2 \\\\ 1 \\end{pmatrix}\\) and \\(\\vec{w} = \\begin{pmatrix} 0 \\\\ 3 \\\\ 0 \\end{pmatrix}\\)?\n\n\nClick to see the solution\n\nThe area of the parallelogram is the magnitude of the cross product of the two vectors that define it. First, find the cross product \\(\\vec{p} = \\vec{v} \\times \\vec{w}\\): \\[\n\\vec{p} = \\det \\begin{pmatrix} \\hat{i} & 2 & 0 \\\\ \\hat{j} & 2 & 3 \\\\ \\hat{k} & 1 & 0 \\end{pmatrix} = \\hat{i}(0-3) - \\hat{j}(0-0) + \\hat{k}(6-0) = \\begin{pmatrix} -3 \\\\ 0 \\\\ 6 \\end{pmatrix}\n\\] Next, find the magnitude of \\(\\vec{p}\\): \\[\n\\|\\vec{p}\\| = \\sqrt{(-3)^2 + 0^2 + 6^2} = \\sqrt{9 + 36} = \\sqrt{45} = 3\\sqrt{5}\n\\]\nAnswer: The area of the parallelogram is \\(3\\sqrt{5}\\) square units.",
    "crumbs": [
      "Essence of linear algebra",
      "11. Cross Product, Duality, Determinants"
    ]
  },
  {
    "objectID": "Essence of linear algebra/vid_6.html",
    "href": "Essence of linear algebra/vid_6.html",
    "title": "6. Determinant, Linear Transformations",
    "section": "",
    "text": "1. Summary\n\n1.1 The Determinant as a Scaling Factor\nLinear transformations can stretch or squish space. The determinant is a measure of exactly how much a transformation scales area. It is the factor by which the area of any given region increases or decreases.\n\nStretching Space: Some transformations expand space, increasing the area of shapes.\nSquishing Space: Other transformations compress space, decreasing the area of shapes.\n\nTo quantify this, we can examine what happens to a simple shape. Consider a 1x1 square defined by the basis vectors \\(\\hat{i}\\) and \\(\\hat{j}\\). The area of this square is 1. After applying a linear transformation, this square is transformed into a parallelogram. The area of this new parallelogram is the determinant of the transformation.\n\nThis scaling factor is consistent for any area in the space. The reason is that a linear transformation keeps grid lines parallel and evenly spaced. Therefore, any shape can be approximated by a collection of tiny grid squares, and each of these squares will be scaled by the same amount. As a result, the total area of the shape is scaled by that same factor.\n\n1.1.1 Example of Area Scaling\nConsider a transformation represented by the matrix \\(\\begin{pmatrix} 3 & 0 \\\\ 0 & 2 \\end{pmatrix}\\).\n\nThe first basis vector, \\(\\hat{i}\\), lands on \\(\\begin{pmatrix} 3 \\\\ 0 \\end{pmatrix}\\).\nThe second basis vector, \\(\\hat{j}\\), lands on \\(\\begin{pmatrix} 0 \\\\ 2 \\end{pmatrix}\\).\nThe original 1x1 unit square becomes a 3x2 rectangle.\n\nThe area of this new rectangle is \\(3 \\times 2 = 6\\). The transformation has scaled the area by a factor of 6. Thus, the determinant of this matrix is 6.\n\n\n1.1.2 Example of Shear\nA shear transformation represented by the matrix \\(\\begin{pmatrix} 1 & 1 \\\\ 0 & 1 \\end{pmatrix}\\) provides a different outcome.\n\n\\(\\hat{i}\\) remains at \\(\\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\).\n\\(\\hat{j}\\) moves to \\(\\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}\\).\nThe unit square is transformed into a parallelogram.\n\nHowever, the base and height of this parallelogram are both still 1, so its area remains 1. The determinant is 1, indicating that this transformation preserves area, even though it changes the shape of objects.\n\n\n\n1.2 Orientation and Negative Determinants\nThe determinant can also be negative. This introduces the concept of orientation.\n\nPositive Determinant: The orientation of space is preserved.\nNegative Determinant: The orientation of space is inverted or flipped.\n\nIn two dimensions, orientation can be visualized by the relative positions of the basis vectors \\(\\hat{i}\\) and \\(\\hat{j}\\). Typically, \\(\\hat{j}\\) is 90 degrees counter-clockwise from \\(\\hat{i}\\). After a transformation, if the new \\(\\hat{j}\\) is now to the right of the new \\(\\hat{i}\\), the orientation has been flipped. This is like turning over a sheet of paper.\nWhen a transformation flips the orientation, its determinant will be negative. The absolute value of the determinant still tells us the factor by which the area has been scaled. For example, a determinant of -2 means the orientation was flipped, and areas were scaled by a factor of 2.\n\n\n1.3 The Determinant in Three Dimensions\nThe concept of the determinant extends naturally to three dimensions, but instead of scaling areas, it measures the scaling of volumes.\n\nThe reference shape is the 1x1x1 cube whose edges are the basis vectors \\(\\hat{i}\\), \\(\\hat{j}\\), and \\(\\hat{k}\\).\nAfter a 3D linear transformation, this cube is transformed into a slanted, cube-like shape called a parallelepiped.\nThe determinant of the transformation is the volume of this parallelepiped.\n\n\n\n1.3.1 Orientation in 3D\nIn three dimensions, orientation is determined by the right-hand rule.\n\nPoint the index finger of your right hand in the direction of \\(\\hat{i}\\).\nPoint your middle finger in the direction of \\(\\hat{j}\\).\nYour thumb will naturally point in the direction of \\(\\hat{k}\\).\n\nIf, after a transformation, the transformed basis vectors still follow the right-hand rule, the orientation is preserved, and the determinant is positive. If you must use your left hand to make the same configuration, the orientation has been flipped, and the determinant is negative.\n\n\n\n1.4 Determinant of Zero\nIf the determinant of a transformation is zero, it means the transformation squishes all of space into a lower dimension.\n\nIn 2D, a determinant of zero means all of space is compressed onto a single line or a point. The “area” of this line is zero.\nIn 3D, a determinant of zero means all of space is compressed onto a plane, a line, or a point. The “volume” of these shapes is zero.\n\nThis occurs when the columns of the transformation matrix are linearly dependent. This means the basis vectors are transformed in a way that they no longer span the full space (e.g., in 2D, they land on the same line).\n\n\n\n2. Definitions\n\nDeterminant: A scalar value that describes how a linear transformation scales area (in 2D) or volume (in 3D). Its sign indicates whether the orientation of space is preserved or inverted.\nOrientation: In 2D, the relative positioning of the basis vectors (\\(\\hat{j}\\) is to the left of \\(\\hat{i}\\)). In 3D, it is determined by the right-hand rule. A transformation that flips this arrangement has a negative determinant.\nParallelepiped: The 3D analogue of a parallelogram. It is a polyhedron with six faces, each of which is a parallelogram.\nRight-Hand Rule: A convention used in 3D to define orientation. If the index finger represents the transformed \\(\\hat{i}\\) and the middle finger represents the transformed \\(\\hat{j}\\), a positive orientation means the thumb points in the direction of the transformed \\(\\hat{k}\\).\n\n\n\n3. Formulas\n\nDeterminant of a 2x2 Matrix: For a matrix \\(M = \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}\\), the determinant is: \\[ \\det(M) = ad - bc \\]\nDeterminant of a 3x3 Matrix: For a matrix \\(M = \\begin{pmatrix} a & b & c \\\\ d & e & f \\\\ g & h & i \\end{pmatrix}\\), the determinant is: \\[ \\det(M) = a(ei - fh) - b(di - fg) + c(dh - eg) \\]\nMultiplicative Property of Determinants: For any two square matrices \\(M_1\\) and \\(M_2\\) of the same size, the determinant of their product is the product of their determinants: \\[ \\det(M_1 M_2) = \\det(M_1) \\det(M_2) \\]\n\n\n\n4. Mistakes\n\nConfusing the determinant with the matrix: The determinant is a single number that describes a property of the matrix’s transformation, not the matrix itself. Why it’s wrong: A matrix represents the full transformation, while the determinant is just one aspect of it (the area/volume scaling factor).\nAssuming the determinant is always positive: The sign of the determinant is crucial. Why it’s wrong: A negative determinant indicates that the transformation inverts the orientation of space, which is a key geometric insight.\nForgetting that a zero determinant implies linear dependence: A determinant of zero is not just a number; it signals a fundamental property of the transformation. Why it’s wrong: It means the transformation reduces the dimensionality of the space (e.g., a 2D plane is squished into a 1D line), which happens if and only if the columns of the matrix are linearly dependent.\nMisinterpreting the ad - bc formula: The formula is a calculation, but the intuition behind it is geometric. Why it’s wrong: Simply memorizing the formula without understanding that it represents how a unit area changes under transformation misses the core concept of what a determinant is.\n\n\n\n5. Examples\n\n5.1 Simple Determinant\nQuestion: Calculate the determinant of the matrix \\(M = \\begin{pmatrix} 5 & 2 \\\\ 3 & 4 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\nUsing the formula \\(\\det(M) = ad - bc\\): 1. Identify \\(a, b, c, d\\): \\(a=5, b=2, c=3, d=4\\). 2. Substitute the values into the formula: \\[ \\det(M) = (5)(4) - (2)(3) = 20 - 6 = 14 \\]\nAnswer: The determinant is 14. This means the transformation scales areas by a factor of 14 and preserves orientation.\n\n\n\n5.2 Determinant with Zero\nQuestion: Calculate the determinant of the matrix \\(M = \\begin{pmatrix} 2 & 7 \\\\ 0 & 3 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\nUsing the formula \\(\\det(M) = ad - bc\\): 1. Identify \\(a, b, c, d\\): \\(a=2, b=7, c=0, d=3\\). 2. Substitute the values into the formula: \\[ \\det(M) = (2)(3) - (7)(0) = 6 - 0 = 6 \\]\nAnswer: The determinant is 6.\n\n\n\n5.3 Negative Determinant\nQuestion: Calculate the determinant of the matrix \\(M = \\begin{pmatrix} 1 & 4 \\\\ 3 & 2 \\end{pmatrix}\\). What does the result mean?\n\n\nClick to see the solution\n\nUsing the formula \\(\\det(M) = ad - bc\\): 1. Identify \\(a, b, c, d\\): \\(a=1, b=4, c=3, d=2\\). 2. Substitute the values into the formula: \\[ \\det(M) = (1)(2) - (4)(3) = 2 - 12 = -10 \\]\nAnswer: The determinant is -10. This means the transformation scales areas by a factor of 10 and inverts the orientation of space.\n\n\n\n5.4 Zero Determinant\nQuestion: What is the determinant of \\(M = \\begin{pmatrix} 2 & 1 \\\\ 6 & 3 \\end{pmatrix}\\)? What does this imply about the columns of the matrix?\n\n\nClick to see the solution\n\nUsing the formula \\(\\det(M) = ad - bc\\): 1. Identify \\(a, b, c, d\\): \\(a=2, b=1, c=6, d=3\\). 2. Substitute the values into the formula: \\[ \\det(M) = (2)(3) - (1)(6) = 6 - 6 = 0 \\]\nAnswer: The determinant is 0. This implies that the columns of the matrix, \\(\\begin{pmatrix} 2 \\\\ 6 \\end{pmatrix}\\) and \\(\\begin{pmatrix} 1 \\\\ 3 \\end{pmatrix}\\), are linearly dependent. Notice that the first column is exactly twice the second column. This transformation squishes 2D space onto a 1D line.\n\n\n\n5.5 Area of a Transformed Shape\nQuestion: A triangle with an area of 5 square units undergoes a linear transformation defined by the matrix \\(M = \\begin{pmatrix} 3 & 1 \\\\ 1 & 2 \\end{pmatrix}\\). What is the area of the transformed triangle?\n\n\nClick to see the solution\n\n\nFirst, find the determinant of the matrix \\(M\\): \\[ \\det(M) = (3)(2) - (1)(1) = 6 - 1 = 5 \\]\nThe determinant is the factor by which any area is scaled.\nMultiply the original area by the determinant: \\[ \\text{New Area} = \\text{Original Area} \\times |\\det(M)| = 5 \\times 5 = 25 \\]\n\nAnswer: The area of the transformed triangle is 25 square units.\n\n\n\n5.6 Multiplicative Property\nQuestion: Given \\(\\det(A) = 4\\) and \\(\\det(B) = -3\\), what is the determinant of the combined transformation \\(AB\\)?\n\n\nClick to see the solution\n\nUsing the property \\(\\det(AB) = \\det(A) \\det(B)\\): 1. Substitute the given values: \\[ \\det(AB) = (4) \\times (-3) = -12 \\]\nAnswer: The determinant of the combined transformation is -12.\n\n\n\n5.7 Finding an Unknown in a Matrix\nQuestion: For what value of \\(k\\) does the matrix \\(M = \\begin{pmatrix} 2 & k \\\\ 3 & 6 \\end{pmatrix}\\) have a determinant of 0?\n\n\nClick to see the solution\n\n\nSet up the determinant equation: \\[ \\det(M) = (2)(6) - (k)(3) = 0 \\]\nSimplify the equation: \\[ 12 - 3k = 0 \\]\nSolve for \\(k\\): \\[ 12 = 3k \\] \\[ k = 4 \\]\n\nAnswer: The determinant is 0 when \\(k = 4\\).",
    "crumbs": [
      "Essence of linear algebra",
      "6. Determinant, Linear Transformations"
    ]
  },
  {
    "objectID": "Essence of linear algebra/vid_12.html",
    "href": "Essence of linear algebra/vid_12.html",
    "title": "12. Linear Systems, Cramer’s Rule, Determinants",
    "section": "",
    "text": "1. Summary\n\n1.1 Introduction to Cramer’s Rule\nCramer’s Rule is an explicit formula for the solution of a system of linear equations with as many equations as unknowns, valid whenever the system has a unique solution. While it is a powerful theoretical tool, for practical computation, methods like Gaussian elimination are significantly faster and more efficient, especially for larger systems.\nThe primary value in learning Cramer’s Rule lies in the deep geometric intuition it provides. It connects the concept of the determinant directly to the solution of linear systems, reinforcing the idea that the determinant represents a scaling factor for area or volume. Understanding this rule helps to consolidate various concepts from linear algebra, such as linear transformations, determinants, and geometric vectors, by showing how they interrelate to solve a fundamental problem.\n\n\n1.2 Geometric Intuition of Cramer’s Rule\n\n1.2.1 The 2D Case\nConsider a 2D linear system of equations, which can be written in matrix form as \\(A\\vec{x} = \\vec{v}\\), where we want to find the unknown vector \\(\\vec{x} = \\begin{pmatrix} x \\\\ y \\end{pmatrix}\\).\n\nGeometric View of the y-coordinate: The y-coordinate of a vector \\(\\vec{x}\\) can be interpreted as the signed area of the parallelogram formed by the standard basis vector \\(\\hat{i} = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\) and the vector \\(\\vec{x}\\) itself. The area is base × height = \\(1 \\times y = y\\). The sign depends on the orientation of the vectors.\nTransformation: When we apply the linear transformation represented by matrix \\(A\\), this parallelogram is transformed into a new parallelogram.\n\nThe vector \\(\\hat{i}\\) is transformed into the first column of matrix A, let’s call it \\(\\vec{c}_1\\).\nThe vector \\(\\vec{x}\\) is transformed into the output vector \\(\\vec{v}\\).\nThe new parallelogram is spanned by \\(\\vec{c}_1\\) and \\(\\vec{v}\\).\n\nScaling of Area: A key property of determinants is that they describe how much a linear transformation scales areas. The area of the transformed parallelogram is the original area multiplied by the determinant of the transformation matrix, det(A).\n\nArea of new parallelogram = det(A) * (Area of original parallelogram)\nArea(spanned by \\(\\vec{c}_1, \\vec{v}\\)) = det(A) * \\(y\\)\n\nSolving for y: We can rearrange this to solve for y. The area of the parallelogram spanned by \\(\\vec{c}_1\\) and \\(\\vec{v}\\) is given by the determinant of a matrix whose columns are these two vectors. This is equivalent to our original matrix \\(A\\), but with its second column replaced by \\(\\vec{v}\\). \\[ y = \\frac{\\text{Area}(\\vec{c}_1, \\vec{v})}{\\det(A)} = \\frac{\\det\\begin{pmatrix} a & v_1 \\\\ c & v_2 \\end{pmatrix}}{\\det\\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}} \\]\nSolving for x: A similar logic applies to the x-coordinate. The x-coordinate is the signed area of the parallelogram formed by \\(\\vec{x}\\) and the basis vector \\(\\hat{j} = \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\\).\n\nAfter the transformation, this becomes a parallelogram spanned by \\(\\vec{v}\\) and \\(\\vec{c}_2\\) (the second column of A).\nArea(spanned by \\(\\vec{v}, \\vec{c}_2\\)) = det(A) * \\(x\\)\nThis leads to the formula for x: \\[ x = \\frac{\\text{Area}(\\vec{v}, \\vec{c}_2)}{\\det(A)} = \\frac{\\det\\begin{pmatrix} v_1 & b \\\\ v_2 & d \\end{pmatrix}}{\\det\\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}} \\]\n\n\n\n\n\n1.2.2 The 3D Case and Generalization\nThis geometric reasoning extends to three dimensions, where we use signed volumes instead of areas.\n\nFor a 3x3 system, the z-coordinate of the unknown vector \\(\\vec{x}\\) is the signed volume of the parallelepiped formed by \\(\\hat{i}\\), \\(\\hat{j}\\), and \\(\\vec{x}\\).\nAfter applying the transformation A, this shape becomes a new parallelepiped spanned by the first two columns of A and the output vector \\(\\vec{v}\\).\nThe volume of this transformed shape is det(A) times the original volume (z).\nThe volume of the transformed shape can also be found by taking the determinant of a new matrix, where the first two columns are from A and the third column is the output vector \\(\\vec{v}\\).\nThis gives the general formula for any component \\(x_i\\) of the solution vector.\n\n\n\n\n1.3 Prerequisites for Understanding\nTo fully grasp the concepts behind Cramer’s Rule, a solid understanding of the following topics in linear algebra is recommended: - Determinants: Especially their geometric interpretation as scaling factors for area and volume. - Dot Products and Duality: Understanding how dot products can project vectors. - Inverse Matrices, Rank, and Null Space: Concepts related to the properties of matrices and the existence of unique solutions. - Linear Systems of Equations: The fundamental problem that Cramer’s Rule addresses.\n\n\n\n2. Definitions\n\nCramer’s Rule: A theorem in linear algebra that gives the solution to a system of linear equations in terms of determinants.\nDeterminant: A scalar value that is a function of the entries of a square matrix. It characterizes some properties of the matrix and the linear map represented by the matrix. Geometrically, it’s the volume scaling factor of the linear transformation.\nLinear System of Equations: A set of two or more linear equations with the same variables. The solution is the set of values that satisfy all equations simultaneously.\nCoefficient Matrix: A matrix containing the coefficients of the variables in a system of linear equations.\nGaussian Elimination: A systematic method for solving systems of linear equations by transforming the system’s augmented matrix into row-echelon form. It is generally much more computationally efficient than Cramer’s rule.\n\n\n\n3. Formulas\nFor a general linear system \\(A\\vec{x} = \\vec{v}\\) with \\(n\\) equations and \\(n\\) unknowns: * General Formula for Cramer’s Rule: The unique solution for the variable \\(x_i\\) is given by: \\[ x_i = \\frac{\\det(A_i)}{\\det(A)} \\] where \\(A_i\\) is the matrix formed by replacing the \\(i\\)-th column of the coefficient matrix \\(A\\) with the constant vector \\(\\vec{v}\\).\n\nFor a 3x3 System: \\[\nA = \\begin{pmatrix} a_{11} & a_{12} & a_{13} \\\\ a_{21} & a_{22} & a_{23} \\\\ a_{31} & a_{32} & a_{33} \\end{pmatrix}, \\quad\n\\vec{x} = \\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix}, \\quad\n\\vec{v} = \\begin{pmatrix} v_1 \\\\ v_2 \\\\ v_3 \\end{pmatrix}\n\\] The solutions are: \\[\nx = \\frac{\\det\\begin{pmatrix} v_1 & a_{12} & a_{13} \\\\ v_2 & a_{22} & a_{23} \\\\ v_3 & a_{32} & a_{33} \\end{pmatrix}}{\\det(A)}, \\quad\ny = \\frac{\\det\\begin{pmatrix} a_{11} & v_1 & a_{13} \\\\ a_{21} & v_2 & a_{23} \\\\ a_{31} & v_3 & a_{33} \\end{pmatrix}}{\\det(A)}, \\quad\nz = \\frac{\\det\\begin{pmatrix} a_{11} & a_{12} & v_1 \\\\ a_{21} & a_{22} & v_2 \\\\ a_{31} & a_{32} & v_3 \\end{pmatrix}}{\\det(A)}\n\\]\n\n\n\n4. Mistakes\n\nApplying Cramer’s Rule when det(A) = 0: The formula involves division by det(A). Why it’s wrong: If the determinant is zero, the system either has no solution or infinitely many solutions, but not a unique one. The rule is not applicable in this case.\nUsing Cramer’s Rule for Practical Computation: While elegant, calculating determinants is computationally intensive, growing factorially with the size of the matrix. Why it’s wrong: For systems larger than 3x3 or 4x4, methods like Gaussian elimination are orders of magnitude faster and more numerically stable.\nIncorrectly Replacing the Column Vector: When solving for a specific variable, for example, y (the second variable), the constant vector \\(\\vec{v}\\) must replace the second column of the matrix A. Why it’s wrong: Placing the vector \\(\\vec{v}\\) in any other column will calculate the value for a different variable, leading to an incorrect result.\nAssuming Dot Products are Preserved: The geometric proof relies on how areas/volumes scale, not on the preservation of angles or lengths. Why it’s wrong: General linear transformations (those that are not orthonormal/rotations) will stretch and shear space, altering the dot product between vectors. The relationship T(v) ⋅ T(w) = v ⋅ w does not hold for most transformations.\n\n\n\n5. Examples\n\n5.1. 2x2 System\nQuestion: Solve the following system using Cramer’s Rule: \\(2x - y = 4\\) \\(x + y = 2\\)\n\n\nClick to see the solution\n\n\nWrite the system in matrix form \\(A\\vec{x} = \\vec{v}\\): \\[ \\begin{pmatrix} 2 & -1 \\\\ 1 & 1 \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\end{pmatrix} = \\begin{pmatrix} 4 \\\\ 2 \\end{pmatrix} \\]\nCalculate the determinant of the coefficient matrix A: \\[ \\det(A) = (2)(1) - (-1)(1) = 2 + 1 = 3 \\]\nSolve for x: Replace the first column of A with \\(\\vec{v}\\) to create \\(A_x\\), then find its determinant. \\[ A_x = \\begin{pmatrix} 4 & -1 \\\\ 2 & 1 \\end{pmatrix} \\implies \\det(A_x) = (4)(1) - (-1)(2) = 4 + 2 = 6 \\] \\[ x = \\frac{\\det(A_x)}{\\det(A)} = \\frac{6}{3} = 2 \\]\nSolve for y: Replace the second column of A with \\(\\vec{v}\\) to create \\(A_y\\), then find its determinant. \\[ A_y = \\begin{pmatrix} 2 & 4 \\\\ 1 & 2 \\end{pmatrix} \\implies \\det(A_y) = (2)(2) - (4)(1) = 4 - 4 = 0 \\] \\[ y = \\frac{\\det(A_y)}{\\det(A)} = \\frac{0}{3} = 0 \\]\n\nAnswer: The solution is \\(x=2, y=0\\).\n\n\n\n5.2. Another 2x2 System\nQuestion: Solve using Cramer’s Rule: \\(3x + 2y = 7\\) \\(x - 5y = -9\\)\n\n\nClick to see the solution\n\n\nMatrix form: \\[ \\begin{pmatrix} 3 & 2 \\\\ 1 & -5 \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\end{pmatrix} = \\begin{pmatrix} 7 \\\\ -9 \\end{pmatrix} \\]\nCalculate det(A): \\[ \\det(A) = (3)(-5) - (2)(1) = -15 - 2 = -17 \\]\nSolve for x: \\[ \\det(A_x) = \\det\\begin{pmatrix} 7 & 2 \\\\ -9 & -5 \\end{pmatrix} = (7)(-5) - (2)(-9) = -35 + 18 = -17 \\] \\[ x = \\frac{-17}{-17} = 1 \\]\nSolve for y: \\[ \\det(A_y) = \\det\\begin{pmatrix} 3 & 7 \\\\ 1 & -9 \\end{pmatrix} = (3)(-9) - (7)(1) = -27 - 7 = -34 \\] \\[ y = \\frac{-34}{-17} = 2 \\]\n\nAnswer: The solution is \\(x=1, y=2\\).\n\n\n\n5.3. 3x3 System\nQuestion: Solve for z in the following system using Cramer’s Rule: \\(x + 2y + z = 3\\) \\(2x - y - z = 0\\) \\(x + y + z = 2\\)\n\n\nClick to see the solution\n\n\nMatrix form \\(A\\vec{x} = \\vec{v}\\): \\[ A = \\begin{pmatrix} 1 & 2 & 1 \\\\ 2 & -1 & -1 \\\\ 1 & 1 & 1 \\end{pmatrix}, \\quad \\vec{v} = \\begin{pmatrix} 3 \\\\ 0 \\\\ 2 \\end{pmatrix} \\]\nCalculate det(A): \\[ \\det(A) = 1((-1)(1) - (-1)(1)) - 2((2)(1) - (-1)(1)) + 1((2)(1) - (-1)(1)) \\] \\[ \\det(A) = 1(0) - 2(3) + 1(3) = -6 + 3 = -3 \\]\nSolve for z: We need \\(\\det(A_z)\\). Replace the third column of A with \\(\\vec{v}\\). \\[ A_z = \\begin{pmatrix} 1 & 2 & 3 \\\\ 2 & -1 & 0 \\\\ 1 & 1 & 2 \\end{pmatrix} \\] \\[ \\det(A_z) = 1((-1)(2) - (0)(1)) - 2((2)(2) - (0)(1)) + 3((2)(1) - (-1)(1)) \\] \\[ \\det(A_z) = 1(-2) - 2(4) + 3(3) = -2 - 8 + 9 = -1 \\]\nCalculate z: \\[ z = \\frac{\\det(A_z)}{\\det(A)} = \\frac{-1}{-3} = \\frac{1}{3} \\]\n\nAnswer: \\(z = \\frac{1}{3}\\).\n\n\n\n5.4. Geometric Interpretation Example\nQuestion: For the system in Example 5.1, what is the area of the parallelogram spanned by the vectors \\(\\begin{pmatrix} 2 \\\\ 1 \\end{pmatrix}\\) and \\(\\begin{pmatrix} 4 \\\\ 2 \\end{pmatrix}\\)? How does it relate to the solution y?\n\n\nClick to see the solution\n\n\nThe area is the determinant of the matrix formed by these vectors: \\[ \\text{Area} = \\det\\begin{pmatrix} 2 & 4 \\\\ 1 & 2 \\end{pmatrix} = (2)(2) - (4)(1) = 0 \\]\nFrom Cramer’s rule, we know \\(y = \\frac{\\det(A_y)}{\\det(A)}\\). The area we just calculated is \\(\\det(A_y)\\).\nSince \\(\\det(A_y) = 0\\), the value of y is \\(\\frac{0}{3} = 0\\).\n\nAnswer: The area is 0. This is the numerator in Cramer’s Rule for y, and it confirms that the y-coordinate of the solution is 0.\n\n\n\n5.5. System with No Unique Solution\nQuestion: Try to solve the following system using Cramer’s Rule: \\(2x + 4y = 6\\) \\(x + 2y = 3\\)\n\n\nClick to see the solution\n\n\nMatrix form: \\[ A = \\begin{pmatrix} 2 & 4 \\\\ 1 & 2 \\end{pmatrix}, \\quad \\vec{v} = \\begin{pmatrix} 6 \\\\ 3 \\end{pmatrix} \\]\nCalculate det(A): \\[ \\det(A) = (2)(2) - (4)(1) = 4 - 4 = 0 \\]\n\nAnswer: Since det(A) = 0, Cramer’s Rule cannot be applied. The system does not have a unique solution. (In this case, it has infinitely many solutions).\n\n\n\n5.6. Another 3x3 System\nQuestion: Solve for x using Cramer’s Rule: \\(-4x + 2y + 3z = 7\\) \\(-x + 2z = -8\\) \\(-4x + 6y - 9z = 3\\)\n\n\nClick to see the solution\n\n\nMatrix form \\(A\\vec{x} = \\vec{v}\\): \\[ A = \\begin{pmatrix} -4 & 2 & 3 \\\\ -1 & 0 & 2 \\\\ -4 & 6 & -9 \\end{pmatrix}, \\quad \\vec{v} = \\begin{pmatrix} 7 \\\\ -8 \\\\ 3 \\end{pmatrix} \\]\nCalculate det(A): \\[ \\det(A) = -4((0)(-9) - (2)(6)) - 2((-1)(-9) - (2)(-4)) + 3((-1)(6) - (0)(-4)) \\] \\[ \\det(A) = -4(-12) - 2(9 + 8) + 3(-6) = 48 - 2(17) - 18 = 48 - 34 - 18 = -4 \\]\nSolve for x: We need \\(\\det(A_x)\\). Replace the first column of A with \\(\\vec{v}\\). \\[ A_x = \\begin{pmatrix} 7 & 2 & 3 \\\\ -8 & 0 & 2 \\\\ 3 & 6 & -9 \\end{pmatrix} \\] \\[ \\det(A_x) = 7((0)(-9) - (2)(6)) - 2((-8)(-9) - (2)(3)) + 3((-8)(6) - (0)(3)) \\] \\[ \\det(A_x) = 7(-12) - 2(72 - 6) + 3(-48) = -84 - 2(66) - 144 = -84 - 132 - 144 = -360 \\]\nCalculate x: \\[ x = \\frac{\\det(A_x)}{\\det(A)} = \\frac{-360}{-4} = 90 \\]\n\nAnswer: \\(x = 90\\).\n\n\n\n5.7. A third 3x3 System\nQuestion: Solve for y using Cramer’s Rule: \\(x + z = 3\\) \\(y - z = 1\\) \\(x - y = 0\\)\n\n\nClick to see the solution\n\n\nMatrix form \\(A\\vec{x} = \\vec{v}\\): \\[ A = \\begin{pmatrix} 1 & 0 & 1 \\\\ 0 & 1 & -1 \\\\ 1 & -1 & 0 \\end{pmatrix}, \\quad \\vec{v} = \\begin{pmatrix} 3 \\\\ 1 \\\\ 0 \\end{pmatrix} \\]\nCalculate det(A): \\[ \\det(A) = 1((1)(0) - (-1)(-1)) - 0(...) + 1((0)(-1) - (1)(1)) \\] \\[ \\det(A) = 1(-1) + 1(-1) = -2 \\]\nSolve for y: We need \\(\\det(A_y)\\). Replace the second column of A with \\(\\vec{v}\\). \\[ A_y = \\begin{pmatrix} 1 & 3 & 1 \\\\ 0 & 1 & -1 \\\\ 1 & 0 & 0 \\end{pmatrix} \\] \\[ \\det(A_y) = 1((1)(0) - (-1)(0)) - 3((0)(0) - (-1)(1)) + 1((0)(0) - (1)(1)) \\] \\[ \\det(A_y) = 1(0) - 3(1) + 1(-1) = -3 - 1 = -4 \\]\nCalculate y: \\[ y = \\frac{\\det(A_y)}{\\det(A)} = \\frac{-4}{-2} = 2 \\]\n\nAnswer: \\(y = 2\\).",
    "crumbs": [
      "Essence of linear algebra",
      "12. Linear Systems, Cramer's Rule, Determinants"
    ]
  },
  {
    "objectID": "Essence of linear algebra/vid_3.html",
    "href": "Essence of linear algebra/vid_3.html",
    "title": "3. Linear Transformations, Matrices",
    "section": "",
    "text": "1. Summary\n\n1.1 Transformations\n\n1.1.1 Transformation as a Function\nThe term transformation is essentially a synonym for function. It describes a process that takes an input and produces a corresponding output. In the context of linear algebra, we are specifically interested in transformations that take a vector as an input and produce another vector as an output. For example, a transformation L could take an input vector \\(\\vec{v} = \\begin{pmatrix} 5 \\\\ 7 \\end{pmatrix}\\) and output the vector \\(\\begin{pmatrix} 2 \\\\ -3 \\end{pmatrix}\\).\n\n\n1.1.2 Visualizing Transformations\nWhile “function” is a general term, “transformation” suggests a visual interpretation involving movement. A great way to understand functions that operate on vectors is to visualize them as a transformation of space.\n\nArrow to Arrow: You can imagine the input vector (an arrow) moving to become the output vector (another arrow).\nPoint to Point: A cleaner way is to represent each vector by the single point where its tip is located. The transformation then becomes the movement of every point in space to some other point.\nTransforming Space: To visualize the effect on the entire space, we can observe how an infinite grid of points moves. This gives a sense of the “squishing and morphing” of space itself.\n\n\n\n\n\n1.2 Linear Transformations\nLinear algebra focuses on a specific, simpler class of transformations called linear transformations. These are much easier to understand than arbitrary, complex transformations that might curve and distort space in complicated ways.\n\n1.2.1 Visual Properties of Linearity\nVisually, a transformation is linear if it satisfies two conditions: 1. All lines remain lines. The transformation cannot curve any straight lines. 2. The origin remains fixed. The point \\((0, 0)\\) does not move.\nAn important consequence of these properties is that grid lines must remain parallel and evenly spaced.\n\n\n1.2.2 Non-Linear Transformations\n\nA transformation that curves straight lines is not linear.\nA transformation that moves the origin, even if it keeps lines straight, is not linear.\n\n\n\n\n1.3 Describing Linear Transformations with Numbers\nA remarkable property of linear transformations is that they are fully described by where the basis vectors (\\(\\hat{\\imath}\\) and \\(\\hat{\\jmath}\\)) land. Everything else follows from this.\n\n1.3.1 The Role of Basis Vectors\nAny vector \\(\\vec{v}\\) with coordinates \\(\\begin{pmatrix} x \\\\ y \\end{pmatrix}\\) can be expressed as a linear combination of the basis vectors: \\(\\vec{v} = x\\hat{\\imath} + y\\hat{\\jmath}\\).\nBecause a linear transformation keeps grid lines parallel and evenly spaced, the transformed vector, let’s call it \\(L(\\vec{v})\\), will be the same linear combination of the transformed basis vectors, \\(L(\\hat{\\imath})\\) and \\(L(\\hat{\\jmath})\\). \\[ L(\\vec{v}) = L(x\\hat{\\imath} + y\\hat{\\jmath}) = x L(\\hat{\\imath}) + y L(\\hat{\\jmath}) \\] This means if we know where \\(\\hat{\\imath}\\) and \\(\\hat{\\jmath}\\) land, we can deduce where any vector lands without needing to watch the transformation itself.\n\n\n\n\n1.4 Matrices as Linear Transformations\nWe can package the coordinates of the transformed basis vectors into a 2x2 grid of numbers called a 2x2 matrix. This matrix completely describes the linear transformation.\n\nThe first column of the matrix represents the coordinates where the first basis vector, \\(\\hat{\\imath}\\), lands.\nThe second column of the matrix represents the coordinates where the second basis vector, \\(\\hat{\\jmath}\\), lands.\n\nSo, for a matrix \\(\\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}\\): - \\(\\hat{\\imath}\\) lands on \\(\\begin{pmatrix} a \\\\ c \\end{pmatrix}\\). - \\(\\hat{\\jmath}\\) lands on \\(\\begin{pmatrix} b \\\\ d \\end{pmatrix}\\).\n\n1.4.1 Matrix-Vector Multiplication\nThe process of applying the transformation described by a matrix to a given vector is called matrix-vector multiplication. It is simply the calculation derived in the previous section: taking a linear combination of the matrix’s columns using the vector’s components as scalars.\n\\[ \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\end{pmatrix} = x \\begin{pmatrix} a \\\\ c \\end{pmatrix} + y \\begin{pmatrix} b \\\\ d \\end{pmatrix} = \\begin{pmatrix} ax+by \\\\ cx+dy \\end{pmatrix} \\]\nThis formula is the computational result, but the intuition lies in understanding it as the sum of the scaled, transformed basis vectors.\n\n\n1.4.2 Linearly Dependent Columns\nIf the columns of the matrix are linearly dependent (meaning one is a multiple of the other), it signifies that the transformation squishes all of 2D space onto the single line defined by the span of those columns.\n\n\n\n\n2. Definitions\n\nTransformation: A rule (function) that takes an input, such as a vector, and produces an output. It’s often visualized as a movement or “morphing” of space.\nLinear Transformation: A special type of transformation that preserves the structure of vector space. Visually, it’s a transformation where lines remain lines, the origin stays fixed, and grid lines remain parallel and evenly spaced.\nMatrix: A rectangular array of numbers. In this context, a 2x2 matrix is used to encode a 2D linear transformation, where its columns represent the coordinates where the basis vectors \\(\\hat{\\imath}\\) and \\(\\hat{\\jmath}\\) land.\nMatrix-Vector Multiplication: The computational process of applying a linear transformation (represented by a matrix) to a vector. Geometrically, it calculates the landing spot of the vector after the transformation.\nShear: A type of linear transformation in which one basis vector is held fixed, while the other is pushed parallel to the first. This causes rectangles to be skewed into parallelograms.\n\n\n\n3. Formulas\n\nGeneral Linear Transformation of a Vector: A transformation \\(L\\) applied to a vector \\(\\vec{v} = x\\hat{\\imath} + y\\hat{\\jmath}\\) can be calculated using the transformed basis vectors \\(L(\\hat{\\imath})\\) and \\(L(\\hat{\\jmath})\\): \\[ L(\\vec{v}) = x L(\\hat{\\imath}) + y L(\\hat{\\jmath}) \\]\nMatrix-Vector Multiplication (2x2): The formula for applying the transformation represented by a matrix to a vector: \\[ \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\end{pmatrix} = \\begin{pmatrix} ax + by \\\\ cx + dy \\end{pmatrix} \\]\nFormal Definition of Linearity: A transformation \\(L\\) is linear if it satisfies two properties for all vectors \\(\\vec{v}, \\vec{w}\\) and any scalar \\(c\\):\n\nAdditivity: \\(L(\\vec{v} + \\vec{w}) = L(\\vec{v}) + L(\\vec{w})\\)\nScaling: \\(L(c\\vec{v}) = cL(\\vec{v})\\)\n\n\n\n\n4. Mistakes\n\nMemorizing matrix multiplication mechanically: Only learning the formula (ax + by, cx + dy) without understanding that it represents a linear combination of the transformed basis vectors. Why it’s wrong: This rote memorization obscures the geometric intuition, making it difficult to understand why matrix multiplication works the way it does and how to apply it conceptually.\nConfusing the columns of a matrix with its rows: Forgetting that the columns represent where the basis vectors \\(\\hat{\\imath}\\) and \\(\\hat{\\jmath}\\) land. Why it’s wrong: The columns define the transformation. Swapping them or using rows instead would describe a completely different and incorrect geometric transformation.\nAssuming all geometric transformations are linear: Trying to represent a transformation that curves lines or moves the origin with a single matrix. Why it’s wrong: The rules of matrix-vector multiplication are derived from the properties of linearity (parallel, evenly spaced grid lines). These rules do not apply to non-linear transformations.\nViewing a matrix as just a static table of numbers: Failing to connect a matrix to its dynamic role as a transformation of space. Why it’s wrong: The real power of matrices in linear algebra comes from interpreting them as functions that stretch, rotate, shear, or squish vector space in a structured way.\n\n\n\n5. Examples\n\n5.1 Rotation by 180 Degrees\nQuestion: What is the 2x2 matrix that represents a 180-degree rotation of the plane?\n\n\nClick to see the solution\n\n\nDetermine where \\(\\hat{\\imath}\\) lands: A 180-degree rotation sends the vector \\(\\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\) to \\(\\begin{pmatrix} -1 \\\\ 0 \\end{pmatrix}\\). This is the first column of our matrix.\nDetermine where \\(\\hat{\\jmath}\\) lands: The same rotation sends the vector \\(\\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\\) to \\(\\begin{pmatrix} 0 \\\\ -1 \\end{pmatrix}\\). This is the second column.\nConstruct the matrix: Combine the columns.\n\nAnswer: The matrix is \\(\\begin{pmatrix} -1 & 0 \\\\ 0 & -1 \\end{pmatrix}\\).\n\n\n\n5.2 Finding a Transformation Matrix\nQuestion: A linear transformation T sends \\(\\hat{\\imath}\\) to \\(\\begin{pmatrix} 4 \\\\ 2 \\end{pmatrix}\\) and \\(\\hat{\\jmath}\\) to \\(\\begin{pmatrix} -1 \\\\ 3 \\end{pmatrix}\\). What is the matrix of T?\n\n\nClick to see the solution\n\n\nRecall the definition of a transformation matrix: The columns of the matrix are the coordinates of the transformed basis vectors.\nFirst column: The coordinates where \\(\\hat{\\imath}\\) lands are \\(\\begin{pmatrix} 4 \\\\ 2 \\end{pmatrix}\\).\nSecond column: The coordinates where \\(\\hat{\\jmath}\\) lands are \\(\\begin{pmatrix} -1 \\\\ 3 \\end{pmatrix}\\).\nAssemble the matrix: Place these vectors as columns in a 2x2 matrix.\n\nAnswer: The matrix is \\(\\begin{pmatrix} 4 & -1 \\\\ 2 & 3 \\end{pmatrix}\\).\n\n\n\n5.3 Applying a Shear Transformation\nQuestion: A shear transformation is defined by the matrix \\(M = \\begin{pmatrix} 1 & 1 \\\\ 0 & 1 \\end{pmatrix}\\). Where does the vector \\(\\vec{v} = \\begin{pmatrix} 2 \\\\ 3 \\end{pmatrix}\\) land after this transformation?\n\n\nClick to see the solution\n\n\nSet up the matrix-vector multiplication: \\[ \\begin{pmatrix} 1 & 1 \\\\ 0 & 1 \\end{pmatrix} \\begin{pmatrix} 2 \\\\ 3 \\end{pmatrix} \\]\nApply the formula \\(x L(\\hat{\\imath}) + y L(\\hat{\\jmath})\\): \\[ 2 \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix} + 3 \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} \\]\nCalculate the sum: \\[ \\begin{pmatrix} 2 \\\\ 0 \\end{pmatrix} + \\begin{pmatrix} 3 \\\\ 3 \\end{pmatrix} = \\begin{pmatrix} 5 \\\\ 3 \\end{pmatrix} \\]\n\nAnswer: The vector \\(\\vec{v}\\) lands on the coordinates \\(\\begin{pmatrix} 5 \\\\ 3 \\end{pmatrix}\\). \n\n\n\n5.4 Scaling Transformation\nQuestion: What is the matrix that scales every vector in the plane by a factor of 3?\n\n\nClick to see the solution\n\n\nFind the new location of \\(\\hat{\\imath}\\): The vector \\(\\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\) scaled by 3 becomes \\(\\begin{pmatrix} 3 \\\\ 0 \\end{pmatrix}\\). This is the first column.\nFind the new location of \\(\\hat{\\jmath}\\): The vector \\(\\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\\) scaled by 3 becomes \\(\\begin{pmatrix} 0 \\\\ 3 \\end{pmatrix}\\). This is the second column.\nConstruct the matrix.\n\nAnswer: The scaling matrix is \\(\\begin{pmatrix} 3 & 0 \\\\ 0 & 3 \\end{pmatrix}\\).\n\n\n\n5.5 Identifying a Non-Linear Transformation\nQuestion: Is the transformation \\(L\\left(\\begin{pmatrix} x \\\\ y \\end{pmatrix}\\right) = \\begin{pmatrix} x^2 \\\\ y \\end{pmatrix}\\) a linear transformation? Why or why not?\n\n\nClick to see the solution\n\n\nCheck the properties of linearity: A key property is that lines must remain lines.\nConsider a vertical line: Let’s take the line \\(x=1\\). Points on this line are \\((1, 0), (1, 1), (1, 2), \\dots\\).\nApply the transformation: The transformation sends these points to \\((1^2, 0), (1^2, 1), (1^2, 2)\\), which simplifies to \\((1, 0), (1, 1), (1, 2)\\). This line remains a line.\nConsider a horizontal line: Let’s take the line \\(y=1\\). Points on this line are \\((0, 1), (1, 1), (2, 1), \\dots\\).\nApply the transformation: The transformation sends these points to \\((0^2, 1), (1^2, 1), (2^2, 1)\\), which simplifies to \\((0, 1), (1, 1), (4, 1)\\). The points no longer form a straight line (the spacing between x-coordinates is not uniform).\n\nAnswer: It is not a linear transformation because it does not keep all lines straight.\n\n\n\n5.6 Projection onto the x-axis\nQuestion: What is the matrix for the linear transformation that projects every vector onto the x-axis?\n\n\nClick to see the solution\n\n\nProject \\(\\hat{\\imath}\\): The vector \\(\\hat{\\imath} = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\) is already on the x-axis, so it remains unchanged. This is the first column.\nProject \\(\\hat{\\jmath}\\): The vector \\(\\hat{\\jmath} = \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\\) is projected down to the origin, \\(\\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}\\). This is the second column.\nConstruct the matrix.\n\nAnswer: The projection matrix is \\(\\begin{pmatrix} 1 & 0 \\\\ 0 & 0 \\end{pmatrix}\\). Note that the columns are linearly dependent, which makes sense as the transformation squishes 2D space onto a 1D line.\n\n\n\n5.7 Reflection across the y-axis\nQuestion: Find the matrix that reflects every vector across the y-axis.\n\n\nClick to see the solution\n\n\nDetermine where \\(\\hat{\\imath}\\) lands: Reflecting \\(\\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\) across the y-axis moves it to \\(\\begin{pmatrix} -1 \\\\ 0 \\end{pmatrix}\\). This is the first column.\nDetermine where \\(\\hat{\\jmath}\\) lands: The vector \\(\\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\\) lies on the y-axis, so it does not move. The second column is \\(\\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\\).\nConstruct the matrix.\n\nAnswer: The reflection matrix is \\(\\begin{pmatrix} -1 & 0 \\\\ 0 & 1 \\end{pmatrix}\\).",
    "crumbs": [
      "Essence of linear algebra",
      "3. Linear Transformations, Matrices"
    ]
  },
  {
    "objectID": "Essence of linear algebra/vid_15.html",
    "href": "Essence of linear algebra/vid_15.html",
    "title": "15. Eigenvalues, Eigenvectors, Linear Algebra",
    "section": "",
    "text": "1. Summary\n\n1.1 Introduction\nThis document provides a quick and intuitive method for computing the eigenvalues of 2x2 matrices. It is intended for those who are already familiar with the fundamental concepts of eigenvalues and eigenvectors but are looking for a more efficient computational technique than the traditional method involving the characteristic polynomial. The goal is to rediscover this method through its underlying principles.\n\n\n1.2 Core Concepts Review\n\n1.2.1 Eigenvectors and Eigenvalues\nA linear transformation can be thought of as a stretching, squishing, or rotating of space. While most vectors are knocked off their original span by a transformation, some special vectors are not.\nAn eigenvector of a linear transformation is a non-zero vector whose direction remains unchanged after the transformation is applied; it is only scaled (stretched or shrunk). The eigenvalue, denoted by the Greek letter lambda (\\(\\lambda\\)), is the scalar factor by which the eigenvector is scaled.\n\nThis relationship is captured by the fundamental eigenvalue equation: \\[ A\\vec{v} = \\lambda\\vec{v} \\] Where: - \\(A\\) is the matrix representing the linear transformation. - \\(\\vec{v}\\) is the eigenvector. - \\(\\lambda\\) is the corresponding eigenvalue.\n\n\n1.2.2 The Characteristic Equation\nTo find the eigenvalues, we rearrange the fundamental equation. \\[ A\\vec{v} - \\lambda\\vec{v} = \\vec{0} \\] To factor out the vector \\(\\vec{v}\\), we must first express the scalar multiplication \\(\\lambda\\vec{v}\\) as a matrix-vector product. We do this by introducing the identity matrix \\(I\\). \\[ A\\vec{v} - (\\lambda I)\\vec{v} = \\vec{0} \\] \\[ (A - \\lambda I)\\vec{v} = \\vec{0} \\] Since an eigenvector \\(\\vec{v}\\) must be non-zero by definition, this equation tells us that the matrix \\((A - \\lambda I)\\) transforms a non-zero vector into the zero vector. This is only possible if the transformation represented by \\((A - \\lambda I)\\) squishes space into a lower dimension (e.g., a 2D plane into a 1D line). A transformation that reduces dimensionality has a determinant of zero.\nTherefore, to find the eigenvalues (\\(\\lambda\\)), we must solve the characteristic equation: \\[ \\det(A - \\lambda I) = 0 \\]\n\n\n\n1.3 The Traditional Method\nThe standard approach involves solving the characteristic equation directly. For a general 2x2 matrix \\(A = \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}\\), this looks like: \\[ \\det\\left(\\begin{pmatrix} a-\\lambda & b \\\\ c & d-\\lambda \\end{pmatrix}\\right) = 0 \\] Expanding this determinant gives the characteristic polynomial: \\[ (a-\\lambda)(d-\\lambda) - bc = 0 \\] \\[ \\lambda^2 - (a+d)\\lambda + (ad-bc) = 0 \\] The roots of this quadratic polynomial are the eigenvalues of the matrix. While effective, this process requires several algebraic steps which can be cumbersome.\n\n\n1.4 A Quicker Method: The Three Key Facts\nA more direct method for 2x2 matrices relies on three interconnected facts about the relationship between a matrix, its eigenvalues, its trace, and its determinant.\n\n1.4.1 Fact 1: The Trace\nThe trace of a square matrix is the sum of the elements on its main diagonal. For a 2x2 matrix, tr(A) = a + d. A crucial property is that the trace of a matrix is also equal to the sum of its eigenvalues. \\[ \\text{tr}(A) = \\lambda_1 + \\lambda_2 \\] This implies that the mean of the diagonal entries is equal to the mean of the eigenvalues. \\[ m = \\frac{a+d}{2} = \\frac{\\lambda_1 + \\lambda_2}{2} \\]\n\n\n1.4.2 Fact 2: The Determinant\nThe determinant of a 2x2 matrix is calculated as det(A) = ad - bc. The determinant is also equal to the product of the eigenvalues. \\[ p = \\det(A) = \\lambda_1 \\lambda_2 \\] Geometrically, this makes sense because the eigenvalues represent the scaling factors along the principal axes of the transformation, and the determinant represents the overall scaling factor for area.\n\n\n1.4.3 Fact 3: Recovering Eigenvalues from Mean and Product\nWith the mean (\\(m\\)) and product (\\(p\\)) of the two eigenvalues known, we can find the eigenvalues themselves. The two eigenvalues, \\(\\lambda_1\\) and \\(\\lambda_2\\), are symmetrically spaced around their mean, \\(m\\). We can represent them as \\(m-d\\) and \\(m+d\\) for some distance \\(d\\).\n\nUsing the product property: \\[ (m+d)(m-d) = p \\] \\[ m^2 - d^2 = p \\] Solving for the distance \\(d\\): \\[ d^2 = m^2 - p \\implies d = \\sqrt{m^2 - p} \\] Therefore, the two eigenvalues are given by the formula: \\[ \\lambda_{1,2} = m \\pm \\sqrt{m^2 - p} \\]\nThis formula provides a direct path from the matrix entries to the eigenvalues, bypassing the explicit calculation of the characteristic polynomial.\n\n\n\n\n2. Definitions\n\nEigenvector: A non-zero vector whose direction is unchanged by a linear transformation; it is only scaled by a scalar factor.\nEigenvalue: The scalar factor, denoted \\(\\lambda\\), by which an eigenvector is scaled under a linear transformation.\nCharacteristic Polynomial: A polynomial derived from a matrix whose roots are the matrix’s eigenvalues. It is found by solving the equation \\(\\det(A - \\lambda I) = 0\\).\nTrace: The sum of the elements on the main diagonal of a square matrix. For a 2x2 matrix, this is \\(a+d\\).\nDeterminant: A scalar value representing how a linear transformation scales area or volume. For a 2x2 matrix, this is \\(ad-bc\\).\nPauli Spin Matrices: A set of three 2x2 complex matrices used in quantum mechanics to represent the spin of a particle along the x, y, and z axes.\n\n\n\n3. Formulas\n\nEigenvalue Equation: \\(A\\vec{v} = \\lambda\\vec{v}\\)\nCharacteristic Equation: \\(\\det(A - \\lambda I) = 0\\)\nTrace-Eigenvalue Relation (2x2): \\(\\text{tr}(A) = a+d = \\lambda_1 + \\lambda_2\\)\nDeterminant-Eigenvalue Relation (2x2): \\(\\det(A) = ad-bc = \\lambda_1 \\lambda_2\\)\nQuick Eigenvalue Formula (2x2): \\(\\lambda_{1,2} = m \\pm \\sqrt{m^2 - p}\\)\n\nWhere \\(m = \\frac{a+d}{2}\\) (the mean of the diagonal) and \\(p = ad-bc\\) (the determinant).\n\n\n\n\n4. Mistakes\n\nApplying the 2x2 trick to larger matrices: This specific formula for \\(m\\) and \\(p\\) is only valid for 2x2 matrices.\nIncorrectly calculating the mean (m): Forgetting to divide the trace \\((a+d)\\) by 2.\nConfusing the product (p) with the trace (tr): The product of eigenvalues is the determinant (\\(ad-bc\\)), not the trace (\\(a+d\\)).\nArithmetic errors in the final formula: Simple mistakes when squaring the mean or subtracting the product under the square root are common.\nForgetting the non-zero vector condition: An eigenvector must, by definition, be a non-zero vector. This is the justification for requiring the determinant of \\((A - \\lambda I)\\) to be zero.\nIgnoring complex numbers: If \\(m^2 - p\\) is negative, the eigenvalues will be complex numbers. This is a valid outcome.\n\n\n\n5. Examples\n\n5.1. Example 1\nQuestion: Find the eigenvalues of the matrix \\(A = \\begin{pmatrix} 3 & 1 \\\\ 4 & 1 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nCalculate the mean (\\(m\\)) of the diagonal elements: \\(m = \\frac{3 + 1}{2} = 2\\)\nCalculate the determinant (product, \\(p\\)): \\(p = (3)(1) - (1)(4) = 3 - 4 = -1\\)\nApply the formula: \\(\\lambda_{1,2} = m \\pm \\sqrt{m^2 - p}\\) \\(\\lambda_{1,2} = 2 \\pm \\sqrt{2^2 - (-1)} = 2 \\pm \\sqrt{4 + 1} = 2 \\pm \\sqrt{5}\\)\n\nAnswer: The eigenvalues are \\(2 + \\sqrt{5}\\) and \\(2 - \\sqrt{5}\\).\n\n\n\n5.2. Example 2\nQuestion: Find the eigenvalues of the matrix \\(B = \\begin{pmatrix} 2 & 7 \\\\ 1 & 8 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nCalculate the mean (\\(m\\)): \\(m = \\frac{2 + 8}{2} = 5\\)\nCalculate the determinant (\\(p\\)): \\(p = (2)(8) - (7)(1) = 16 - 7 = 9\\)\nApply the formula: \\(\\lambda_{1,2} = 5 \\pm \\sqrt{5^2 - 9} = 5 \\pm \\sqrt{25 - 9} = 5 \\pm \\sqrt{16} = 5 \\pm 4\\)\n\nAnswer: The eigenvalues are \\(5+4=9\\) and \\(5-4=1\\).\n\n\n\n5.3. Example 3\nQuestion: Find the eigenvalues of the Pauli spin matrix \\(\\sigma_x = \\begin{pmatrix} 0 & 1 \\\\ 1 & 0 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nCalculate the mean (\\(m\\)): \\(m = \\frac{0 + 0}{2} = 0\\)\nCalculate the determinant (\\(p\\)): \\(p = (0)(0) - (1)(1) = -1\\)\nApply the formula: \\(\\lambda_{1,2} = 0 \\pm \\sqrt{0^2 - (-1)} = \\pm \\sqrt{1} = \\pm 1\\)\n\nAnswer: The eigenvalues are \\(1\\) and \\(-1\\).\n\n\n\n5.4. Example 4\nQuestion: Find the eigenvalues of the matrix \\(C = \\begin{pmatrix} 5 & -1 \\\\ 3 & 1 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nCalculate the mean (\\(m\\)): \\(m = \\frac{5 + 1}{2} = 3\\)\nCalculate the determinant (\\(p\\)): \\(p = (5)(1) - (-1)(3) = 5 - (-3) = 8\\)\nApply the formula: \\(\\lambda_{1,2} = 3 \\pm \\sqrt{3^2 - 8} = 3 \\pm \\sqrt{9 - 8} = 3 \\pm \\sqrt{1} = 3 \\pm 1\\)\n\nAnswer: The eigenvalues are \\(3+1=4\\) and \\(3-1=2\\).\n\n\n\n5.5. Example 5 (Complex Eigenvalues)\nQuestion: Find the eigenvalues of the matrix \\(D = \\begin{pmatrix} 1 & -1 \\\\ 1 & 1 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nCalculate the mean (\\(m\\)): \\(m = \\frac{1 + 1}{2} = 1\\)\nCalculate the determinant (\\(p\\)): \\(p = (1)(1) - (-1)(1) = 1 - (-1) = 2\\)\nApply the formula: \\(\\lambda_{1,2} = 1 \\pm \\sqrt{1^2 - 2} = 1 \\pm \\sqrt{-1} = 1 \\pm i\\)\n\nAnswer: The eigenvalues are the complex conjugates \\(1+i\\) and \\(1-i\\).\n\n\n\n5.6. Example 6\nQuestion: Find the eigenvalues of the matrix \\(E = \\begin{pmatrix} -2 & -7 \\\\ 1 & 6 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nCalculate the mean (\\(m\\)): \\(m = \\frac{-2 + 6}{2} = \\frac{4}{2} = 2\\)\nCalculate the determinant (\\(p\\)): \\(p = (-2)(6) - (-7)(1) = -12 - (-7) = -5\\)\nApply the formula: \\(\\lambda_{1,2} = 2 \\pm \\sqrt{2^2 - (-5)} = 2 \\pm \\sqrt{4 + 5} = 2 \\pm \\sqrt{9} = 2 \\pm 3\\)\n\nAnswer: The eigenvalues are \\(2+3=5\\) and \\(2-3=-1\\).\n\n\n\n5.7. Example 7\nQuestion: Find the eigenvalues of the matrix \\(F = \\begin{pmatrix} 4 & 1 \\\\ -2 & 1 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nCalculate the mean (\\(m\\)): \\(m = \\frac{4 + 1}{2} = 2.5\\)\nCalculate the determinant (\\(p\\)): \\(p = (4)(1) - (1)(-2) = 4 - (-2) = 6\\)\nApply the formula: \\(\\lambda_{1,2} = 2.5 \\pm \\sqrt{(2.5)^2 - 6} = 2.5 \\pm \\sqrt{6.25 - 6} = 2.5 \\pm \\sqrt{0.25} = 2.5 \\pm 0.5\\)\n\nAnswer: The eigenvalues are \\(2.5+0.5=3\\) and \\(2.5-0.5=2\\).",
    "crumbs": [
      "Essence of linear algebra",
      "15. Eigenvalues, Eigenvectors, Linear Algebra"
    ]
  },
  {
    "objectID": "Essence of linear algebra/vid_14.html",
    "href": "Essence of linear algebra/vid_14.html",
    "title": "14. Eigenvectors and Eigenvalues",
    "section": "",
    "text": "1. Summary\n\n1.1 The Core Idea\nIn linear algebra, a linear transformation can be thought of as a function that moves vectors around in space. While most vectors are knocked off their original line, or span, some special vectors are not.\n\nAn eigenvector of a transformation is a non-zero vector that, after the transformation is applied, stays on its original span. It doesn’t change its direction, though it might flip.\nThe eigenvalue is the scalar factor by which the eigenvector is stretched, squished, or flipped. A positive eigenvalue means the vector is stretched or squished. A negative eigenvalue means it’s flipped and then stretched or squished.\n\nThis concept is analogous to asking “What does music mean to you?” and getting the answer “The manipulation of notes.” While technically true, it misses the deeper essence. Similarly, defining mathematics as just “the manipulation of numbers and structures” misses the rich, intuitive meaning. Eigenvectors and eigenvalues provide a deeper understanding of a transformation’s behavior. \n\n\n1.2 The Eigenvector Equation\nThe relationship between a transformation matrix A, its eigenvector \\(\\vec{v}\\), and its corresponding eigenvalue \\(\\lambda\\) is captured by the fundamental equation: \\[\nA\\vec{v} = \\lambda\\vec{v}\n\\] This equation states that the action of the matrix A on the vector \\(\\vec{v}\\) (matrix-vector multiplication) is the same as simply scaling the vector \\(\\vec{v}\\) by the scalar \\(\\lambda\\) (scalar-vector multiplication). Our goal is to find the pairs of \\(\\lambda\\) and non-zero \\(\\vec{v}\\) that make this equation true for a given matrix A.\n\n\n1.3 Solving for Eigenvalues and Eigenvectors\nTo solve the equation \\(A\\vec{v} = \\lambda\\vec{v}\\), we manipulate it algebraically.\n\nRewrite the Right Side: The right side, \\(\\lambda\\vec{v}\\), can be expressed as a matrix-vector product. We use the identity matrix, I, which has ones on the diagonal and zeros elsewhere. The matrix \\((\\lambda I)\\) is a diagonal matrix with \\(\\lambda\\) on its diagonal, and multiplying it by \\(\\vec{v}\\) has the effect of scaling \\(\\vec{v}\\) by \\(\\lambda\\). \\[\nA\\vec{v} = (\\lambda I)\\vec{v}\n\\]\nRearrange the Equation: Move all terms to one side to set the equation to the zero vector. \\[\nA\\vec{v} - (\\lambda I)\\vec{v} = \\vec{0}\n\\]\nFactor out the Vector: \\[\n(A - \\lambda I)\\vec{v} = \\vec{0}\n\\] We are looking for a non-zero vector \\(\\vec{v}\\) that this new matrix, \\((A - \\lambda I)\\), transforms into the zero vector.\n\n\n1.3.1 Finding the Eigenvalue (\\(\\lambda\\))\nA matrix transforms a non-zero vector into the zero vector only if the transformation squishes space into a lower dimension. This property is indicated by the determinant of the matrix being zero.\n\nTherefore, to find the eigenvalues, we must find the values of \\(\\lambda\\) for which the determinant of the matrix \\((A - \\lambda I)\\) is zero. \\[\n\\det(A - \\lambda I) = 0\n\\]\nThis equation is called the characteristic polynomial of the matrix A. Solving it for \\(\\lambda\\) yields the eigenvalues. \n\n\n\n1.3.2 Finding the Eigenvector (\\(\\vec{v}\\))\nOnce you have an eigenvalue \\(\\lambda\\), you substitute it back into the equation \\((A - \\lambda I)\\vec{v} = \\vec{0}\\) and solve for the vector \\(\\vec{v}\\). The set of all solutions for a given \\(\\lambda\\) is the eigenspace corresponding to that eigenvalue. Any non-zero vector in that eigenspace is an eigenvector.\n\n\n\n1.4 Special Cases\n\nRotation: A rotation in 2D, such as a 90-degree rotation, might have no real eigenvectors because every vector is rotated off its span. The characteristic polynomial will have no real roots, only complex ones.\n3D Rotation: Every 3D rotation has an axis of rotation. Any vector lying on this axis is an eigenvector with an eigenvalue of 1, as it remains unchanged by the rotation.\nUniform Scaling: A transformation that scales everything by the same factor (e.g., doubles the length of every vector) has an eigenvalue of 2. In this case, every vector is an eigenvector.\n\n\n\n1.5 Eigenbasis and Diagonalization\n\n1.5.1 Eigenbasis\nIf a transformation has enough eigenvectors that they can span the entire space, we can pick a set of these eigenvectors to be our basis vectors. This new basis is called an eigenbasis.\n\n\n1.5.2 Diagonal Matrices\nWhen a transformation is described using an eigenbasis, its matrix representation becomes a diagonal matrix.\n\nA diagonal matrix is a matrix where all non-diagonal entries are zero.\nThe diagonal entries are the eigenvalues corresponding to each basis eigenvector. \n\n\n\n1.5.3 The Power of Diagonalization\nWorking with diagonal matrices is computationally much simpler. For instance, raising a diagonal matrix D to a power (e.g., \\(D^{100}\\)) simply involves raising each diagonal entry to that power.\nThis simplicity is leveraged through a change of basis. If a matrix A is not diagonal, but it has an eigenbasis, we can convert it to a diagonal matrix D.\n\nLet P be the change of basis matrix whose columns are the eigenvectors of A.\nThe diagonal matrix D is found using the formula: \\(D = P^{-1}AP\\).\nThis allows for the efficient computation of powers of A: \\(A^n = P D^n P^{-1}\\). This process is known as diagonalization.\n\n\n\n\n\n2. Definitions\n\nEigenvector: A non-zero vector that changes only by a scalar factor when a linear transformation is applied to it. Its direction remains unchanged on its span.\nEigenvalue: The scalar factor by which an eigenvector is scaled during a linear transformation. Denoted by \\(\\lambda\\).\nEigenspace: The set of all eigenvectors that share the same eigenvalue, along with the zero vector.\nSpan: The set of all possible vectors that can be reached by stretching, squishing, or combining a given set of vectors. The span of a single vector is the line passing through it and the origin.\nCharacteristic Polynomial: The polynomial, \\(\\det(A - \\lambda I)\\), whose roots are the eigenvalues of the matrix A.\nEigenbasis: A basis of a vector space consisting entirely of eigenvectors of a given linear transformation.\nDiagonal Matrix: A matrix where all entries off the main diagonal are zero.\n\n\n\n3. Formulas\n\nEigenvector Definition: \\(A\\vec{v} = \\lambda\\vec{v}\\)\nEquation for Solving: \\((A - \\lambda I)\\vec{v} = \\vec{0}\\)\nCharacteristic Equation (for finding eigenvalues): \\(\\det(A - \\lambda I) = 0\\)\nDiagonalization: \\(D = P^{-1}AP\\), where P is the change-of-basis matrix composed of eigenvectors.\nMatrix Powers with Diagonalization: \\(A^n = PD^nP^{-1}\\)\n\n\n\n4. Mistakes\n\nAssuming all matrices have real eigenvectors: A rotation, for instance, might not have any vectors that remain on their original span. This results in a characteristic polynomial with no real solutions for \\(\\lambda\\).\nConfusing matrix multiplication with scalar multiplication: The equation \\(A\\vec{v} = \\lambda\\vec{v}\\) equates two different types of operations which is why the identity matrix I is introduced to create the solvable form \\((A - \\lambda I)\\vec{v} = \\vec{0}\\).\nForgetting that eigenvectors must be non-zero: The zero vector always satisfies the equation \\((A - \\lambda I)\\vec{v} = \\vec{0}\\), but it is explicitly excluded from the definition of an eigenvector.\nIncorrectly calculating the characteristic polynomial: A common mistake is to compute \\(\\det(A) - \\lambda\\) instead of the correct \\(\\det(A - \\lambda I)\\). One must subtract \\(\\lambda\\) from the diagonal elements of A before computing the determinant.\nAssuming all matrices are diagonalizable: For a matrix to be diagonalizable, it must have a full set of eigenvectors that can form a basis for the space. A shear transformation is an example of a matrix that is not diagonalizable because it doesn’t have enough eigenvectors to span the space.\n\n\n\n5. Examples\n\n5.1 Find Eigenvalues\nQuestion: Find the eigenvalues of the matrix \\(A = \\begin{pmatrix} 3 & 1 \\\\ 0 & 2 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nSet up the characteristic equation \\(\\det(A - \\lambda I) = 0\\). \\[\nA - \\lambda I = \\begin{pmatrix} 3 & 1 \\\\ 0 & 2 \\end{pmatrix} - \\lambda \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} = \\begin{pmatrix} 3-\\lambda & 1 \\\\ 0 & 2-\\lambda \\end{pmatrix}\n\\]\nCalculate the determinant. \\[\n\\det \\begin{pmatrix} 3-\\lambda & 1 \\\\ 0 & 2-\\lambda \\end{pmatrix} = (3-\\lambda)(2-\\lambda) - (1)(0) = (3-\\lambda)(2-\\lambda)\n\\]\nSolve for \\(\\lambda\\). \\[\n(3-\\lambda)(2-\\lambda) = 0\n\\] The solutions are \\(\\lambda_1 = 3\\) and \\(\\lambda_2 = 2\\).\n\nAnswer: The eigenvalues are 3 and 2.\n\n\n\n5.2 Find Eigenvectors\nQuestion: Find the eigenvectors for the matrix \\(A = \\begin{pmatrix} 3 & 1 \\\\ 0 & 2 \\end{pmatrix}\\) using the eigenvalues found previously (\\(\\lambda_1 = 3, \\lambda_2 = 2\\)).\n\n\nClick to see the solution\n\nFor \\(\\lambda_1 = 3\\): 1. Solve \\((A - 3I)\\vec{v} = \\vec{0}\\). \\[\n    \\begin{pmatrix} 3-3 & 1 \\\\ 0 & 2-3 \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\end{pmatrix} = \\begin{pmatrix} 0 & 1 \\\\ 0 & -1 \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}\n    \\] 2. This gives the equations \\(0x + 1y = 0\\) and \\(0x - 1y = 0\\), both of which simplify to \\(y=0\\). The variable x can be any non-zero value. Thus, any vector of the form \\(\\begin{pmatrix} x \\\\ 0 \\end{pmatrix}\\) is an eigenvector. A simple choice is \\(\\vec{v}_1 = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\).\nFor \\(\\lambda_2 = 2\\): 1. Solve \\((A - 2I)\\vec{v} = \\vec{0}\\). \\[\n    \\begin{pmatrix} 3-2 & 1 \\\\ 0 & 2-2 \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\end{pmatrix} = \\begin{pmatrix} 1 & 1 \\\\ 0 & 0 \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}\n    \\] 2. This gives the equation \\(x + y = 0\\), or \\(x = -y\\). Any vector satisfying this condition, like \\(\\begin{pmatrix} 1 \\\\ -1 \\end{pmatrix}\\), is an eigenvector. Let’s choose \\(\\vec{v}_2 = \\begin{pmatrix} 1 \\\\ -1 \\end{pmatrix}\\).\nAnswer: An eigenvector for \\(\\lambda=3\\) is \\(\\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\). An eigenvector for \\(\\lambda=2\\) is \\(\\begin{pmatrix} 1 \\\\ -1 \\end{pmatrix}\\).\n\n\n\n5.3 Verify an Eigenvector\nQuestion: Verify that \\(\\vec{v} = \\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix}\\) is an eigenvector of the matrix \\(B = \\begin{pmatrix} 4 & -1 \\\\ 2 & 1 \\end{pmatrix}\\) and find its eigenvalue.\n\n\nClick to see the solution\n\n\nCompute the left side of the equation \\(B\\vec{v} = \\lambda\\vec{v}\\). \\[\nB\\vec{v} = \\begin{pmatrix} 4 & -1 \\\\ 2 & 1 \\end{pmatrix} \\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix} = \\begin{pmatrix} 4(1) - 1(2) \\\\ 2(1) + 1(2) \\end{pmatrix} = \\begin{pmatrix} 2 \\\\ 4 \\end{pmatrix}\n\\]\nCompare the result with the original vector \\(\\vec{v}\\). The result \\(\\begin{pmatrix} 2 \\\\ 4 \\end{pmatrix}\\) is exactly \\(2 \\times \\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix}\\).\nIdentify the eigenvalue. Since \\(B\\vec{v} = 2\\vec{v}\\), the vector \\(\\vec{v}\\) is an eigenvector and the corresponding eigenvalue is \\(\\lambda = 2\\).\n\nAnswer: \\(\\vec{v} = \\begin{pmatrix} 1 \\\\ 2 \\end{pmatrix}\\) is an eigenvector with an eigenvalue of 2.\n\n\n\n5.4 Eigenvalues of a Diagonal Matrix\nQuestion: What are the eigenvalues and eigenvectors of the diagonal matrix \\(D = \\begin{pmatrix} -5 & 0 \\\\ 0 & 4 \\end{pmatrix}\\)?\n\n\nClick to see the solution\n\nA diagonal matrix scales the basis vectors. - The first basis vector \\(\\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\) is scaled by -5. - The second basis vector \\(\\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\\) is scaled by 4.\nThe basis vectors are the eigenvectors, and the corresponding diagonal entries are the eigenvalues.\nAnswer: The eigenvalues are -5 and 4. The corresponding eigenvectors are \\(\\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\) and \\(\\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\\), respectively.\n\n\n\n5.5 Complex Eigenvalues\nQuestion: Find the eigenvalues for the rotation matrix \\(R = \\begin{pmatrix} 0 & -1 \\\\ 1 & 0 \\end{pmatrix}\\), which rotates vectors by 90 degrees counter-clockwise.\n\n\nClick to see the solution\n\n\nSet up the characteristic equation \\(\\det(R - \\lambda I) = 0\\). \\[\n\\det \\left( \\begin{pmatrix} 0 & -1 \\\\ 1 & 0 \\end{pmatrix} - \\lambda \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} \\right) = \\det \\begin{pmatrix} -\\lambda & -1 \\\\ 1 & -\\lambda \\end{pmatrix} = 0\n\\]\nCalculate the determinant. \\[\n(-\\lambda)(-\\lambda) - (-1)(1) = \\lambda^2 + 1\n\\]\nSolve for \\(\\lambda\\). \\[\n\\lambda^2 + 1 = 0 \\implies \\lambda^2 = -1\n\\] This equation has no real solutions. The solutions are the complex numbers \\(\\lambda = i\\) and \\(\\lambda = -i\\).\n\nAnswer: The matrix has no real eigenvalues, indicating no real vectors are left on their span by the rotation. The eigenvalues are the complex numbers \\(i\\) and \\(-i\\).\n\n\n\n5.6 Change to an Eigenbasis\nQuestion: Given the matrix \\(A = \\begin{pmatrix} 3 & 1 \\\\ 0 & 2 \\end{pmatrix}\\) and its eigenvectors \\(\\vec{v}_1 = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\) and \\(\\vec{v}_2 = \\begin{pmatrix} 1 \\\\ -1 \\end{pmatrix}\\), find the diagonal matrix D that represents the same transformation in the eigenbasis.\n\n\nClick to see the solution\n\nWhen we change to an eigenbasis, the new matrix is a diagonal matrix whose entries are the eigenvalues corresponding to the basis vectors. - The eigenvalue for \\(\\vec{v}_1\\) is \\(\\lambda_1 = 3\\). - The eigenvalue for \\(\\vec{v}_2\\) is \\(\\lambda_2 = 2\\).\nThe resulting diagonal matrix D will have these eigenvalues on its diagonal.\nAnswer: The diagonal matrix is \\(D = \\begin{pmatrix} 3 & 0 \\\\ 0 & 2 \\end{pmatrix}\\).\n\n\n\n5.7 Computing Matrix Powers\nQuestion: Using the concept of diagonalization, compute \\(A^3\\) for the matrix \\(A = \\begin{pmatrix} 3 & 1 \\\\ 0 & 2 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nRecall the necessary matrices from the previous examples:\n\nOriginal Matrix: \\(A = \\begin{pmatrix} 3 & 1 \\\\ 0 & 2 \\end{pmatrix}\\)\nChange of Basis Matrix (eigenvectors as columns): \\(P = \\begin{pmatrix} 1 & 1 \\\\ 0 & -1 \\end{pmatrix}\\)\nDiagonal Matrix (eigenvalues on diagonal): \\(D = \\begin{pmatrix} 3 & 0 \\\\ 0 & 2 \\end{pmatrix}\\)\n\nFind the inverse of P. For a 2x2 matrix \\(\\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}\\), the inverse is \\(\\frac{1}{ad-bc}\\begin{pmatrix} d & -b \\\\ -c & a \\end{pmatrix}\\). \\[\nP^{-1} = \\frac{1}{(1)(-1) - (1)(0)} \\begin{pmatrix} -1 & -1 \\\\ 0 & 1 \\end{pmatrix} = -1 \\begin{pmatrix} -1 & -1 \\\\ 0 & 1 \\end{pmatrix} = \\begin{pmatrix} 1 & 1 \\\\ 0 & -1 \\end{pmatrix}\n\\] (Interestingly, P is its own inverse).\nCompute \\(D^3\\). \\[\nD^3 = \\begin{pmatrix} 3^3 & 0 \\\\ 0 & 2^3 \\end{pmatrix} = \\begin{pmatrix} 27 & 0 \\\\ 0 & 8 \\end{pmatrix}\n\\]\nCompute \\(A^3 = PD^3P^{-1}\\). \\[\nA^3 = \\begin{pmatrix} 1 & 1 \\\\ 0 & -1 \\end{pmatrix} \\begin{pmatrix} 27 & 0 \\\\ 0 & 8 \\end{pmatrix} \\begin{pmatrix} 1 & 1 \\\\ 0 & -1 \\end{pmatrix}\n\\] First, multiply \\(P\\) and \\(D^3\\): \\[\n\\begin{pmatrix} 1 & 1 \\\\ 0 & -1 \\end{pmatrix} \\begin{pmatrix} 27 & 0 \\\\ 0 & 8 \\end{pmatrix} = \\begin{pmatrix} 27 & 8 \\\\ 0 & -8 \\end{pmatrix}\n\\] Then, multiply the result by \\(P^{-1}\\): \\[\n\\begin{pmatrix} 27 & 8 \\\\ 0 & -8 \\end{pmatrix} \\begin{pmatrix} 1 & 1 \\\\ 0 & -1 \\end{pmatrix} = \\begin{pmatrix} 27(1)+8(0) & 27(1)+8(-1) \\\\ 0(1)-8(0) & 0(1)-8(-1) \\end{pmatrix} = \\begin{pmatrix} 27 & 19 \\\\ 0 & 8 \\end{pmatrix}\n\\] Answer: \\(A^3 = \\begin{pmatrix} 27 & 19 \\\\ 0 & 8 \\end{pmatrix}\\).",
    "crumbs": [
      "Essence of linear algebra",
      "14. Eigenvectors and Eigenvalues"
    ]
  },
  {
    "objectID": "Essence of linear algebra/vid_8.html",
    "href": "Essence of linear algebra/vid_8.html",
    "title": "8. Non-square Matrices",
    "section": "",
    "text": "1. Summary\n\n1.1 Introduction to Non-Square Matrices\nLinear transformations are not limited to vectors within the same dimension. It’s entirely possible to have transformations that map vectors from one dimensional space to a different one. These transformations are represented by non-square matrices.\nA matrix with m rows and n columns (an m x n matrix) describes a linear transformation from an n-dimensional space to an m-dimensional space.\n\nThe number of columns (n) tells you the dimension of the input space. This is because each column specifies where one of the basis vectors of the input space lands after the transformation.\nThe number of rows (m) tells you the dimension of the output space. This is because the number of entries in each column vector determines the number of coordinates needed to describe the output vectors.\n\nFor a transformation to be considered linear, it must maintain two properties: all grid lines must remain parallel and evenly spaced, and the origin of the input space must map to the origin of the output space.\n\n\n1.2 Transformation from 2D to 3D (3x2 Matrix)\nA 3x2 matrix represents a linear transformation from a 2-dimensional space to a 3-dimensional space.\n\nTwo columns: This indicates the input space is 2D and has two basis vectors, \\(\\hat{i}\\) and \\(\\hat{j}\\).\nThree rows: This indicates that the output vectors exist in a 3D space, as each basis vector’s new position is described by three coordinates.\n\nEssentially, this transformation takes the entire 2D input plane and maps it onto a flat plane that is embedded within a 3D space. The two columns of the matrix are the 3D coordinates specifying where the original 2D basis vectors, \\(\\hat{i}\\) and \\(\\hat{j}\\), land in this new 3D output space.\nThe column space of this matrix, which is the span of its column vectors, is the resulting 2D plane in 3D space. If the dimension of this column space (2D) is equal to the dimension of the input space (2D), the matrix is said to be of full rank.\n\n\n\n1.3 Transformation from 3D to 2D (2x3 Matrix)\nA 2x3 matrix represents a linear transformation that maps a 3-dimensional space onto a 2-dimensional plane.\n\nThree columns: This indicates the input space is 3D, with three basis vectors: \\(\\hat{i}\\), \\(\\hat{j}\\), and \\(\\hat{k}\\).\nTwo rows: This indicates that the output vectors are 2D, as the landing spot for each basis vector is described by only two coordinates.\n\nThis transformation involves a “squishing” of dimensions, projecting the 3D space down into a 2D plane. Information is lost in this process, as a full dimension is collapsed.\n\n\n\n1.4 Transformation from 2D to 1D (1x2 Matrix)\nA 1x2 matrix describes a transformation from a 2D plane to a 1D space, which is simply the number line.\n\nTwo columns: The input is a 2D vector.\nOne row: The output is a 1D vector, which is a single number (a scalar).\n\nThis type of transformation takes a vector and outputs a number. The two columns of the 1x2 matrix are single numbers that tell you where the basis vectors \\(\\hat{i}\\) and \\(\\hat{j}\\) land on the number line. This concept is fundamentally linked to the dot product, which takes two vectors and produces a single scalar value.\n\n\n\n\n2. Definitions\n\nNon-Square Matrix: A matrix where the number of rows (m) is not equal to the number of columns (n).\nm x n Matrix: A matrix with m rows and n columns. It represents a linear transformation from an n-dimensional input space to an m-dimensional output space.\nInput Space: The vector space of the initial vectors before transformation. The dimension of this space is equal to the number of columns in the transformation matrix.\nOutput Space: The vector space where the results of the transformation land. The dimension of this space is equal to the number of rows in the transformation matrix.\nColumn Space: The set of all possible output vectors of a linear transformation. It is the span of the column vectors of the matrix. The dimension of the column space is the rank of the matrix.\nFull Rank: A matrix is full rank when its rank is the maximum possible for its dimensions. For an m x n matrix, the rank is min(m, n). When a transformation maps to a higher dimension (e.g., 2D to 3D), it’s considered full rank if the dimension of the column space equals the dimension of the input space.\n\n\n\n3. Formulas\n\nGeneral Linear Transformation: A vector \\(\\vec{v}\\) is transformed by matrix \\(A\\) into vector \\(A\\vec{v}\\). \\[ L(\\vec{v}) = A\\vec{v} \\]\nTransformation from 2D to 3D (3x2 Matrix): \\[ \\begin{pmatrix} a & b \\\\ c & d \\\\ e & f \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\end{pmatrix} = x \\begin{pmatrix} a \\\\ c \\\\ e \\end{pmatrix} + y \\begin{pmatrix} b \\\\ d \\\\ f \\end{pmatrix} = \\begin{pmatrix} ax+by \\\\ cx+dy \\\\ ex+fy \\end{pmatrix} \\]\nTransformation from 3D to 2D (2x3 Matrix): \\[ \\begin{pmatrix} a & b & c \\\\ d & e & f \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\\\ z \\end{pmatrix} = x \\begin{pmatrix} a \\\\ d \\end{pmatrix} + y \\begin{pmatrix} b \\\\ e \\end{pmatrix} + z \\begin{pmatrix} c \\\\ f \\end{pmatrix} = \\begin{pmatrix} ax+by+cz \\\\ dx+ey+fz \\end{pmatrix} \\]\n\n\n\n4. Mistakes\n\nConfusing input and output dimensions: The number of columns determines the input dimension, and the number of rows determines the output dimension, not the other way around. A 3x2 matrix takes a 2D vector and produces a 3D vector.\nCalculating a determinant for a non-square matrix: The determinant is a concept that relates to the scaling of area (in 2D) or volume (in 3D) and is only defined for square matrices. Asking for the determinant of a 2x3 matrix is a trick question.\nAssuming the transformation can be inverted: A transformation from a higher dimension to a lower one (e.g., 3D to 2D) loses information and cannot be uniquely reversed. Similarly, a transformation from a lower to a higher dimension (e.g., 2D to 3D) is not onto (it doesn’t fill the entire output space), so it also lacks a true inverse.\nThinking input and output vectors live in the same space: For non-square matrices, the input and output spaces are fundamentally different and unconnected. A 2D input vector is a different kind of object from a 3D output vector.\n\n\n\n5. Examples\n\n5.1 2D to 3D Transformation\nQuestion: Let a linear transformation be represented by the matrix \\(A = \\begin{pmatrix} 2 & 0 \\\\ -1 & 1 \\\\ -2 & 1 \\end{pmatrix}\\). Where does the vector \\(\\vec{v} = \\begin{pmatrix} 3 \\\\ 2 \\end{pmatrix}\\) land after the transformation?\n\n\nClick to see the solution\n\n\nMultiply the matrix by the vector: \\[ A\\vec{v} = \\begin{pmatrix} 2 & 0 \\\\ -1 & 1 \\\\ -2 & 1 \\end{pmatrix} \\begin{pmatrix} 3 \\\\ 2 \\end{pmatrix} \\]\nCalculate the new coordinates: \\[ \\begin{pmatrix} (2 \\cdot 3) + (0 \\cdot 2) \\\\ (-1 \\cdot 3) + (1 \\cdot 2) \\\\ (-2 \\cdot 3) + (1 \\cdot 2) \\end{pmatrix} = \\begin{pmatrix} 6 + 0 \\\\ -3 + 2 \\\\ -6 + 2 \\end{pmatrix} = \\begin{pmatrix} 6 \\\\ -1 \\\\ -4 \\end{pmatrix} \\]\n\nAnswer: The vector \\(\\vec{v}\\) lands on the point \\(\\begin{pmatrix} 6 \\\\ -1 \\\\ -4 \\end{pmatrix}\\) in 3D space.\n\n\n\n5.2 2D to 3D Basis Vectors\nQuestion: Using the same transformation matrix \\(A = \\begin{pmatrix} 2 & 0 \\\\ -1 & 1 \\\\ -2 & 1 \\end{pmatrix}\\), what is the column space of the transformation?\n\n\nClick to see the solution\n\n\nIdentify the landing spots of the basis vectors: The columns of the matrix tell us where the basis vectors \\(\\hat{i}\\) and \\(\\hat{j}\\) land.\n\n\\(\\hat{i}\\) lands on \\(\\begin{pmatrix} 2 \\\\ -1 \\\\ -2 \\end{pmatrix}\\).\n\\(\\hat{j}\\) lands on \\(\\begin{pmatrix} 0 \\\\ 1 \\\\ 1 \\end{pmatrix}\\).\n\nDescribe the column space: The column space is the span of these two vectors. Geometrically, it is the 2D plane that passes through the origin and is defined by these two vectors in 3D space.\n\nAnswer: The column space is the 2D plane in \\(\\mathbb{R}^3\\) spanned by the vectors \\(\\begin{pmatrix} 2 \\\\ -1 \\\\ -2 \\end{pmatrix}\\) and \\(\\begin{pmatrix} 0 \\\\ 1 \\\\ 1 \\end{pmatrix}\\).\n\n\n\n5.3 3D to 2D Transformation\nQuestion: A linear transformation is given by the matrix \\(B = \\begin{pmatrix} 3 & 1 & 4 \\\\ 1 & 5 & 9 \\end{pmatrix}\\). Transform the vector \\(\\vec{w} = \\begin{pmatrix} 1 \\\\ -2 \\\\ 1 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nMultiply the matrix by the vector: \\[ B\\vec{w} = \\begin{pmatrix} 3 & 1 & 4 \\\\ 1 & 5 & 9 \\end{pmatrix} \\begin{pmatrix} 1 \\\\ -2 \\\\ 1 \\end{pmatrix} \\]\nCalculate the new coordinates: \\[ \\begin{pmatrix} (3 \\cdot 1) + (1 \\cdot -2) + (4 \\cdot 1) \\\\ (1 \\cdot 1) + (5 \\cdot -2) + (9 \\cdot 1) \\end{pmatrix} = \\begin{pmatrix} 3 - 2 + 4 \\\\ 1 - 10 + 9 \\end{pmatrix} = \\begin{pmatrix} 5 \\\\ 0 \\end{pmatrix} \\]\n\nAnswer: The vector \\(\\vec{w}\\) is mapped to the point \\(\\begin{pmatrix} 5 \\\\ 0 \\end{pmatrix}\\) on the 2D plane.\n\n\n\n5.4 3D to 2D Basis Vectors\nQuestion: For the transformation matrix \\(B = \\begin{pmatrix} 3 & 1 & 4 \\\\ 1 & 5 & 9 \\end{pmatrix}\\), where do the 3D basis vectors \\(\\hat{i}\\), \\(\\hat{j}\\), and \\(\\hat{k}\\) land?\n\n\nClick to see the solution\n\n\nRead the columns of the matrix: Each column corresponds to the landing spot of a basis vector.\n\nThe first column is for \\(\\hat{i}\\).\nThe second column is for \\(\\hat{j}\\).\nThe third column is for \\(\\hat{k}\\).\n\n\nAnswer: - \\(\\hat{i}\\) lands on \\(\\begin{pmatrix} 3 \\\\ 1 \\end{pmatrix}\\). - \\(\\hat{j}\\) lands on \\(\\begin{pmatrix} 1 \\\\ 5 \\end{pmatrix}\\). - \\(\\hat{k}\\) lands on \\(\\begin{pmatrix} 4 \\\\ 9 \\end{pmatrix}\\).\n\n\n\n5.5 2D to 1D Transformation\nQuestion: Let a transformation from 2D to the number line be defined by the matrix \\(C = \\begin{pmatrix} 1 & 2 \\end{pmatrix}\\). What number does the vector \\(\\vec{u} = \\begin{pmatrix} 5 \\\\ -3 \\end{pmatrix}\\) map to?\n\n\nClick to see the solution\n\n\nMultiply the matrix by the vector: \\[ C\\vec{u} = \\begin{pmatrix} 1 & 2 \\end{pmatrix} \\begin{pmatrix} 5 \\\\ -3 \\end{pmatrix} \\]\nCalculate the resulting number: \\[ (1 \\cdot 5) + (2 \\cdot -3) = 5 - 6 = -1 \\]\n\nAnswer: The vector \\(\\vec{u}\\) maps to the number -1 on the number line.\n\n\n\n5.6 Constructing a 3x2 Matrix\nQuestion: A linear transformation from \\(\\mathbb{R}^2\\) to \\(\\mathbb{R}^3\\) maps \\(\\hat{i}\\) to \\(\\begin{pmatrix} 1 \\\\ 0 \\\\ 1 \\end{pmatrix}\\) and \\(\\hat{j}\\) to \\(\\begin{pmatrix} -1 \\\\ 2 \\\\ 3 \\end{pmatrix}\\). What is the matrix of this transformation?\n\n\nClick to see the solution\n\n\nRecall the rule: The columns of the transformation matrix are the coordinates of where the basis vectors land.\nConstruct the matrix: The first column is the transformed \\(\\hat{i}\\), and the second column is the transformed \\(\\hat{j}\\).\n\nAnswer: The transformation matrix is \\(\\begin{pmatrix} 1 & -1 \\\\ 0 & 2 \\\\ 1 & 3 \\end{pmatrix}\\).\n\n\n\n5.7 Constructing a 2x3 Matrix\nQuestion: A linear transformation from \\(\\mathbb{R}^3\\) to \\(\\mathbb{R}^2\\) maps \\(\\hat{i}\\) to \\(\\begin{pmatrix} 2 \\\\ 1 \\end{pmatrix}\\), \\(\\hat{j}\\) to \\(\\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\\), and \\(\\hat{k}\\) to \\(\\begin{pmatrix} -1 \\\\ -1 \\end{pmatrix}\\). What is the matrix of this transformation?\n\n\nClick to see the solution\n\n\nRecall the rule: The columns of the transformation matrix are the landing spots of the basis vectors.\nAssemble the matrix: The three columns will be the transformed versions of \\(\\hat{i}\\), \\(\\hat{j}\\), and \\(\\hat{k}\\).\n\nAnswer: The transformation matrix is \\(\\begin{pmatrix} 2 & 0 & -1 \\\\ 1 & 1 & -1 \\end{pmatrix}\\).",
    "crumbs": [
      "Essence of linear algebra",
      "8. Non-square Matrices"
    ]
  },
  {
    "objectID": "Essence of calculus/vid_5.html",
    "href": "Essence of calculus/vid_5.html",
    "title": "5. Derivatives of Exponential Functions, The number e",
    "section": "",
    "text": "1. Summary\n\n1.1 Introduction to Exponential Derivatives\nThe exploration of calculus often leads to moments of amazement. As mathematician Francois le Lionnais noted, “Who has not been amazed to learn that the function \\(y = e^x\\), like a phoenix rising again from its own ashes, is its own derivative?” This unique property makes the exponential function with base e fundamental in calculus.\nThis section focuses on understanding the derivatives of exponential functions, such as \\(f(x) = 2^x\\) or \\(f(x) = 7^x\\). The primary goal is to discover why the number e is so special and why \\(e^x\\) is considered the most important exponential function.\n\n\n1.2 An Intuitive Approach: Population Growth\nTo build intuition, let’s consider a function \\(M(t) = 2^t\\), which represents the mass of a population of creatures that doubles every day.\n\nAt \\(t=0\\), the mass is \\(2^0 = 1\\).\nAt \\(t=1\\), the mass is \\(2^1 = 2\\).\nAt \\(t=2\\), the mass is \\(2^2 = 4\\).\nAt \\(t=3\\), the mass is \\(2^3 = 8\\).\n\nThe derivative, \\(dM/dt\\), represents the instantaneous rate of growth of this mass. If we approximate this rate over a full day, for instance from day 3 to day 4, the mass increases from 8 to 16. The rate of change is \\((16 - 8) / (1 \\text{ day}) = 8\\) units of mass per day. Notice that this rate of growth (8) is equal to the population mass at the start of the day (\\(2^3 = 8\\)).\nThis observation might tempt us to conclude that the derivative of \\(2^t\\) is simply \\(2^t\\). However, this is just an approximation over a large time interval. Calculus requires us to analyze this for infinitesimally small intervals of time.\n\n\n1.3 Formalizing the Derivative of Exponential Functions\nThe derivative of an exponential function \\(a^t\\) is defined by the limit: \\[ \\frac{d(a^t)}{dt} = \\lim_{dt \\to 0} \\frac{a^{t+dt} - a^t}{dt} \\]\nUsing the property of exponents, we can rewrite \\(a^{t+dt}\\) as \\(a^t \\cdot a^{dt}\\). \\[ \\frac{d(a^t)}{dt} = \\lim_{dt \\to 0} \\frac{a^t a^{dt} - a^t}{dt} \\] Factoring out \\(a^t\\) from the numerator gives: \\[ \\frac{d(a^t)}{dt} = a^t \\cdot \\left( \\lim_{dt \\to 0} \\frac{a^{dt} - 1}{dt} \\right) \\]\nThis reveals a crucial property: the derivative of an exponential function is proportional to the function itself. The term in the parentheses is a constant that depends only on the base a, not on the variable t.\n\n\n1.4 The Proportionality Constant and The Natural Logarithm\nThe constant of proportionality is the value that \\(\\frac{a^{dt} - 1}{dt}\\) approaches as \\(dt\\) gets closer to zero. By testing different bases a, we find:\n\nFor \\(a=2\\), the constant is approximately \\(0.6931...\\)\nFor \\(a=3\\), the constant is approximately \\(1.0986...\\)\nFor \\(a=8\\), the constant is approximately \\(2.0794...\\)\n\nThis mysterious constant is the natural logarithm of the base, denoted as \\(\\ln(a)\\). Therefore, the general rule for the derivative of an exponential function is: \\[ \\frac{d}{dt}a^t = a^t \\cdot \\ln(a) \\]\n\n\n\n1.5 The Special Number \\(e\\)\nA natural question arises: Is there a base a for which the proportionality constant, \\(\\ln(a)\\), is exactly 1? The answer is yes, and this unique base is the number e.\nThe number e (approximately 2.71828…) is formally defined as the base for which the derivative of the function \\(e^t\\) is simply \\(e^t\\). \\[ \\frac{d}{dt}e^t = e^t \\] This property makes e the most “natural” base for calculus because it simplifies derivative calculations significantly.\n\n\n1.6 The Chain Rule and Changing Bases\nThe power of using base e becomes even more apparent with the chain rule. The derivative of a function like \\(e^{ct}\\) is: \\[ \\frac{d}{dt}(e^{ct}) = e^{ct} \\cdot \\frac{d}{dt}(ct) = c \\cdot e^{ct} \\] Any exponential function \\(a^t\\) can be rewritten using base e because \\(a = e^{\\ln(a)}\\). \\[ a^t = (e^{\\ln(a)})^t = e^{(\\ln a)t} \\] Applying the chain rule to this form confirms our general derivative rule: \\[ \\frac{d}{dt}(e^{(\\ln a)t}) = e^{(\\ln a)t} \\cdot \\ln(a) = a^t \\cdot \\ln(a) \\]\n\n\n\n2. Definitions\n\nExponential Function: A function in the form \\(f(x) = a^x\\), where ‘a’ is a positive constant (the base) and the variable ‘x’ is the exponent.\nDerivative: Represents the instantaneous rate of change of a function. For a function \\(f(x)\\), its derivative \\(f'(x)\\) gives the slope of the tangent line to the graph of \\(f(x)\\) at any point \\(x\\).\nThe number e (Euler’s Number): A special mathematical constant approximately equal to 2.71828. It is the unique base for which the derivative of the exponential function \\(e^x\\) is itself, \\(e^x\\).\nNatural Logarithm (ln): The logarithm with base e. The natural logarithm of a number \\(x\\), written as \\(\\ln(x)\\), is the power to which e must be raised to equal \\(x\\). It is the inverse of the function \\(e^x\\).\n\n\n\n3. Formulas\n\nGeneral Derivative of an Exponential Function: \\(\\frac{d}{dx}a^x = a^x \\ln(a)\\)\nDerivative of the Natural Exponential Function: \\(\\frac{d}{dx}e^x = e^x\\)\nChain Rule for Exponential Functions: \\(\\frac{d}{dx}e^{u(x)} = e^{u(x)} \\cdot u'(x)\\)\nGeneral Chain Rule for Exponentials: \\(\\frac{d}{dx}a^{u(x)} = a^{u(x)} \\ln(a) \\cdot u'(x)\\)\nChanging Base Formula: \\(a^x = e^{x \\ln(a)}\\)\n\n\n\n4. Mistakes\n\nConfusing the Power Rule with the Exponential Rule: A common mistake is to apply the power rule to \\(d/dx(a^x)\\) and incorrectly get \\(x \\cdot a^{x-1}\\). Why it’s wrong: The power rule, \\(d/dx(x^n) = nx^{n-1}\\), applies when the base is a variable and the exponent is a constant. The exponential rule applies when the base is a constant and the exponent is a variable.\nForgetting the \\(\\ln(a)\\) Factor: Assuming the derivative of any exponential function \\(a^x\\) is just \\(a^x\\). Why it’s wrong: This is only true for the specific base e. For any other base a, you must multiply by the natural logarithm of that base, \\(\\ln(a)\\).\nIgnoring the Chain Rule: When differentiating a composite function like \\(e^{2x}\\), stating the derivative is \\(e^{2x}\\) instead of \\(2e^{2x}\\). Why it’s wrong: The chain rule requires you to also multiply by the derivative of the inner function (in this case, \\(2x\\)), which is 2.\nIncorrectly Applying the Chain Rule: For a function like \\(5^{x^2}\\), incorrectly calculating the derivative as \\(x^2 \\ln(5) \\cdot 5^{x^2-1}\\). Why it’s wrong: This mixes up the power rule and the exponential rule. The correct derivative is \\(5^{x^2} \\ln(5) \\cdot (2x)\\).\n\n\n\n5. Examples\n\n5.1 Basic Exponential Derivative\nQuestion: Find the derivative of \\(f(x) = 7^x\\).\n\n\nClick to see the solution\n\n\nIdentify the rule: The function is in the form \\(a^x\\), so we use the rule \\(\\frac{d}{dx}a^x = a^x \\ln(a)\\).\nApply the rule: Here, \\(a=7\\). \\[ f'(x) = 7^x \\ln(7) \\]\n\nAnswer: The derivative is \\(7^x \\ln(7)\\).\n\n\n\n5.2 Derivative of the Natural Exponential\nQuestion: What is the derivative of \\(g(t) = e^t\\)?\n\n\nClick to see the solution\n\n\nIdentify the rule: This is the special case where the base is e. The rule is \\(\\frac{d}{dt}e^t = e^t\\).\nApply the rule: \\[ g'(t) = e^t \\]\n\nAnswer: The derivative is \\(e^t\\).\n\n\n\n5.3 Exponential with a Constant Multiplier\nQuestion: Differentiate \\(y = 5 \\cdot 3^x\\).\n\n\nClick to see the solution\n\n\nUse the constant multiple rule: The constant 5 can be factored out of the differentiation process. \\[ \\frac{dy}{dx} = 5 \\cdot \\frac{d}{dx}(3^x) \\]\nDifferentiate the exponential part: Use the rule \\(\\frac{d}{dx}a^x = a^x \\ln(a)\\) with \\(a=3\\). \\[ \\frac{d}{dx}(3^x) = 3^x \\ln(3) \\]\nCombine the results: \\[ \\frac{dy}{dx} = 5 \\cdot 3^x \\ln(3) \\]\n\nAnswer: The derivative is \\(5 \\cdot 3^x \\ln(3)\\).\n\n\n\n5.4 Chain Rule with Base e\nQuestion: Find the derivative of \\(h(x) = e^{5x}\\).\n\n\nClick to see the solution\n\n\nIdentify the inner and outer functions: The outer function is \\(e^u\\) and the inner function is \\(u = 5x\\).\nApply the chain rule: The derivative is (derivative of outer function) \\(\\times\\) (derivative of inner function).\n\nDerivative of \\(e^u\\) is \\(e^u\\), which is \\(e^{5x}\\).\nDerivative of \\(5x\\) is \\(5\\).\n\nMultiply them together: \\[ h'(x) = e^{5x} \\cdot 5 = 5e^{5x} \\]\n\nAnswer: The derivative is \\(5e^{5x}\\).\n\n\n\n5.5 Chain Rule with a General Base\nQuestion: Find the derivative of \\(f(t) = 10^{t^2}\\).\n\n\nClick to see the solution\n\n\nIdentify the rule and functions: This requires the general exponential rule and the chain rule. The outer function is \\(10^u\\) and the inner function is \\(u = t^2\\).\nApply the rules: The derivative is (derivative of outer) \\(\\times\\) (derivative of inner).\n\nDerivative of \\(10^u\\) is \\(10^u \\ln(10)\\), which is \\(10^{t^2} \\ln(10)\\).\nDerivative of \\(t^2\\) is \\(2t\\).\n\nMultiply the results: \\[ f'(t) = 10^{t^2} \\ln(10) \\cdot (2t) \\]\n\nAnswer: The derivative is \\(2t \\cdot 10^{t^2} \\ln(10)\\).\n\n\n\n5.6 Finding the Slope of a Tangent Line\nQuestion: What is the slope of the tangent line to the curve \\(y = e^x\\) at the point \\((1, e)\\)?\n\n\nClick to see the solution\n\n\nFind the derivative: The derivative of \\(e^x\\) gives the slope at any point \\(x\\). \\[ \\frac{dy}{dx} = e^x \\]\nEvaluate the derivative at the given x-value: We need the slope at \\(x=1\\). \\[ \\text{Slope} = e^1 = e \\]\n\nAnswer: The slope of the tangent line at \\((1, e)\\) is e.\n\n\n\n5.7 Application Problem\nQuestion: A bacterial culture starts with 100 bacteria and doubles every hour. The population can be modeled by the function \\(P(t) = 100 \\cdot 2^t\\), where \\(t\\) is in hours. At what rate is the population growing at \\(t=3\\) hours?\n\n\nClick to see the solution\n\n\nFind the derivative of the population function: We need to find \\(P'(t)\\). \\[ P'(t) = \\frac{d}{dt}(100 \\cdot 2^t) = 100 \\cdot \\frac{d}{dt}(2^t) \\] \\[ P'(t) = 100 \\cdot (2^t \\ln(2)) \\]\nEvaluate the derivative at \\(t=3\\): \\[ P'(3) = 100 \\cdot (2^3 \\ln(2)) \\] \\[ P'(3) = 100 \\cdot (8 \\ln(2)) = 800 \\ln(2) \\]\nCalculate the approximate value: \\(\\ln(2) \\approx 0.693\\). \\[ P'(3) \\approx 800 \\cdot 0.693 \\approx 554.4 \\]\n\nAnswer: After 3 hours, the population is growing at a rate of approximately 554 bacteria per hour.",
    "crumbs": [
      "Essence of calculus",
      "5. Derivatives of Exponential Functions, The number e"
    ]
  },
  {
    "objectID": "Essence of calculus/vid_11.html",
    "href": "Essence of calculus/vid_11.html",
    "title": "11. Taylor Series, Polynomial Approximations, Calculus",
    "section": "",
    "text": "1. Summary\n\n1.1 Introduction to Taylor Series\nThe Taylor series is a fundamental concept in calculus that allows us to represent a function as an infinite sum of terms. These terms are calculated from the values of the function’s derivatives at a single point. This method is incredibly powerful for approximating complex, non-polynomial functions with simpler polynomial functions, especially near a specific point. This is useful because polynomials are much easier to work with—they are easy to compute, differentiate, and integrate. This makes Taylor series an essential tool in mathematics, physics, and engineering.\nThe core idea is that if you know a lot about a function at one single point (its value, its rate of change, the rate of change of its rate of change, and so on), you can use that information to construct a polynomial that “hugs” the original function’s graph near that point. The more derivatives you use, the better the approximation becomes.\n\n\n1.2 The Intuition: An Example with a Pendulum\nA great way to understand the practical power of this approximation is through a physics problem, like calculating the potential energy of a pendulum.\n\n1.2.1 The Problem with the Original Function\nThe height of a pendulum bob of length \\(R\\) at an angle \\(\\theta\\) from the vertical is given by the expression \\(R(1 - \\cos(\\theta))\\). While accurate, the \\(\\cos(\\theta)\\) term can make calculations in physics (like solving differential equations of motion) awkward and complicated.\n\n\n1.2.2 The Small-Angle Approximation\nFor small angles \\(\\theta\\) (close to 0), physicists often use the approximation: \\[ \\cos(\\theta) \\approx 1 - \\frac{\\theta^2}{2} \\] This is actually the second-order Taylor polynomial for \\(\\cos(\\theta)\\) around \\(\\theta = 0\\).\nSubstituting this approximation into the potential energy formula simplifies it significantly: \\[ R(1 - \\cos(\\theta)) \\approx R(1 - (1 - \\frac{\\theta^2}{2})) = R(\\frac{\\theta^2}{2}) \\] This simplified quadratic expression is much easier to work with and provides a very accurate approximation for small oscillations, revealing a deeper connection to other oscillating systems like a mass on a spring.\n\n\n\n\n1.3 Building a Polynomial Approximation for cos(x)\nLet’s build this quadratic approximation for \\(f(x) = \\cos(x)\\) around the point \\(x=0\\). Our goal is to find a polynomial \\(P(x) = c_0 + c_1x + c_2x^2\\) that best matches \\(\\cos(x)\\) near this point. We do this by matching the derivatives of \\(P(x)\\) and \\(\\cos(x)\\) at \\(x=0\\).\n\nMatch the value (0th derivative): We want the polynomial’s value to match the function’s value at \\(x=0\\).\n\n\\(f(0) = \\cos(0) = 1\\)\n\\(P(0) = c_0 + c_1(0) + c_2(0)^2 = c_0\\)\nTherefore, we set \\(c_0 = 1\\).\n\nMatch the first derivative: We want the slope of the polynomial to match the slope of the function at \\(x=0\\).\n\n\\(f'(x) = -\\sin(x)\\), so \\(f'(0) = -\\sin(0) = 0\\).\n\\(P'(x) = c_1 + 2c_2x\\), so \\(P'(0) = c_1\\).\nTherefore, we set \\(c_1 = 0\\).\n\nMatch the second derivative: We want the concavity (how the slope is changing) to match at \\(x=0\\).\n\n\\(f''(x) = -\\cos(x)\\), so \\(f''(0) = -\\cos(0) = -1\\).\n\\(P''(x) = 2c_2\\).\nTherefore, we set \\(2c_2 = -1\\), which gives \\(c_2 = -\\frac{1}{2}\\).\n\n\nCombining these coefficients, we get our approximation: \\[ P(x) = 1 + 0x - \\frac{1}{2}x^2 = 1 - \\frac{1}{2}x^2 \\] This is precisely the small-angle approximation we saw earlier.\n\n\n\n1.4 The General Taylor Series Formula\nWe can generalize this process for any function \\(f(x)\\) that is infinitely differentiable at a point \\(a\\). We want to find a polynomial \\(P(x) = c_0 + c_1(x-a) + c_2(x-a)^2 + \\dots\\) that matches all derivatives of \\(f(x)\\) at \\(x=a\\).\nBy taking successive derivatives of the polynomial and evaluating them at \\(x=a\\), we find a pattern for the coefficients: - \\(P(a) = c_0 \\implies c_0 = f(a)\\) - \\(P'(a) = c_1 \\implies c_1 = f'(a)\\) - \\(P''(a) = 2c_2 \\implies c_2 = \\frac{f''(a)}{2}\\) - \\(P'''(a) = 3 \\cdot 2 \\cdot c_3 = 6c_3 \\implies c_3 = \\frac{f'''(a)}{6}\\)\nIn general, the nth coefficient is given by: \\[ c_n = \\frac{f^{(n)}(a)}{n!} \\] where \\(f^{(n)}(a)\\) is the nth derivative of \\(f\\) evaluated at \\(a\\), and \\(n!\\) is the factorial of \\(n\\).\nThis gives the formula for the Taylor series of a function \\(f(x)\\) about a point \\(a\\): \\[ f(x) = \\sum_{n=0}^{\\infty} \\frac{f^{(n)}(a)}{n!} (x-a)^n = f(a) + f'(a)(x-a) + \\frac{f''(a)}{2!}(x-a)^2 + \\dots \\] When the series is centered at \\(a=0\\), it is called a Maclaurin series.\n\n\n1.5 Convergence and Radius of Convergence\nAn infinite series does not always produce a finite, meaningful number. For a Taylor series to be useful, it must converge.\n\nConvergence: A series converges if the sequence of its partial sums (adding more and more terms) approaches a specific finite limit.\nDivergence: If the partial sums do not approach a limit, the series diverges.\n\nThe radius of convergence is the distance from the center point \\(a\\) within which the Taylor series is guaranteed to converge to the actual function value. - For functions like \\(e^x\\), \\(\\sin(x)\\), and \\(\\cos(x)\\), the radius of convergence is infinite; their Taylor series match the function for all real numbers \\(x\\). - For other functions, like \\(\\ln(x)\\) centered at \\(a=1\\), the radius is finite. The series for \\(\\ln(x)\\) only converges for \\(x\\) in the interval \\((0, 2]\\). Outside this range, the polynomial approximations diverge wildly from the actual function.\n\n\n\n2. Definitions\n\nTaylor Series: An expansion of a function into an infinite sum of terms, where each term is calculated from the function’s derivatives at a single point (the center). It represents the function in a neighborhood around that point.\nTaylor Polynomial: A finite sum of the initial terms of a Taylor series. An nth-degree Taylor polynomial is a polynomial of degree \\(n\\) that provides an approximation of the function near the center point.\nMaclaurin Series: A special case of the Taylor series where the expansion is centered around the point \\(a=0\\).\nApproximation: The process of using a simpler function, such as a polynomial, to estimate the values of a more complex function within a certain range.\nConvergence: The property of an infinite series where its partial sums approach a finite limit as the number of terms increases.\nRadius of Convergence: For a Taylor series centered at \\(a\\), it is the value \\(R\\) such that the series converges for all \\(x\\) where \\(|x-a| &lt; R\\) and diverges for all \\(x\\) where \\(|x-a| &gt; R\\).\n\n\n\n3. Formulas\n\nGeneral Taylor Series about \\(x=a\\): \\[ f(x) = \\sum_{n=0}^{\\infty} \\frac{f^{(n)}(a)}{n!}(x-a)^n = f(a) + \\frac{f'(a)}{1!}(x-a) + \\frac{f''(a)}{2!}(x-a)^2 + \\frac{f'''(a)}{3!}(x-a)^3 + \\dots \\]\nMaclaurin Series (Taylor Series about \\(x=0\\)): \\[ f(x) = \\sum_{n=0}^{\\infty} \\frac{f^{(n)}(0)}{n!}x^n = f(0) + \\frac{f'(0)}{1!}x + \\frac{f''(0)}{2!}x^2 + \\frac{f'''(0)}{3!}x^3 + \\dots \\]\nTaylor Series for \\(e^x\\) at \\(a=0\\): \\[ e^x = \\sum_{n=0}^{\\infty} \\frac{x^n}{n!} = 1 + x + \\frac{x^2}{2!} + \\frac{x^3}{3!} + \\dots \\]\nTaylor Series for \\(\\cos(x)\\) at \\(a=0\\): \\[ \\cos(x) = \\sum_{n=0}^{\\infty} \\frac{(-1)^n}{(2n)!}x^{2n} = 1 - \\frac{x^2}{2!} + \\frac{x^4}{4!} - \\frac{x^6}{6!} + \\dots \\]\nTaylor Series for \\(\\sin(x)\\) at \\(a=0\\): \\[ \\sin(x) = \\sum_{n=0}^{\\infty} \\frac{(-1)^n}{(2n+1)!}x^{2n+1} = x - \\frac{x^3}{3!} + \\frac{x^5}{5!} - \\frac{x^7}{7!} + \\dots \\]\n\n\n\n4. Mistakes\n\nForgetting the factorial (\\(n!\\)): A very common mistake is to omit the \\(n!\\) in the denominator of the terms. Why it’s wrong: The factorial term arises from repeatedly differentiating the power \\((x-a)^n\\) and is essential for the polynomial’s derivatives to match the function’s derivatives.\nUsing the wrong center point: Evaluating the derivatives at a point other than the center \\(a\\) of the expansion. Why it’s wrong: The entire theory is based on using local information at the point \\(a\\) to build the approximation. Using derivatives from another point will result in an incorrect polynomial.\nAssuming a series always converges: Believing that a Taylor series for a function will approximate it for any value of \\(x\\). Why it’s wrong: Many Taylor series only converge within a specific radius of convergence. Outside this radius, the series diverges and is useless for approximation.\nIncorrectly calculating higher-order derivatives: Making an error in finding the derivatives of the function \\(f(x)\\). Why it’s wrong: The coefficients of the series depend directly on these derivatives, so any mistake will lead to an incorrect series.\n\n\n\n5. Examples\n\n5.1. Finding the Taylor Series for \\(e^{2x}\\)\nQuestion: Find the first four non-zero terms of the Maclaurin series (centered at \\(a=0\\)) for the function \\(f(x) = e^{2x}\\).\n\n\nClick to see the solution\n\n\nCalculate the first few derivatives of \\(f(x)\\):\n\n\\(f(x) = e^{2x}\\)\n\\(f'(x) = 2e^{2x}\\)\n\\(f''(x) = 4e^{2x}\\)\n\\(f'''(x) = 8e^{2x}\\)\n\nEvaluate these derivatives at the center \\(a=0\\):\n\n\\(f(0) = e^0 = 1\\)\n\\(f'(0) = 2e^0 = 2\\)\n\\(f''(0) = 4e^0 = 4\\)\n\\(f'''(0) = 8e^0 = 8\\)\n\nUse the Maclaurin series formula to construct the polynomial: \\[ P(x) = f(0) + \\frac{f'(0)}{1!}x + \\frac{f''(0)}{2!}x^2 + \\frac{f'''(0)}{3!}x^3 + \\dots \\]\nSubstitute the values: \\[ P(x) = 1 + \\frac{2}{1}x + \\frac{4}{2}x^2 + \\frac{8}{6}x^3 + \\dots = 1 + 2x + 2x^2 + \\frac{4}{3}x^3 + \\dots \\]\n\nAnswer: The first four terms are \\(1 + 2x + 2x^2 + \\frac{4}{3}x^3\\).\n\n\n\n5.2. Approximating \\(\\sqrt{x}\\) near \\(x=9\\)\nQuestion: Find the second-degree Taylor polynomial for \\(f(x) = \\sqrt{x}\\) centered at \\(a=9\\).\n\n\nClick to see the solution\n\n\nCalculate the required derivatives:\n\n\\(f(x) = x^{1/2}\\)\n\\(f'(x) = \\frac{1}{2}x^{-1/2}\\)\n\\(f''(x) = -\\frac{1}{4}x^{-3/2}\\)\n\nEvaluate the derivatives at the center \\(a=9\\):\n\n\\(f(9) = \\sqrt{9} = 3\\)\n\\(f'(9) = \\frac{1}{2}(9)^{-1/2} = \\frac{1}{2 \\cdot 3} = \\frac{1}{6}\\)\n\\(f''(9) = -\\frac{1}{4}(9)^{-3/2} = -\\frac{1}{4 \\cdot 27} = -\\frac{1}{108}\\)\n\nConstruct the second-degree Taylor polynomial: \\[ P_2(x) = f(9) + \\frac{f'(9)}{1!}(x-9) + \\frac{f''(9)}{2!}(x-9)^2 \\]\nSubstitute the values: \\[ P_2(x) = 3 + \\frac{1/6}{1}(x-9) + \\frac{-1/108}{2}(x-9)^2 = 3 + \\frac{1}{6}(x-9) - \\frac{1}{216}(x-9)^2 \\]\n\nAnswer: The second-degree Taylor polynomial is \\(P_2(x) = 3 + \\frac{1}{6}(x-9) - \\frac{1}{216}(x-9)^2\\).\n\n\n\n5.3. Full Taylor Series for \\(\\sin(x)\\)\nQuestion: Find the Maclaurin series for \\(f(x) = \\sin(x)\\).\n\n\nClick to see the solution\n\n\nFind the derivatives and evaluate at \\(a=0\\):\n\n\\(f(x) = \\sin(x) \\implies f(0) = 0\\)\n\\(f'(x) = \\cos(x) \\implies f'(0) = 1\\)\n\\(f''(x) = -\\sin(x) \\implies f''(0) = 0\\)\n\\(f'''(x) = -\\cos(x) \\implies f'''(0) = -1\\)\n\\(f^{(4)}(x) = \\sin(x) \\implies f^{(4)}(0) = 0\\) The pattern of derivative values at 0 is \\(0, 1, 0, -1, 0, \\dots\\)\n\nPlug into the Maclaurin formula: \\[ \\sin(x) = \\frac{0}{0!} + \\frac{1}{1!}x + \\frac{0}{2!}x^2 + \\frac{-1}{3!}x^3 + \\frac{0}{4!}x^4 + \\frac{1}{5!}x^5 + \\dots \\]\nSimplify the series: \\[ \\sin(x) = x - \\frac{x^3}{3!} + \\frac{x^5}{5!} - \\frac{x^7}{7!} + \\dots \\]\n\nAnswer: The Maclaurin series for \\(\\sin(x)\\) is \\(\\sum_{n=0}^{\\infty} \\frac{(-1)^n}{(2n+1)!}x^{2n+1}\\).\n\n\n\n5.4. Approximation of \\(\\cos(0.1)\\)\nQuestion: Use the second-order Taylor polynomial for \\(\\cos(x)\\) at \\(x=0\\) to approximate \\(\\cos(0.1)\\).\n\n\nClick to see the solution\n\n\nRecall the second-order Taylor polynomial for \\(\\cos(x)\\) at \\(x=0\\): From section 1.3, we know \\(P_2(x) = 1 - \\frac{x^2}{2}\\).\nSubstitute \\(x=0.1\\) into the polynomial: \\[ \\cos(0.1) \\approx P_2(0.1) = 1 - \\frac{(0.1)^2}{2} \\]\nCalculate the result: \\[ 1 - \\frac{0.01}{2} = 1 - 0.005 = 0.995 \\] (The actual value is approximately \\(0.995004165...\\), so this is a very good approximation).\n\nAnswer: The approximation for \\(\\cos(0.1)\\) is \\(0.995\\).\n\n\n\n5.5. Taylor Polynomial for \\(\\ln(1+x)\\)\nQuestion: Find the third-order Taylor polynomial for \\(f(x) = \\ln(1+x)\\) centered at \\(a=0\\).\n\n\nClick to see the solution\n\n\nCalculate derivatives and evaluate at \\(a=0\\):\n\n\\(f(x) = \\ln(1+x) \\implies f(0) = \\ln(1) = 0\\)\n\\(f'(x) = (1+x)^{-1} \\implies f'(0) = 1\\)\n\\(f''(x) = -(1+x)^{-2} \\implies f''(0) = -1\\)\n\\(f'''(x) = 2(1+x)^{-3} \\implies f'''(0) = 2\\)\n\nConstruct the third-order polynomial: \\[ P_3(x) = f(0) + \\frac{f'(0)}{1!}x + \\frac{f''(0)}{2!}x^2 + \\frac{f'''(0)}{3!}x^3 \\]\nSubstitute the values: \\[ P_3(x) = 0 + \\frac{1}{1}x + \\frac{-1}{2}x^2 + \\frac{2}{6}x^3 = x - \\frac{1}{2}x^2 + \\frac{1}{3}x^3 \\]\n\nAnswer: The third-order Taylor polynomial is \\(P_3(x) = x - \\frac{1}{2}x^2 + \\frac{1}{3}x^3\\).\n\n\n\n5.6. Finding a Specific Coefficient\nQuestion: Determine the coefficient of the \\(x^5\\) term in the Maclaurin series for \\(f(x) = \\frac{x}{1-x^2}\\).\n\n\nClick to see the solution\n\n\nRecall the geometric series formula: \\(\\frac{1}{1-r} = 1 + r + r^2 + r^3 + \\dots\\)\nSubstitute \\(r=x^2\\): \\[ \\frac{1}{1-x^2} = 1 + (x^2) + (x^2)^2 + (x^2)^3 + \\dots = 1 + x^2 + x^4 + x^6 + \\dots \\]\nMultiply the entire series by \\(x\\) to get \\(f(x)\\): \\[ f(x) = x \\left( \\frac{1}{1-x^2} \\right) = x(1 + x^2 + x^4 + x^6 + \\dots) = x + x^3 + x^5 + x^7 + \\dots \\]\nIdentify the coefficient of the \\(x^5\\) term. The term is \\(x^5\\), so its coefficient is 1.\n\nAnswer: The coefficient is 1.\n\n\n\n5.7. Using a Known Series\nQuestion: Find the Maclaurin series for \\(f(x) = x^2 \\cos(x)\\).\n\n\nClick to see the solution\n\n\nStart with the known Maclaurin series for \\(\\cos(x)\\): \\[ \\cos(x) = 1 - \\frac{x^2}{2!} + \\frac{x^4}{4!} - \\frac{x^6}{6!} + \\dots \\]\nMultiply each term in the series by \\(x^2\\): \\[ f(x) = x^2 \\left( 1 - \\frac{x^2}{2!} + \\frac{x^4}{4!} - \\frac{x^6}{6!} + \\dots \\right) \\]\nDistribute the \\(x^2\\): \\[ f(x) = x^2 - \\frac{x^4}{2!} + \\frac{x^6}{4!} - \\frac{x^8}{6!} + \\dots \\]\n\nAnswer: The Maclaurin series for \\(x^2 \\cos(x)\\) is \\(\\sum_{n=0}^{\\infty} \\frac{(-1)^n}{(2n)!}x^{2n+2}\\).",
    "crumbs": [
      "Essence of calculus",
      "11. Taylor Series, Polynomial Approximations, Calculus"
    ]
  },
  {
    "objectID": "Essence of calculus/vid_7.html",
    "href": "Essence of calculus/vid_7.html",
    "title": "7. Limits, Derivatives, L’Hôpital’s Rule",
    "section": "",
    "text": "1. Summary\n\n1.1 The Concept of a Limit\n\n1.1.1 Intuitive Understanding\nThe concept of a limit in calculus formalizes the idea of a value being “approached.” If you understand what it means for one value to get closer and closer to another, you already have the fundamental intuition behind limits. For example, when finding a derivative, we consider what happens to the ratio \\(\\frac{\\Delta f}{\\Delta x}\\) as the change in input, \\(\\Delta x\\), gets arbitrarily close to zero. The limit is the value that this ratio approaches.\n\n\n1.1.2 Formal Notation\nThe formal notation for a limit is written as \\(\\lim_{x \\to a} f(x) = L\\), which is read as “the limit of \\(f(x)\\) as \\(x\\) approaches \\(a\\) is \\(L\\).” This means that as the input \\(x\\) gets closer and closer to the value \\(a\\), the output of the function \\(f(x)\\) gets closer and closer to the value \\(L\\).\n\n\n\n1.2 The Formal Definition of a Derivative\n\n1.2.1 Connecting Intuition to Formalism\nThe intuitive idea of a derivative involves a tiny nudge to an input, \\(dx\\), causing a corresponding tiny change in the output, \\(df\\). The derivative is then the ratio \\(\\frac{df}{dx}\\). However, to make this rigorous, we use limits.\nThe formal definition of the derivative of a function \\(f(x)\\) at a point, say \\(x=2\\), is expressed using a limit. Instead of an infinitesimally small \\(dx\\), we use a variable, commonly denoted as \\(h\\), which represents a concrete, non-zero nudge. \nThe change in the function’s output is \\(f(2+h) - f(2)\\). The ratio of the change in output to the change in input is: \\[ \\frac{f(2+h) - f(2)}{h} \\] The derivative is what this ratio approaches as h gets arbitrarily close to zero. This is written formally as: \\[ f'(2) = \\lim_{h \\to 0} \\frac{f(2+h) - f(2)}{h} \\] This limit-based definition avoids the logical paradoxes of working with “infinitely small” quantities while preserving the core concept. The notation \\(\\frac{df}{dx}\\) is essentially shorthand for this entire limit expression.\n\n\n\n1.3 The Epsilon-Delta (ε, δ) Definition of Limits\n\n1.3.1 Rigorous Definition of “Approach”\nTo make the idea of “approaching” mathematically airtight, mathematicians developed the epsilon-delta (ε, δ) definition. It precisely defines what it means for a limit to exist.\nA limit \\(\\lim_{x \\to a} f(x) = L\\) exists if, for any small positive distance epsilon (\\(\\epsilon\\)) you choose, you can find a corresponding small positive distance delta (\\(\\delta\\)) such that if an input \\(x\\) is within \\(\\delta\\) of \\(a\\) (but not equal to \\(a\\)), then the output \\(f(x)\\) is guaranteed to be within \\(\\epsilon\\) of \\(L\\).\nEssentially, you challenge the limit by picking an arbitrarily small “tolerance” (\\(\\epsilon\\)) around the proposed limit \\(L\\). If the limit holds, you must be able to find an input range (\\(\\delta\\)) around \\(a\\) that ensures all outputs fall within that tolerance. \n\n\n1.3.2 Discontinuous Functions\nThis definition is powerful because it also clarifies when a limit does not exist. For a function with a jump discontinuity at \\(x=a\\), you can pick an \\(\\epsilon\\) that is smaller than the size of the jump. No matter how small you make the input range \\(\\delta\\) around \\(a\\), the corresponding output values will always span a range larger than your chosen \\(\\epsilon\\), so you can’t guarantee they will all be close to a single value \\(L\\). The limit, therefore, does not exist.\n\n\n\n1.4 L’Hôpital’s Rule\n\n1.4.1 Solving Indeterminate Forms\nL’Hôpital’s Rule is a practical method for finding the limit of a ratio of two functions, \\(\\frac{f(x)}{g(x)}\\), when both functions approach zero at the limiting point (an indeterminate form of the type \\(\\frac{0}{0}\\)).\nIf \\(\\lim_{x \\to a} f(x) = 0\\) and \\(\\lim_{x \\to a} g(x) = 0\\), then: \\[ \\lim_{x \\to a} \\frac{f(x)}{g(x)} = \\lim_{x \\to a} \\frac{f'(x)}{g'(x)} \\] …provided the limit on the right side exists.\n\n\n1.4.2 Intuition Behind the Rule\nThe intuition comes from the fact that near the point \\(a\\), where both functions are zero, the functions can be approximated by their tangent lines. The value of \\(f(x)\\) near \\(a\\) is approximately \\(f'(a) \\cdot (x-a)\\), and the value of \\(g(x)\\) is approximately \\(g'(a) \\cdot (x-a)\\).  The ratio \\(\\frac{f(x)}{g(x)}\\) is therefore approximately: \\[ \\frac{f'(a)(x-a)}{g'(a)(x-a)} = \\frac{f'(a)}{g'(a)} \\] This shows that the limit of the ratio of the functions is the same as the ratio of their derivatives (slopes) at that point.\n\n\n\n\n2. Definitions\n\nLimit: The value that a function or sequence “approaches” as the input or index approaches some value.\nDerivative (Formal Definition): The limit of the ratio of the change in a function’s output to the change in its input, as the change in the input approaches zero. It represents the instantaneous rate of change of the function.\nIndeterminate Form: An expression in mathematics, such as \\(\\frac{0}{0}\\) or \\(\\frac{\\infty}{\\infty}\\), which does not have a readily determined value. Limits involving these forms require further analysis.\n(ε, δ) Definition of a Limit: A rigorous formulation of a limit, stating that for any given distance \\(\\epsilon\\) from the limit value \\(L\\), there exists a distance \\(\\delta\\) from the input value \\(a\\) such that all inputs within \\(\\delta\\) of \\(a\\) have outputs within \\(\\epsilon\\) of \\(L\\).\nL’Hôpital’s Rule: A rule that uses derivatives to help evaluate limits of indeterminate forms. It states that the limit of a quotient of two functions is equal to the limit of the quotient of their derivatives.\n\n\n\n3. Formulas\n\nFormal Definition of the Derivative: \\[ f'(x) = \\lim_{h \\to 0} \\frac{f(x+h) - f(x)}{h} \\]\nL’Hôpital’s Rule: If \\(\\lim_{x \\to a} f(x) = 0\\) and \\(\\lim_{x \\to a} g(x) = 0\\), then \\[ \\lim_{x \\to a} \\frac{f(x)}{g(x)} = \\lim_{x \\to a} \\frac{f'(x)}{g'(x)} \\]\n\n\n\n4. Mistakes\n\nApplying L’Hôpital’s Rule Incorrectly: Using the quotient rule on the fraction \\(\\frac{f(x)}{g(x)}\\) instead of taking the derivatives of \\(f(x)\\) and \\(g(x)\\) separately. Why it’s wrong: The rule specifically requires the ratio of the individual derivatives, not the derivative of the ratio.\nUsing L’Hôpital’s Rule on a Determinate Form: Applying the rule when the limit is not of the form \\(\\frac{0}{0}\\) or \\(\\frac{\\infty}{\\infty}\\). Why it’s wrong: L’Hôpital’s Rule is only valid for indeterminate forms and will give an incorrect answer for other cases.\nAssuming a Limit Doesn’t Exist for 0/0: Concluding that a limit is undefined simply because plugging in the value yields \\(\\frac{0}{0}\\). Why it’s wrong: The form \\(\\frac{0}{0}\\) is indeterminate, meaning the limit could be any value, and it requires further analysis like factoring or L’Hôpital’s Rule.\nConfusing the Limit with the Function’s Value: Believing that the limit of a function at a point must equal the function’s value at that point. Why it’s wrong: The limit describes the behavior of the function near the point, which can exist even if the function is undefined at that specific point (e.g., a hole in the graph).\n\n\n\n5. Examples\n\n5.1. Finding a Derivative Using the Formal Definition\nQuestion: Find the derivative of \\(f(x) = x^3\\) at \\(x=2\\) using the limit definition.\n\n\nClick to see the solution\n\n\nSet up the limit expression: \\[ f'(2) = \\lim_{h \\to 0} \\frac{f(2+h) - f(2)}{h} \\]\nSubstitute the function \\(f(x) = x^3\\): \\[ f'(2) = \\lim_{h \\to 0} \\frac{(2+h)^3 - 2^3}{h} \\]\nExpand the numerator: \\((2+h)^3 = 2^3 + 3(2^2)h + 3(2)h^2 + h^3 = 8 + 12h + 6h^2 + h^3\\). \\[ f'(2) = \\lim_{h \\to 0} \\frac{(8 + 12h + 6h^2 + h^3) - 8}{h} \\]\nSimplify the expression: \\[ f'(2) = \\lim_{h \\to 0} \\frac{12h + 6h^2 + h^3}{h} \\]\nFactor out \\(h\\) from the numerator and cancel: \\[ f'(2) = \\lim_{h \\to 0} \\frac{h(12 + 6h + h^2)}{h} = \\lim_{h \\to 0} (12 + 6h + h^2) \\]\nEvaluate the limit by substituting \\(h=0\\): \\[ f'(2) = 12 + 6(0) + (0)^2 = 12 \\]\n\nAnswer: The derivative of \\(x^3\\) at \\(x=2\\) is 12.\n\n\n\n5.2. Simple Limit Evaluation\nQuestion: Evaluate the limit \\(\\lim_{x \\to 3} (2x^2 - 4x + 1)\\).\n\n\nClick to see the solution\n\n\nCheck for continuity: The function is a polynomial, which is continuous everywhere.\nDirect substitution: Since the function is continuous at \\(x=3\\), we can find the limit by directly substituting the value. \\[ 2(3)^2 - 4(3) + 1 \\]\nCalculate the result: \\[ 2(9) - 12 + 1 = 18 - 12 + 1 = 7 \\]\n\nAnswer: The limit is 7.\n\n\n\n5.3. Limit with Indeterminate Form (Factoring)\nQuestion: Evaluate the limit \\(\\lim_{x \\to 1} \\frac{x^2 - 1}{x - 1}\\).\n\n\nClick to see the solution\n\n\nAttempt direct substitution: Plugging in \\(x=1\\) gives \\(\\frac{1^2 - 1}{1 - 1} = \\frac{0}{0}\\), which is an indeterminate form.\nFactor the numerator: The numerator is a difference of squares, \\(x^2 - 1 = (x-1)(x+1)\\). \\[ \\lim_{x \\to 1} \\frac{(x-1)(x+1)}{x-1} \\]\nCancel the common factor: Since \\(x\\) approaches 1 but is not equal to 1, \\(x-1\\) is not zero, and we can cancel it. \\[ \\lim_{x \\to 1} (x+1) \\]\nEvaluate the simplified limit: \\[ 1 + 1 = 2 \\]\n\nAnswer: The limit is 2.\n\n\n\n5.4. L’Hôpital’s Rule: Basic Example\nQuestion: Evaluate the limit \\(\\lim_{x \\to 0} \\frac{\\sin(x)}{x}\\) using L’Hôpital’s Rule.\n\n\nClick to see the solution\n\n\nCheck for indeterminate form: As \\(x \\to 0\\), \\(\\sin(x) \\to 0\\) and \\(x \\to 0\\). This is the \\(\\frac{0}{0}\\) form.\nApply L’Hôpital’s Rule: Take the derivative of the numerator and the denominator separately.\n\nDerivative of \\(\\sin(x)\\) is \\(\\cos(x)\\).\nDerivative of \\(x\\) is \\(1\\). \\[ \\lim_{x \\to 0} \\frac{\\sin(x)}{x} = \\lim_{x \\to 0} \\frac{\\cos(x)}{1} \\]\n\nEvaluate the new limit: \\[ \\frac{\\cos(0)}{1} = \\frac{1}{1} = 1 \\]\n\nAnswer: The limit is 1.\n\n\n\n5.5. L’Hôpital’s Rule: More Complex Example\nQuestion: Evaluate the limit \\(\\lim_{x \\to 1} \\frac{\\sin(\\pi x)}{x^2 - 1}\\).\n\n\nClick to see the solution\n\n\nCheck for indeterminate form: As \\(x \\to 1\\), \\(\\sin(\\pi x) \\to \\sin(\\pi) = 0\\) and \\(x^2 - 1 \\to 1^2 - 1 = 0\\). This is the \\(\\frac{0}{0}\\) form.\nApply L’Hôpital’s Rule: Take the derivative of the numerator and the denominator.\n\nDerivative of \\(\\sin(\\pi x)\\) is \\(\\pi \\cos(\\pi x)\\) (using the chain rule).\nDerivative of \\(x^2 - 1\\) is \\(2x\\). \\[ \\lim_{x \\to 1} \\frac{\\sin(\\pi x)}{x^2 - 1} = \\lim_{x \\to 1} \\frac{\\pi \\cos(\\pi x)}{2x} \\]\n\nEvaluate the new limit by direct substitution: \\[ \\frac{\\pi \\cos(\\pi \\cdot 1)}{2(1)} = \\frac{\\pi \\cos(\\pi)}{2} = \\frac{\\pi(-1)}{2} = -\\frac{\\pi}{2} \\]\n\nAnswer: The limit is \\(-\\frac{\\pi}{2}\\).\n\n\n\n5.6. Epsilon-Delta Concept\nQuestion: For the limit \\(\\lim_{x \\to 2} (3x-1) = 5\\), if we want the output to be within \\(\\epsilon = 0.03\\) of 5, what is the largest \\(\\delta\\) we can choose for the input range around 2?\n\n\nClick to see the solution\n\n\nSet up the epsilon inequality: We want the distance between the function and its limit to be less than \\(\\epsilon\\). \\[ |(3x - 1) - 5| &lt; 0.03 \\]\nSimplify the inequality: \\[ |3x - 6| &lt; 0.03 \\] \\[ 3|x - 2| &lt; 0.03 \\]\nIsolate the delta term, \\(|x - 2|\\): \\[ |x - 2| &lt; \\frac{0.03}{3} \\] \\[ |x - 2| &lt; 0.01 \\]\nIdentify delta: The inequality is in the form \\(|x - a| &lt; \\delta\\). Here, \\(a=2\\) and \\(\\delta=0.01\\).\n\nAnswer: The largest delta (\\(\\delta\\)) we can choose is 0.01.\n\n\n\n5.7. When Not to Use L’Hôpital’s Rule\nQuestion: Evaluate the limit \\(\\lim_{x \\to 0} \\frac{\\cos(x)}{x+1}\\).\n\n\nClick to see the solution\n\n\nAttempt direct substitution: Let’s see if this is an indeterminate form. \\[ \\frac{\\cos(0)}{0+1} = \\frac{1}{1} = 1 \\]\nConclusion: The limit is not an indeterminate form. We can evaluate it directly. L’Hôpital’s Rule is not necessary and would be incorrect to apply. (If we did apply it, we would get \\(\\lim_{x \\to 0} \\frac{-\\sin(x)}{1} = 0\\), which is the wrong answer).\n\nAnswer: The limit is 1.",
    "crumbs": [
      "Essence of calculus",
      "7. Limits, Derivatives, L'Hôpital's Rule"
    ]
  },
  {
    "objectID": "Essence of calculus/vid_3.html",
    "href": "Essence of calculus/vid_3.html",
    "title": "3. Derivatives, Power Rule, Sine Function",
    "section": "",
    "text": "1. Summary\n\n1.1 Introduction\nA famous quote attributed to the mathematician David Hilbert goes: “You know, for a mathematician, he did not have enough imagination. But he has become a poet and now he is fine.” This highlights the creative and imaginative aspect of mathematics, which is essential for understanding concepts like derivatives.\n\n\n1.2 The Purpose of Derivative Formulas\n\n1.2.1 From Visual to Computational\nThe derivative of a function visually represents the slope of the line tangent to the function’s graph at any given point. This slope tells us the function’s instantaneous rate of change at that point. While this visual understanding is crucial, the next step in calculus is to learn how to compute these derivatives using explicit formulas. For a given function, like \\(f(x) = \\sin(x)x^2\\), we want to find a corresponding formula for its derivative, denoted as \\(\\frac{df}{dx}(x)\\).\n\n\n1.2.2 Abstract Functions and Real-World Applications\nIt is important to understand why we focus on computing derivatives for abstract functions. Much of a calculus student’s time is spent on these abstract computations rather than on concrete rate-of-change problems. The reason is that many real-world phenomena are modeled using these pure, abstract functions.\n\nVelocity of a moving object.\nOscillation of a spring.\nPopulation growth.\n\nThese applications are often described by polynomials (like \\(2x^2 - x^3\\)), trigonometric functions (like \\(\\sin(x)\\)), and exponential functions (like \\(e^x\\)). By developing a strong command of the rules for differentiating these abstract functions, we build a powerful language to describe and analyze how things change in countless concrete situations.\n\n\n\n1.3 The Power Rule: A Geometric Approach\nThe Power Rule is a fundamental formula for finding the derivatives of functions in the form \\(f(x) = x^n\\). We can derive this rule intuitively using geometry.\n\n1.3.1 Case Study: f(x) = x²\nLet’s visualize the function \\(f(x) = x^2\\) as the area of a square with side length \\(x\\).\n\nIf we increase the side length \\(x\\) by a tiny amount, \\(dx\\), the area of the square increases by a small amount, which we’ll call \\(df\\). This added area, \\(df\\), consists of:\n\nTwo thin rectangles, each with an area of \\(x \\cdot dx\\).\nOne tiny square in the corner, with an area of \\((dx)^2\\).\n\nSo, the total change in area is \\(df = 2x \\cdot dx + (dx)^2\\).\nWhen we consider the derivative \\(\\frac{df}{dx}\\), we are interested in the ratio of the change in area to the change in side length as \\(dx\\) becomes infinitesimally small. The term \\((dx)^2\\) becomes negligible much faster than the \\(2x \\cdot dx\\) term. Therefore, we can say that the most significant part of the change in area is \\(2x \\cdot dx\\).\n\\[ \\frac{df}{dx} = \\frac{2x \\cdot dx}{dx} = 2x \\]\nThus, the derivative of \\(x^2\\) is \\(2x\\).\n\n\n1.3.2 Case Study: f(x) = x³\nWe can extend this idea to \\(f(x) = x^3\\), which represents the volume of a cube with side length \\(x\\).\n\nIf we increase the side length by a tiny amount \\(dx\\), the volume increases by \\(df\\). This added volume is composed mainly of three thin square slabs, one on each of the three faces meeting at a corner.\n\nEach slab has a volume of (Area of face) \\(\\times\\) (thickness) = \\(x^2 \\cdot dx\\).\nThe total volume from these three slabs is \\(3x^2 \\cdot dx\\).\n\nThere are other, smaller pieces of volume along the edges and at the corner, but these are proportional to \\((dx)^2\\) and \\((dx)^3\\) and become negligible as \\(dx\\) approaches zero. So, the dominant part of the change in volume is \\(df \\approx 3x^2 \\cdot dx\\).\n\\[ \\frac{df}{dx} = \\frac{3x^2 \\cdot dx}{dx} = 3x^2 \\]\nThe derivative of \\(x^3\\) is \\(3x^2\\).\n\n\n\n1.4 The Power Rule: General Formula\nFrom these geometric examples, a pattern emerges, which is known as the Power Rule: \\[ \\frac{d}{dx}x^n = nx^{n-1} \\] This rule states that to find the derivative of \\(x\\) raised to some power \\(n\\), you bring the exponent \\(n\\) down as a multiplier and then reduce the original exponent by one. This holds true for any power \\(n\\), including negative and fractional exponents.\n\n\n1.5 Derivative of sin(θ): A Geometric View\nTo find the derivative of \\(\\sin(\\theta)\\), we use the unit circle (a circle with radius 1).\n\n\nThe value of \\(\\sin(\\theta)\\) is the y-coordinate (the height) of a point on the unit circle corresponding to an angle \\(\\theta\\).\nLet’s consider a small increase in the angle by an amount \\(d\\theta\\). This corresponds to moving a small distance \\(d\\theta\\) along the circumference.\nThis small step results in a small change in height, which is \\(d(\\sin(\\theta))\\).\nIf we zoom in on this section, the small arc \\(d\\theta\\) can be approximated as the hypotenuse of a tiny right-angled triangle.\nThe vertical side of this triangle is \\(d(\\sin(\\theta))\\).\nThis small triangle is similar to the larger triangle formed by the radius, the x-axis, and the vertical line representing \\(\\sin(\\theta)\\). The angle at the top of the small triangle is also \\(\\theta\\).\nUsing trigonometry on this small triangle: \\[ \\frac{\\text{adjacent}}{\\text{hypotenuse}} = \\frac{d(\\sin(\\theta))}{d\\theta} \\]\nFrom the larger triangle, we know that the ratio of the adjacent side to the hypotenuse is \\(\\cos(\\theta)\\).\nTherefore, we can conclude: \\[ \\frac{d}{d\\theta}\\sin(\\theta) = \\cos(\\theta) \\]\n\n\n\n\n2. Definitions\n\nDerivative: The instantaneous rate of change of a function with respect to one of its variables. Geometrically, it is the slope of the tangent line to the function’s graph at a specific point.\nPower Rule: A fundamental rule in calculus stating that the derivative of \\(f(x) = x^n\\) is \\(f'(x) = nx^{n-1}\\) for any real number \\(n\\).\nUnit Circle: A circle with a radius of one, centered at the origin of a Cartesian coordinate system. It is used to define trigonometric functions for all real numbers.\nInfinitesimal: A quantity that is closer to zero than any standard real number but is not zero itself. In this context, dx and dθ represent infinitesimal changes.\n\n\n\n3. Formulas\n\nDerivative Notation: The derivative of a function \\(f\\) with respect to a variable \\(x\\) is written as \\(\\frac{df}{dx}\\).\nThe Power Rule: \\[ \\frac{d}{dx}(x^n) = nx^{n-1} \\]\nDerivative of Sine: \\[ \\frac{d}{d\\theta}\\sin(\\theta) = \\cos(\\theta) \\]\nDerivative of Cosine (by similar geometric reasoning): \\[ \\frac{d}{d\\theta}\\cos(\\theta) = -\\sin(\\theta) \\]\n\n\n\n4. Mistakes\n\nIncorrectly Applying the Power Rule: A common mistake is to only subtract one from the exponent without multiplying by the original exponent. For example, stating the derivative of \\(x^3\\) is \\(x^2\\) instead of \\(3x^2\\).\nIgnoring Negligible Terms: In geometric proofs, failing to understand why terms like \\((dx)^2\\) can be ignored. Why it’s wrong: The essence of a derivative is a limit as the change (\\(dx\\)) approaches zero. Higher powers of \\(dx\\) approach zero much faster, making them irrelevant to the final slope.\nConfusing the Function’s Value with its Slope: Looking at the value of \\(f(x)\\) on a graph and thinking it represents the derivative. Why it’s wrong: The derivative is the slope of the tangent line at that point, not the y-value of the point itself.\nMixing up Radians and Degrees: The derivative rules for trigonometric functions like \\(\\sin(\\theta)\\) are only valid when \\(\\theta\\) is measured in radians.\n\n\n\n5. Examples\n\n5.1 Simple Power Rule\nQuestion: Find the derivative of \\(f(x) = x^5\\).\n\n\nClick to see the solution\n\n\nIdentify the exponent n: In this case, \\(n=5\\).\nApply the Power Rule formula \\(\\frac{d}{dx}x^n = nx^{n-1}\\): \\[ \\frac{d}{dx}x^5 = 5x^{5-1} \\]\nSimplify the expression: \\[ 5x^4 \\]\n\nAnswer: The derivative of \\(x^5\\) is \\(5x^4\\).\n\n\n\n5.2 Power Rule with a Constant\nQuestion: Find the derivative of \\(f(x) = x\\).\n\n\nClick to see the solution\n\n\nRewrite the function: \\(f(x) = x^1\\). Here, \\(n=1\\).\nApply the Power Rule: \\[ \\frac{d}{dx}x^1 = 1 \\cdot x^{1-1} = 1 \\cdot x^0 \\]\nSimplify: Since any number to the power of 0 is 1, the result is \\(1 \\cdot 1 = 1\\).\n\nAnswer: The derivative of \\(x\\) is \\(1\\). This makes sense, as the graph of \\(y=x\\) is a straight line with a constant slope of 1.\n\n\n\n5.3 Power Rule with Fractional Exponents\nQuestion: Find the derivative of \\(f(x) = \\sqrt{x}\\).\n\n\nClick to see the solution\n\n\nRewrite the function using an exponent: \\(\\sqrt{x} = x^{1/2}\\). Here, \\(n = 1/2\\).\nApply the Power Rule: \\[ \\frac{d}{dx}x^{1/2} = \\frac{1}{2}x^{(1/2)-1} = \\frac{1}{2}x^{-1/2} \\]\nSimplify the expression: \\[ \\frac{1}{2x^{1/2}} = \\frac{1}{2\\sqrt{x}} \\]\n\nAnswer: The derivative of \\(\\sqrt{x}\\) is \\(\\frac{1}{2\\sqrt{x}}\\).\n\n\n\n5.4 Power Rule with Negative Exponents\nQuestion: Find the derivative of \\(f(x) = \\frac{1}{x^2}\\).\n\n\nClick to see the solution\n\n\nRewrite the function using a negative exponent: \\(\\frac{1}{x^2} = x^{-2}\\). Here, \\(n = -2\\).\nApply the Power Rule: \\[ \\frac{d}{dx}x^{-2} = -2x^{-2-1} = -2x^{-3} \\]\nSimplify the expression: \\[ -\\frac{2}{x^3} \\]\n\nAnswer: The derivative of \\(\\frac{1}{x^2}\\) is \\(-\\frac{2}{x^3}\\).\n\n\n\n5.5 Finding the Slope at a Point\nQuestion: What is the slope of the tangent line to the curve \\(y = x^3\\) at the point where \\(x=2\\)?\n\n\nClick to see the solution\n\n\nFind the derivative of the function: Using the Power Rule, the derivative of \\(x^3\\) is \\(3x^2\\). \\[ \\frac{dy}{dx} = 3x^2 \\]\nEvaluate the derivative at the given point: Substitute \\(x=2\\) into the derivative expression. \\[ \\text{Slope} = 3(2)^2 = 3(4) = 12 \\]\n\nAnswer: The slope of the tangent line at \\(x=2\\) is 12.\n\n\n\n5.6 Derivative of Sine at a Specific Angle\nQuestion: What is the slope of the graph of \\(f(\\theta) = \\sin(\\theta)\\) at \\(\\theta = \\frac{\\pi}{2}\\)?\n\n\nClick to see the solution\n\n\nFind the derivative of \\(\\sin(\\theta)\\): We know that \\(\\frac{d}{d\\theta}\\sin(\\theta) = \\cos(\\theta)\\).\nEvaluate the derivative at the given angle: Substitute \\(\\theta = \\frac{\\pi}{2}\\) into the derivative function. \\[ \\text{Slope} = \\cos\\left(\\frac{\\pi}{2}\\right) \\]\nCalculate the value: The cosine of \\(\\frac{\\pi}{2}\\) (or 90 degrees) is 0.\n\nAnswer: The slope is 0. This corresponds to the peak of the sine wave, where the tangent line is horizontal.\n\n\n\n5.7 Geometric Interpretation of a Derivative\nQuestion: A square has an area of \\(A = x^2\\). If the side length is currently 10 units, what is the approximate change in area if the side length increases by a tiny amount, \\(dx\\)?\n\n\nClick to see the solution\n\n\n\nRelate the change in area (\\(dA\\)) to the change in side length (\\(dx\\)): From the geometric derivation, the change in area is approximately the sum of the areas of two thin rectangles. \\[ dA \\approx 2x \\cdot dx \\]\nSubstitute the current side length: Here, \\(x=10\\). \\[ dA \\approx 2(10) \\cdot dx = 20 \\cdot dx \\]\n\nAnswer: The change in area is approximately 20 times the small change in the side length. This means the rate of change of the area with respect to the side length at this instant is 20.",
    "crumbs": [
      "Essence of calculus",
      "3. Derivatives, Power Rule, Sine Function"
    ]
  },
  {
    "objectID": "Essence of calculus/vid_1.html",
    "href": "Essence of calculus/vid_1.html",
    "title": "1. Integrals, Derivatives, Fundamental Theorem of Calculus",
    "section": "",
    "text": "1. Summary\n\n1.1 The Goal of Calculus\nThe primary goal of the “Essence of Calculus” series is to build a deep, intuitive understanding of the subject’s core concepts. Rather than focusing on rote memorization of formulas and rules, the approach is visual and conceptual. The aim is for the viewer to grasp the foundational ideas so thoroughly that they could feel as though they invented calculus themselves. This involves understanding where the core ideas come from, what they truly mean, and how they connect.\n\n\n1.2 The Core Idea: A Geometric Puzzle\nCalculus can be understood by exploring a single, specific geometric problem: finding the area of a circle. While the formula \\(A = \\pi R^2\\) is well-known, understanding why this formula is true can lead directly to the three main ideas in calculus.\n\n1.2.1 Slicing the Circle\nTo derive the area, we can slice the circle into many thin, concentric rings. Each ring can be “unrolled” to approximate a thin rectangle.\n\nThe length of this rectangle is the circumference of the ring, given by the formula \\(C = 2\\pi r\\), where r is the radius of that specific ring.\nThe width of the rectangle is the very small thickness of the ring, which we can call dr (a tiny difference in the radius).\n\nThe area of a single ring, dA, can therefore be approximated by the area of this rectangle: \\(dA \\approx (2\\pi r) \\cdot dr\\).\n\n\n\n1.2.2 Visualizing the Sum of Slices\nTo find the total area of the circle, we need to add up the areas of all these thin rectangular rings. We can visualize this summation by arranging the unrolled rings (rectangles) side-by-side along an axis.\n\nThe rings are arranged from the smallest (at radius \\(r=0\\)) to the largest (at radius \\(r=R\\)).\nWhen laid out, the heights of these rectangles form a straight line, defined by the function \\(y = 2\\pi r\\).\nThe collection of all these rectangles approximates the shape of a right triangle.\n\n\n\n\n1.2.3 From Approximation to Precision: The Integral\nThis process of breaking a hard problem (finding the area of a circle) into the sum of many small, manageable pieces (the areas of the rings) is the core idea behind Integral Calculus.\n\nThe sum of the areas of all the thin rectangles provides an approximation of the circle’s total area.\nThis approximation becomes more accurate as the thickness of the rings, dr, becomes smaller and smaller.\nIn the limit, as dr approaches zero, the sum of these infinitesimally thin rectangles gives the exact area under the graph of the function \\(y = 2\\pi r\\), from \\(r=0\\) to \\(r=R\\).\nThis area under the graph is a triangle with a base of \\(R\\) and a height of \\(2\\pi R\\).\nUsing the formula for the area of a triangle (\\(\\frac{1}{2} \\times \\text{base} \\times \\text{height}\\)), we get: \\[ \\text{Area} = \\frac{1}{2} (R)(2\\pi R) = \\pi R^2 \\] This demonstrates how a problem can be solved by reframing it as finding the area under a graph, which is the central concept of an integral.\n\n\n\n\n1.3 Connecting Area and Rate of Change: The Derivative\nThe second major idea in calculus is the derivative, which is fundamentally about understanding how a function changes when its input is nudged slightly.\n\n1.3.1 The Derivative of an Area Function\nLet’s define a function, \\(A(x)\\), that gives the area under a curve (like \\(y = x^2\\)) from a fixed starting point to a variable endpoint \\(x\\).\n\nIf we nudge the input \\(x\\) by a tiny amount, dx, the area \\(A(x)\\) will also increase by a tiny amount, dA.\nThis small sliver of new area, dA, can be approximated by a rectangle with width dx and height equal to the function’s value at that point, \\(x^2\\).\nSo, the change in area dA is approximately equal to \\(x^2 \\cdot dx\\).\nRearranging this gives us the ratio: $ x^2 $.\n\nThis ratio, dA/dx, is the derivative of the area function \\(A(x)\\). It tells us the rate at which the area is changing at any given point \\(x\\). As the nudge dx gets infinitesimally small, this approximation becomes perfectly accurate.\n\n\n\n1.3.2 The Fundamental Theorem of Calculus\nThe discovery that the rate of change (derivative) of an integral function (the area function \\(A(x)\\)) gives back the original function being integrated (\\(x^2\\)) is the Fundamental Theorem of Calculus.\n\nIntegrals (finding areas under curves) and Derivatives (finding rates of change) are inverse operations.\nThis profound connection means that if you have a problem involving summing up many small quantities (an integral), you can solve it by finding a function whose rate of change (derivative) matches the quantities you are summing.\n\n\n\n\n\n2. Definitions\n\nCalculus: A branch of mathematics focused on limits, functions, derivatives, integrals, and infinite series. It is the study of continuous change.\nIntegral: The mathematical process of finding the area under a curve by summing up an infinite number of infinitesimally small quantities. This concept is used to solve problems where a quantity accumulates.\nDerivative: A measure of the instantaneous rate of change of a function with respect to one of its variables. Geometrically, it represents the slope of the tangent line to the graph of the function at a specific point.\nFundamental Theorem of Calculus: The central theorem that establishes the inverse relationship between differentiation and integration. It links the area under a curve to the function’s antiderivative.\ndx (or dr, dt): An infinitesimally small change or “nudge” in a variable like x, r, or t. It’s a core concept in calculus for defining both derivatives and integrals.\n\n\n\n3. Formulas\n\nArea of a Circle: $ A = R^2 $\nCircumference of a Circle: $ C = 2r $\nArea of a Thin Ring (Approximation): $ dA r dr $\nThe Derivative of an Area Function \\(A(x)\\) under \\(f(x)\\): $ = f(x) $\nThe Integral as Area: The area of a circle with radius \\(R\\) is the integral of its circumference function from \\(0\\) to \\(R\\): \\[ \\text{Area} = \\int_{0}^{R} 2\\pi r \\,dr = \\pi R^2 \\]\n\n\n\n4. Mistakes\n\nTreating Calculus as Just a Set of Rules: The most common mistake is to memorize formulas (like the power rule, product rule, etc.) without understanding the underlying geometric and conceptual reasoning. Why it’s wrong: This approach makes it difficult to apply calculus to novel problems and fails to appreciate the elegance of the subject. The goal should be to understand the “why” behind each concept.\nConfusing the Approximation with the Exact Value: Assuming that adding up a finite number of rectangular slices gives the exact area under a curve. Why it’s wrong: This is only an approximation. The exact area is found by taking the limit as the width of the slices approaches zero, which is the definition of the integral.\nThinking Integrals and Derivatives are Unrelated: Viewing integration (summing things up) and differentiation (finding rates of change) as two separate topics. Why it’s wrong: The Fundamental Theorem of Calculus reveals they are inverse operations, a crucial insight that makes solving many problems possible.\nMisunderstanding dx: Treating dx as just a meaningless piece of notation or a simple variable. Why it’s wrong: dx represents an infinitesimally small change in x, a concept rooted in limits. Understanding this is key to grasping how derivatives measure instantaneous change and how integrals sum up continuous quantities.\n\n\n\n5. Examples\n\n5.1 Area of a Square via Integration\nQuestion: Use the method of slicing to find the area of a square with side length \\(S\\).\n\n\nClick to see the solution\n\n\nSlice the square: Imagine slicing the square into thin vertical rectangles, each with a width of dx. The height of each rectangle is constant, equal to \\(S\\). \nArea of a slice: The area of one thin rectangle is its height times its width: \\(dA = S \\cdot dx\\).\nSum the slices: We need to sum these areas as x (the position along the base) goes from \\(0\\) to \\(S\\). This corresponds to finding the area under the graph of the constant function \\(y = S\\). \nCalculate the area: The area under the constant function \\(y=S\\) from \\(x=0\\) to \\(x=S\\) is a rectangle with a base of \\(S\\) and a height of \\(S\\). \\[ \\text{Area} = \\int_{0}^{S} S \\,dx = \\text{base} \\times \\text{height} = S \\times S = S^2 \\]\n\nAnswer: The area is \\(S^2\\). This confirms the slicing method works for a simple, known shape.\n\n\n\n5.2 The Area Under \\(y = x\\)\nQuestion: What is the area under the graph of \\(f(x) = x\\) from \\(x = 0\\) to \\(x = 4\\)?\n\n\nClick to see the solution\n\n\nVisualize the problem: The function \\(f(x) = x\\) is a straight line passing through the origin with a slope of 1. The area under this graph from 0 to 4 forms a right triangle. \nIdentify base and height: The base of the triangle is the interval on the x-axis, which has a length of 4. The height of the triangle is the value of the function at \\(x = 4\\), which is \\(f(4) = 4\\).\nApply the area formula for a triangle: \\[ \\text{Area} = \\frac{1}{2} \\times \\text{base} \\times \\text{height} = \\frac{1}{2} \\times 4 \\times 4 = 8 \\]\n\nAnswer: The area under the curve is 8.\n\n\n\n5.3 Integral of \\(x^2\\)\nQuestion: Given that the derivative of the area function \\(A(x)\\) for the curve \\(y=x^2\\) is \\(\\frac{dA}{dx} = x^2\\), what must the function for the area, \\(A(x)\\), be (up to a constant)?\n\n\nClick to see the solution\n\n\nThink in reverse: We are looking for a function whose derivative is \\(x^2\\). This is the reverse process of differentiation, known as anti-differentiation.\nRecall the power rule for derivatives: The derivative of \\(x^n\\) is \\(n \\cdot x^{n-1}\\). To get a result of \\(x^2\\), we must have started with a power of \\(x^3\\).\nTest \\(x^3\\): The derivative of \\(x^3\\) is \\(3x^2\\). This is close, but has an extra factor of 3.\nAdjust the function: To cancel the factor of 3, we should start with \\(\\frac{1}{3}x^3\\). Let’s check its derivative: \\[ \\frac{d}{dx}\\left(\\frac{1}{3}x^3\\right) = \\frac{1}{3} \\cdot (3x^2) = x^2 \\] This works.\n\nAnswer: The area function is \\(A(x) = \\frac{1}{3}x^3 + C\\), where C is a constant of integration.\n\n\n\n5.4 Volume of a Cone\nQuestion: A cone has a height \\(H\\) and a base radius \\(R\\). How could you use the slicing method to find its volume? Set up the integral.\n\n\nClick to see the solution\n\n\nSlice the cone: Slice the cone horizontally into thin circular disks, each with a height of dh. \nVolume of a slice: Each slice is a cylinder with volume \\(dV = (\\text{Area of base}) \\times \\text{height}\\). The base is a circle with area \\(\\pi r^2\\), and the height is dh. So, \\(dV = \\pi r^2 \\cdot dh\\).\nRelate r to h: The radius r of a slice depends on its height h from the tip. By similar triangles, the ratio of the radius to the height is constant: \\(\\frac{r}{h} = \\frac{R}{H}\\). Therefore, \\(r = \\frac{R}{H}h\\).\nSet up the sum (integral): Substitute the expression for r into the volume formula for a slice: \\(dV = \\pi \\left(\\frac{R}{H}h\\right)^2 dh = \\frac{\\pi R^2}{H^2} h^2 dh\\). To find the total volume, we sum (integrate) these small volumes from \\(h = 0\\) to \\(h = H\\). \\[ V = \\int_{0}^{H} \\frac{\\pi R^2}{H^2} h^2 \\,dh \\]\n\nAnswer: The integral representing the volume is \\(V = \\int_{0}^{H} \\frac{\\pi R^2}{H^2} h^2 \\,dh\\).\n\n\n\n5.5 Area of a Parabola\nQuestion: Using the result from Example 5.3 that the integral of \\(x^2\\) is \\(\\frac{1}{3}x^3\\), find the exact area under the parabola \\(y = x^2\\) from \\(x = 0\\) to \\(x = 3\\).\n\n\nClick to see the solution\n\n\nIdentify the area function: The area under the curve \\(y=x^2\\) from 0 to \\(x\\) is given by the integral function \\(A(x) = \\frac{1}{3}x^3\\). \nEvaluate at the endpoint: We want to find the area up to the endpoint \\(x=3\\). We substitute this value into our area function. \\[ A(3) = \\frac{1}{3}(3)^3 \\]\nCalculate the result: \\[ A(3) = \\frac{1}{3}(27) = 9 \\]\n\nAnswer: The exact area is 9.\n\n\n\n5.6 Relating Circumference and Area\nQuestion: The area of a circle is \\(A(r) = \\pi r^2\\). Find the derivative of this area function with respect to the radius, \\(r\\). What does the result represent physically?\n\n\nClick to see the solution\n\n\nDifferentiate the area function: Using the power rule for derivatives on \\(A(r) = \\pi r^2\\). \\[ \\frac{dA}{dr} = \\frac{d}{dr}(\\pi r^2) = \\pi \\cdot (2r) = 2\\pi r \\]\nInterpret the result: The derivative, \\(2\\pi r\\), is the formula for the circumference of a circle with radius \\(r\\).\nPhysical meaning: This shows that the rate at which the area of a circle grows as its radius increases is equal to its circumference. This makes intuitive sense: a small nudge dr to the radius adds a thin ring of area, and that ring’s area is approximately its circumference (\\(2\\pi r\\)) times its thickness (dr). The ratio dA/dr is therefore the circumference.\n\nAnswer: The derivative is \\(2\\pi r\\), which is the circumference of the circle.\n\n\n\n5.7 Integral as an “Anti-Derivative”\nQuestion: If the velocity of a particle is given by \\(v(t) = 9.8t\\), what is the function for the distance it has traveled, \\(s(t)\\), assuming it started from rest (\\(s(0)=0\\))?\n\n\nClick to see the solution\n\n\nRelate velocity and distance: Velocity is the derivative of the distance function, so \\(\\frac{ds}{dt} = v(t)\\). To find the distance, we need to find the integral (or anti-derivative) of the velocity function.\nFind the anti-derivative: We need a function whose derivative is \\(9.8t\\).\nApply the reverse power rule: To get a result of \\(t^1\\), we must have started with \\(t^2\\). The derivative of \\(t^2\\) is \\(2t\\).\nAdjust the function: Our function is \\(9.8t\\). We can write this as \\((4.9) \\cdot (2t)\\). This suggests our original function was \\(4.9t^2\\). Let’s check: \\[ \\frac{d}{dt}(4.9t^2) = 4.9 \\cdot (2t) = 9.8t \\] This matches the velocity function.\n\nAnswer: The distance function is \\(s(t) = 4.9t^2\\).",
    "crumbs": [
      "Essence of calculus",
      "1. Integrals, Derivatives, Fundamental Theorem of Calculus"
    ]
  },
  {
    "objectID": "Essence of calculus/vid_8.html",
    "href": "Essence of calculus/vid_8.html",
    "title": "8. Integrals, Antiderivatives, Fundamental Theorem of Calculus",
    "section": "",
    "text": "1. Summary\n\n1.1 The Philosophy of Obviousness\nThe mathematician Alexander Grothendieck famously said, “One should never try to prove anything that is not almost obvious.” This highlights a crucial aspect of learning mathematics: before diving into the formal mechanics of a proof, it’s beneficial to step back and build an intuition for why a concept should be true. The goal of this exploration is to make the connection between integrals and derivatives “almost obvious.”\n\n\n1.2 The Core Idea: Integrals as Antiderivatives\nCalculus is built on two fundamental concepts: derivatives and integrals. While derivatives are often introduced first to describe rates of change, integrals are equally important for understanding accumulation. The central idea we will explore is that these two operations are inverses of each other. This relationship is captured by the Fundamental Theorem of Calculus. \\[ \\frac{d}{dT} \\int_{0}^{T} v(t) dt = v(T) \\] In simple terms, if you take the integral of a function and then take its derivative, you get back to the original function.\n\n\n1.3 The Car Analogy: From Velocity to Distance\nTo build our intuition, we’ll use a physical example.\n\n1.3.1 The Problem\nImagine you are in a car for 8 seconds, but you can only see the speedometer. You cannot see out the window. The car starts from rest, accelerates, and then slows back to a stop. The question is: how can you figure out the total distance you’ve traveled?\nThis is the opposite of the problem tackled by derivatives. With derivatives, you start with a distance function, \\(s(t)\\), and find the velocity function, \\(v(t)\\), by calculating the rate of change. Here, we start with the velocity function, \\(v(t)\\), and want to find the total distance.\n\n\n1.3.2 A Simpler Case: Constant Velocity\nIf the car were moving at a constant velocity, say 10 meters per second for 8 seconds, the calculation is simple: \\[ \\text{Distance} = \\text{Velocity} \\times \\text{Time} = 10 \\frac{m}{s} \\times 8s = 80 \\text{ meters} \\] On a velocity-versus-time graph, this calculation corresponds to finding the area of a rectangle. The height is the velocity (10 m/s), and the width is the time (8 s). The area, height times width, gives the distance. \n\n\n1.3.3 The Challenge: Changing Velocity\nOur car’s velocity is not constant; it’s continuously changing. Let’s model its velocity with the function \\(v(t) = t(8-t)\\). The graph of this function is a downward-opening parabola. Since the velocity changes at every moment, we cannot simply multiply velocity by time.\n\n\n\n1.4 The Solution: Approximating with Rectangles\nThe strategy is to approximate the real situation with a series of simpler ones.\n\n1.4.1 Riemann Sums\nWe can break the 8-second time interval into many small time chunks, each with a tiny width we’ll call \\(dt\\). For each tiny chunk, we can pretend the velocity is constant.\n\nFor a small interval of time \\(dt\\), the distance traveled is approximately the velocity at the start of that interval, \\(v(t)\\), multiplied by the duration, \\(dt\\).\nThis product, \\(v(t) \\times dt\\), represents the area of a very thin rectangle under the velocity graph.\nTo find the total distance, we sum the areas of all these thin rectangles. This is known as a Riemann Sum. \n\n\n\n1.4.2 Taking the Limit\nThis method provides an approximation. To get the exact distance, we need to make the approximation perfect. We do this by making the time intervals \\(dt\\) infinitesimally small. As \\(dt\\) approaches zero, the sum of the areas of the infinitesimally thin rectangles perfectly matches the area under the curve.\n\n\n\n1.5 The Integral: Formalizing the Sum\nThis concept of finding the exact area under a curve by summing up infinite, infinitesimally thin parts is called integration.\n\n1.5.1 Integral Notation\nWe use a special symbol, \\(\\int\\), which is an elongated ‘S’ for “sum,” to denote this operation. The definite integral of our velocity function \\(v(t)\\) from time \\(t=0\\) to \\(t=8\\) is written as: \\[ \\int_{0}^{8} v(t) dt \\] This expression means: 1. Consider the values of \\(v(t)\\) from \\(t=0\\) to \\(t=8\\). 2. Multiply each value by a tiny sliver of time, \\(dt\\). 3. Sum up all these products. This integral gives the exact area under the curve, which in our analogy, is the exact distance traveled.\n\n\n\n1.6 The Fundamental Theorem of Calculus in Action\nThe Fundamental Theorem of Calculus provides a powerful shortcut for calculating integrals. It formalizes the inverse relationship between derivatives and integrals.\n\n1.6.1 The Two-Step Process\nTo compute a definite integral like \\(\\int_{a}^{b} f(x) dx\\): 1. Find the Antiderivative: Find a function, let’s call it \\(F(x)\\), whose derivative is \\(f(x)\\). This \\(F(x)\\) is called the antiderivative of \\(f(x)\\). 2. Evaluate at the Bounds: Calculate the value of the antiderivative at the upper bound (\\(b\\)) and the lower bound (\\(a\\)). The result of the integral is the difference: \\(F(b) - F(a)\\).\n\n\n1.6.2 Solving the Car Problem\n\nVelocity Function: \\(v(t) = t(8-t) = 8t - t^2\\).\nFind the Antiderivative, \\(s(t)\\):\n\nUsing the power rule in reverse, the antiderivative of \\(8t\\) is \\(4t^2\\).\nThe antiderivative of \\(-t^2\\) is \\(-\\frac{1}{3}t^3\\).\nSo, the general antiderivative is \\(s(t) = 4t^2 - \\frac{1}{3}t^3 + C\\).\n\nEvaluate the Definite Integral from 0 to 8: \\[ \\int_{0}^{8} (8t - t^2) dt = s(8) - s(0) \\] \\[ s(8) = \\left(4(8)^2 - \\frac{1}{3}(8)^3\\right) + C = \\left(256 - \\frac{512}{3}\\right) + C \\approx 85.33 + C \\] \\[ s(0) = \\left(4(0)^2 - \\frac{1}{3}(0)^3\\right) + C = 0 + C \\] \\[ s(8) - s(0) = (85.33 + C) - (0 + C) = 85.33 \\] The total distance traveled in 8 seconds is approximately 85.33 meters. Notice how the constant of integration, \\(C\\), cancels out.\n\n\n\n\n1.7 Signed Area and Displacement\nWhat happens if the velocity is negative, meaning the car moves backward?\n\nWhen the function \\(v(t)\\) is below the horizontal axis, the values of \\(v(t)\\) are negative.\nThe product \\(v(t) \\times dt\\) becomes negative.\nThe integral, therefore, treats the area below the axis as negative. This is called signed area. The integral calculates the displacement (net change in position), not necessarily the total distance traveled. To find the total distance, you would need to take the absolute value of the velocity before integrating over the intervals where it is negative. \n\n\n\n\n2. Definitions\n\nIntegral: An operation in calculus that can be interpreted as finding the area under a curve. It is the inverse operation of differentiation.\nAntiderivative: A function \\(F(x)\\) is an antiderivative of a function \\(f(x)\\) if \\(F'(x) = f(x)\\).\nFundamental Theorem of Calculus: A theorem linking the concepts of differentiating a function and integrating a function. It states that the definite integral of a function over an interval can be calculated by finding an antiderivative and evaluating it at the endpoints of the interval.\nDefinite Integral: The integral of a function over a specific interval, denoted \\(\\int_{a}^{b} f(x) dx\\). It yields a single numerical value representing the signed area under the function’s curve from \\(x=a\\) to \\(x=b\\).\nIndefinite Integral: The general form of the antiderivative of a function, written as \\(\\int f(x) dx = F(x) + C\\), where \\(C\\) is an arbitrary constant of integration.\nRiemann Sum: An approximation of the area under a curve, calculated by summing the areas of a finite number of rectangles.\nSigned Area: The net area between a function’s graph and the x-axis. Areas above the axis are positive, and areas below the axis are negative.\nDisplacement: The net change in an object’s position. If an object moves forward 10 meters and back 3 meters, its displacement is 7 meters, but the total distance traveled is 13 meters.\n\n\n\n3. Formulas\n\nIntegral Notation (Definite): \\[ \\int_{a}^{b} f(x) dx \\]\nFundamental Theorem of Calculus: \\[ \\int_{a}^{b} f(x) dx = F(b) - F(a), \\quad \\text{where } F'(x) = f(x) \\]\nDerivative of an Integral Function: \\[ \\frac{d}{dx} \\int_{a}^{x} f(t) dt = f(x) \\]\nPower Rule for Antiderivatives (Indefinite Integral): \\[ \\int x^n dx = \\frac{x^{n+1}}{n+1} + C, \\quad (n \\neq -1) \\]\n\n\n\n4. Mistakes\n\nForgetting the Constant of Integration C: When finding an indefinite integral (a general antiderivative), the + C is essential because the derivative of any constant is zero. Forgetting it means you’ve only found one of infinitely many possible antiderivatives.\nConfusing Total Distance and Displacement: An integral calculates the signed area, which corresponds to displacement. Why it’s wrong: If a function drops below the x-axis (e.g., negative velocity), the integral will subtract that area. To find the total distance, you must integrate the absolute value of the function, which may require splitting the integral into multiple parts.\nUsing the Original Function in the FTC Evaluation: After finding the antiderivative \\(F(x)\\), the final calculation is \\(F(b) - F(a)\\), not \\(f(b) - f(a)\\). Why it’s wrong: This mistake ignores the core principle of the theorem, which relies on the accumulated change represented by the antiderivative.\nIncorrectly Applying the Power Rule for Antiderivatives: A common mistake is to subtract from the exponent instead of adding, as one does in differentiation. For example, incorrectly stating that the antiderivative of \\(x^2\\) is \\(x^1\\). Why it’s wrong: It confuses the rules for differentiation and integration. The rule is \\(\\int x^n dx = \\frac{x^{n+1}}{n+1} + C\\).\n\n\n\n5. Examples\n\n5.1. Find the Antiderivative\nQuestion: Find the indefinite integral of \\(f(x) = 3x^2 + 4x - 5\\).\n\n\nClick to see the solution\n\n\nApply the power rule to each term:\n\nThe antiderivative of \\(3x^2\\) is \\(3 \\cdot \\frac{x^{2+1}}{2+1} = \\frac{3x^3}{3} = x^3\\).\nThe antiderivative of \\(4x\\) is \\(4 \\cdot \\frac{x^{1+1}}{1+1} = \\frac{4x^2}{2} = 2x^2\\).\nThe antiderivative of \\(-5\\) (or \\(-5x^0\\)) is \\(-5 \\cdot \\frac{x^{0+1}}{0+1} = -5x\\).\n\nCombine the terms and add the constant of integration C: \\[ \\int (3x^2 + 4x - 5) dx = x^3 + 2x^2 - 5x + C \\]\n\nAnswer: \\(F(x) = x^3 + 2x^2 - 5x + C\\).\n\n\n\n5.2. Calculate a Definite Integral\nQuestion: Evaluate the definite integral \\(\\int_{1}^{3} (6x^2) dx\\).\n\n\nClick to see the solution\n\n\nFind the antiderivative of \\(6x^2\\): \\[ F(x) = 6 \\cdot \\frac{x^3}{3} = 2x^3 \\] (We can ignore the + C for definite integrals as it will cancel out).\nApply the Fundamental Theorem of Calculus, \\(F(b) - F(a)\\): \\[ \\int_{1}^{3} (6x^2) dx = F(3) - F(1) \\] \\[ = (2 \\cdot 3^3) - (2 \\cdot 1^3) \\] \\[ = (2 \\cdot 27) - (2 \\cdot 1) = 54 - 2 = 52 \\]\n\nAnswer: 52.\n\n\n\n5.3. Distance from Velocity\nQuestion: An object’s velocity is given by \\(v(t) = 2t + 1\\) m/s. What is the total distance it travels between \\(t=2\\) and \\(t=4\\) seconds?\n\n\nClick to see the solution\n\n\nSet up the definite integral for distance: \\[ \\text{Distance} = \\int_{2}^{4} (2t + 1) dt \\]\nFind the antiderivative of \\(v(t)\\): \\[ s(t) = \\int (2t + 1) dt = 2 \\cdot \\frac{t^2}{2} + t = t^2 + t \\]\nEvaluate \\(s(4) - s(2)\\): \\[ s(4) = 4^2 + 4 = 16 + 4 = 20 \\] \\[ s(2) = 2^2 + 2 = 4 + 2 = 6 \\] \\[ s(4) - s(2) = 20 - 6 = 14 \\]\n\nAnswer: The object travels 14 meters.\n\n\n\n5.4. Integral with Negative Area\nQuestion: Calculate the signed area under the curve \\(y = 2x - 6\\) from \\(x=0\\) to \\(x=3\\).\n\n\nClick to see the solution\n\n\nSet up the definite integral: \\[ \\int_{0}^{3} (2x - 6) dx \\]\nFind the antiderivative: \\[ F(x) = \\int (2x - 6) dx = x^2 - 6x \\]\nEvaluate \\(F(3) - F(0)\\): \\[ F(3) = 3^2 - 6(3) = 9 - 18 = -9 \\] \\[ F(0) = 0^2 - 6(0) = 0 \\] \\[ F(3) - F(0) = -9 - 0 = -9 \\]\n\nAnswer: The signed area is -9. This is because the entire area is below the x-axis in this interval.\n\n\n\n5.5. FTC with a Variable Bound\nQuestion: Find the derivative of the function \\(g(x) = \\int_{1}^{x} (\\cos(t)) dt\\).\n\n\nClick to see the solution\n\n\nRecall the Fundamental Theorem of Calculus (Part 1): \\[ \\frac{d}{dx} \\int_{a}^{x} f(t) dt = f(x) \\]\nIdentify \\(f(t)\\) in the integral: Here, \\(f(t) = \\cos(t)\\).\nApply the theorem: The derivative of the integral is simply the function inside, with the variable changed from \\(t\\) to \\(x\\). \\[ g'(x) = \\cos(x) \\]\n\nAnswer: \\(g'(x) = \\cos(x)\\).\n\n\n\n5.6. Finding the Antiderivative with an Initial Condition\nQuestion: Given \\(F'(x) = 4x^3 + 2x\\) and \\(F(1) = 10\\), find the function \\(F(x)\\).\n\n\nClick to see the solution\n\n\nFind the indefinite integral (general antiderivative): \\[ F(x) = \\int (4x^3 + 2x) dx = 4 \\cdot \\frac{x^4}{4} + 2 \\cdot \\frac{x^2}{2} + C \\] \\[ F(x) = x^4 + x^2 + C \\]\nUse the initial condition \\(F(1) = 10\\) to solve for C: \\[ 10 = (1)^4 + (1)^2 + C \\] \\[ 10 = 1 + 1 + C \\] \\[ 10 = 2 + C \\] \\[ C = 8 \\]\nWrite the specific antiderivative: \\[ F(x) = x^4 + x^2 + 8 \\]\n\nAnswer: \\(F(x) = x^4 + x^2 + 8\\).\n\n\n\n5.7. Area Between Two Points on a Parabola\nQuestion: What is the area under the parabola \\(y = x^2\\) between \\(x=-1\\) and \\(x=2\\)?\n\n\nClick to see the solution\n\n\n\nSet up the integral: The function is positive on this interval, so the integral will give the geometric area. \\[ \\text{Area} = \\int_{-1}^{2} x^2 dx \\]\nFind the antiderivative of \\(x^2\\): \\[ F(x) = \\frac{x^3}{3} \\]\nEvaluate \\(F(2) - F(-1)\\): \\[ F(2) = \\frac{2^3}{3} = \\frac{8}{3} \\] \\[ F(-1) = \\frac{(-1)^3}{3} = \\frac{-1}{3} \\] \\[ F(2) - F(-1) = \\frac{8}{3} - \\left(-\\frac{1}{3}\\right) = \\frac{8}{3} + \\frac{1}{3} = \\frac{9}{3} = 3 \\]\n\nAnswer: The area is 3.",
    "crumbs": [
      "Essence of calculus",
      "8. Integrals, Antiderivatives, Fundamental Theorem of Calculus"
    ]
  },
  {
    "objectID": "Analytical Geometry and Linear Algebra I/lec_3.html",
    "href": "Analytical Geometry and Linear Algebra I/lec_3.html",
    "title": "3. Matrices, Determinants, Vector Cross Product, and Triple Products",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 Introduction to Matrices\nA matrix is a rectangular grid of numbers or expressions arranged in rows and columns. It serves as a powerful tool for organizing data and representing systems of linear equations or transformations. A matrix is denoted by a capital letter (e.g., \\(A\\)), and its individual entries are called elements.\nThe dimensions of a matrix are expressed as m x n, where m is the number of rows and n is the number of columns. An element at the intersection of the i-th row and j-th column is denoted by \\(a_{ij}\\).\nFor example, a 2x3 matrix A is written as: \\[ A = \\begin{pmatrix} a_{11} & a_{12} & a_{13} \\\\ a_{21} & a_{22} & a_{23} \\end{pmatrix} \\]\n\n\n1.2 Types of Matrices\nMatrices with specific structures and properties are given special names:\n\nSquare Matrix: A matrix where the number of rows equals the number of columns (m = n). These are the only matrices that have determinants and inverses.\nIdentity Matrix (\\(I\\)): A square matrix with ones on the main diagonal (top-left to bottom-right) and zeros everywhere else. It is the matrix equivalent of the number 1; multiplying a matrix by the identity matrix leaves it unchanged (\\(AI = IA = A\\)).\nZero Matrix: A matrix where every element is zero.\nDiagonal Matrix: A square matrix where all elements not on the main diagonal are zero.\nSymmetric Matrix: A square matrix that is unchanged by transposition (\\(A = A^T\\)). This means that for any i and j, the element \\(a_{ij}\\) is equal to \\(a_{ji}\\).\nTriangular Matrix: A square matrix where all elements are zero either above or below the main diagonal. If the elements below the diagonal are zero, it is an upper triangular matrix. If the elements above are zero, it is a lower triangular matrix.\nHermitian Matrix: An extension of symmetric matrices for complex numbers. A matrix is Hermitian if it is equal to its own conjugate transpose (taking the transpose and then the complex conjugate of each element).\n\n\n\n1.3 Basic Matrix Operations\n\nAddition and Subtraction: These operations are only defined for matrices of the same dimensions. The operation is performed element-wise, meaning the corresponding elements of the matrices are added or subtracted. For \\(C = A \\pm B\\), the elements are \\(c_{ij} = a_{ij} \\pm b_{ij}\\).\nScalar Multiplication: To multiply a matrix by a scalar (a single number), you multiply every element in the matrix by that scalar. For \\(B = \\lambda A\\), the elements are \\(b_{ij} = \\lambda a_{ij}\\).\nTranspose (\\(A^T\\)): The transpose of a matrix is found by interchanging its rows and columns. The first row becomes the first column, the second row becomes the second column, and so on. If A is an m x n matrix, \\(A^T\\) is an n x m matrix. A key property is that the transpose of a product reverses the order: \\((AB)^T = B^T A^T\\).\nTrace (\\(tr(A)\\)): The trace is defined only for a square matrix and is the sum of the elements on its main diagonal. A crucial property is its cyclic invariance under multiplication: \\(tr(ABC) = tr(BCA) = tr(CAB)\\).\n\n\n\n1.4 Matrix Multiplication\nMatrix multiplication is a more complex operation. For the product \\(AB\\) to be defined, the number of columns in matrix A must equal the number of rows in matrix B. If A is an m x n matrix and B is an n x p matrix, the resulting product C will be an m x p matrix.\nThe element \\(c_{ij}\\) in the resulting matrix is the dot product of the i-th row of A and the j-th column of B.  There are two key ways to conceptualize matrix-vector multiplication (\\(Ax\\)):\n\nDot Product View: Each element of the resulting vector is the dot product of a corresponding row of matrix A with the vector x.\nLinear Combination View: The resulting vector is a weighted sum (a linear combination) of the columns of matrix A, where the weights are the elements of vector x.\n\nA fundamental property of matrix multiplication is that it is not commutative: in general, \\(AB \\neq BA\\). The order matters greatly. Think of it like real-world actions: putting on socks then shoes is very different from putting on shoes then socks. However, matrix multiplication is associative (\\((AB)C = A(BC)\\)) and distributive (\\(A(B+C) = AB + AC\\)).\n\n\n1.5 The Determinant of a Matrix\nThe determinant, denoted \\(det(A)\\) or \\(|A|\\), is a unique scalar value that can only be calculated from a square matrix. It provides crucial information:\n\nInvertibility: A matrix has an inverse if and only if its determinant is non-zero. A matrix with a zero determinant is called a singular matrix.\nGeometric Meaning: The determinant represents the scaling factor of the linear transformation described by the matrix. For a 2x2 matrix, its absolute value tells you how much area is scaled. For a 3x3 matrix, it’s the scaling factor for volume. A negative determinant indicates that the transformation also involves a reflection (an “inversion” of orientation).\n\nKey properties of determinants include:\n\n\\(det(AB) = det(A)det(B)\\)\n\\(det(A^T) = det(A)\\)\n\\(det(A^{-1}) = 1 / det(A)\\)\nFor an n x n matrix, \\(det(kA) = k^n det(A)\\)\n\n\n\n1.6 The Matrix Inverse\nThe inverse of a square matrix A, written as \\(A^{-1}\\), is the matrix that “undoes” the operation of A. When multiplied together, they yield the identity matrix: \\(AA^{-1} = A^{-1}A = I\\). This is analogous to how a number multiplied by its reciprocal equals 1 (e.g., \\(5 \\times \\frac{1}{5} = 1\\)). An inverse exists only if the matrix is non-singular (\\(det(A) ≠ 0\\)).\nThe adjugate method is a common way to find the inverse of a 3x3 matrix:\n\nMatrix of Minors (\\(M\\)): For each element \\(a_{ij}\\), its minor \\(M_{ij}\\) is the determinant of the 2x2 sub-matrix that remains after deleting the i-th row and j-th column.\nMatrix of Cofactors (\\(C\\)): The cofactor \\(C_{ij}\\) is the minor with a sign applied, determined by a “checkerboard” pattern. The formula is \\(C_{ij} = (-1)^{i+j}M_{ij}\\).\nAdjugate Matrix (\\(adj(A)\\)): This is the transpose of the cofactor matrix, \\(adj(A)\\) = \\(C^T\\).\nCalculate Inverse: The inverse is found by multiplying the adjugate matrix by the reciprocal of the determinant: \\(A^{-1} = \\frac{1}{\\det(A)}\\text{adj}(A)\\).\n\n\n\n1.7 The Vector Cross Product\nThe cross product is an operation between two vectors in 3D space, written as a x b. The result is a new vector that is geometrically perpendicular (orthogonal) to both of the original vectors.\nThe direction of the resulting vector is given by the right-hand rule: point the fingers of your right hand in the direction of vector a, then curl them toward vector b. Your thumb will point in the direction of a x b.  Key properties of the cross product:\n\nAnti-commutative: Reversing the order flips the direction of the resulting vector: a x b = - (b x a).\nParallel Vectors: The cross product of two parallel vectors is the zero vector (0).\nMagnitude: The magnitude, \\(|| \\mathbf{a} \\times \\mathbf{b} ||\\), equals the area of the parallelogram formed by vectors a and b. The area of the triangle with these sides is half this value.\n\n\n\n1.8 Triple Products\nTriple products combine dot and cross products for three vectors.\n\nScalar Triple Product: This product, \\(\\mathbf{a} \\cdot (\\mathbf{b} \\times \\mathbf{c})\\), results in a scalar. Its absolute value represents the volume of the parallelepiped with sides a, b, and c. If the result is 0, the vectors are coplanar (they all lie in the same plane), meaning the parallelepiped is flat and has no volume. The operation is cyclically symmetric: \\(\\mathbf{a} \\cdot (\\mathbf{b} \\times \\mathbf{c}) = \\mathbf{b} \\cdot (\\mathbf{c} \\times \\mathbf{a}) = \\mathbf{c} \\cdot (\\mathbf{a} \\times \\mathbf{b})\\). \nVector Triple Product: This product, \\(\\mathbf{a} \\times (\\mathbf{b} \\times \\mathbf{c})\\), results in a vector. The resulting vector lies in the same plane as b and c. It can be simplified with the “BAC-CAB” identity: \\(\\mathbf{a} \\times (\\mathbf{b} \\times \\mathbf{c}) = (\\mathbf{a} \\cdot \\mathbf{c})\\mathbf{b} - (\\mathbf{a} \\cdot \\mathbf{b})\\mathbf{c}\\).\n\nAnother key identity is the Jacobi identity, which shows a cyclic relationship between triple products: \\[ \\mathbf{a} \\times (\\mathbf{b} \\times \\mathbf{c}) + \\mathbf{b} \\times (\\mathbf{c} \\times \\mathbf{a}) + \\mathbf{c} \\times (\\mathbf{a} \\times \\mathbf{b}) = \\mathbf{0} \\]\n\n\n\n2. Definitions\n\nMatrix: A rectangular array of numbers arranged in rows and columns.\nScalar: A single numerical quantity that scales a vector or matrix.\nSquare Matrix: A matrix with an equal number of rows and columns.\nIdentity Matrix (\\(I\\)): A square matrix with ones on the main diagonal and zeros elsewhere, which acts as the multiplicative identity.\nDeterminant (\\(det(A)\\)): A scalar value computed from a square matrix that determines its invertibility and geometric scaling properties.\nSingular Matrix: A square matrix whose determinant is zero, meaning it has no inverse.\nMatrix Inverse (\\(A^{-1}\\)): For a non-singular square matrix A, it is the unique matrix that yields the identity matrix when multiplied with A.\nTranspose (\\(A^T\\)): A matrix formed by interchanging the rows and columns of the original matrix.\nTrace (\\(tr(A)\\)): The sum of the elements on the main diagonal of a square matrix.\nAdjugate Matrix (\\(adj(A)\\)): The transpose of the matrix of cofactors.\nCoplanar Vectors: A set of vectors that all lie within the same two-dimensional plane.\nVector Cross Product (\\(\\mathbf{a} \\times \\mathbf{b}\\)): A binary operation on two vectors in 3D space, resulting in a vector perpendicular to both.\nScalar Triple Product (\\(\\mathbf{a} \\cdot (\\mathbf{b} \\times \\mathbf{c})\\)): An operation whose absolute value is the volume of the parallelepiped defined by three vectors.\nVector Triple Product (\\(\\mathbf{a} \\times (\\mathbf{b} \\times \\mathbf{c})\\)): An operation involving three vectors that results in a new vector coplanar with the second and third vectors.\n\n\n\n3. Formulas\n\nMatrix Multiplication Transpose: \\((AB)^T = B^T A^T\\).\nMatrix Multiplication Inverse: \\((AB)^{-1} = B^{-1} A^{-1}\\).\nTrace Cyclic Invariance: \\(tr(ABC) = tr(BCA) = tr(CAB)\\).\nDeterminant of a Product: \\(det(AB) = det(A)det(B)\\).\nDeterminant of a Transpose: \\(det(A^T) = det(A)\\).\nDeterminant of an Inverse: \\(det(A^{-1}) = 1 / det(A)\\).\nDeterminant of Scalar Multiple: For an n x n matrix, \\(det(kA) = k^n det(A)\\).\n2x2 Determinant: For \\(A = \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}\\), \\(\\det(A) = ad - bc\\).\nGeneral Matrix Inverse: \\(A^{-1} = \\frac{1}{\\det(A)} \\text{adj}(A)\\).\nCross Product (Determinant Form): For \\(\\mathbf{a} = \\langle a_1, a_2, a_3 \\rangle\\) and \\(\\mathbf{b} = \\langle b_1, b_2, b_3 \\rangle\\), \\[ \\mathbf{a} \\times \\mathbf{b} = \\det \\begin{pmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\ a_1 & a_2 & a_3 \\\\ b_1 & b_2 & b_3 \\end{pmatrix} \\]\nScalar Triple Product (Determinant Form): \\[ \\mathbf{a} \\cdot (\\mathbf{b} \\times \\mathbf{c}) = \\det \\begin{pmatrix} a_1 & a_2 & a_3 \\\\ b_1 & b_2 & b_3 \\\\ c_1 & c_2 & c_3 \\end{pmatrix} \\]\nVector Triple Product (BAC-CAB): \\(\\mathbf{a} \\times (\\mathbf{b} \\times \\mathbf{c}) = (\\mathbf{a} \\cdot \\mathbf{c})\\mathbf{b} - (\\mathbf{a} \\cdot \\mathbf{b})\\mathbf{c}\\).\nArea of Parallelogram: Area \\(= || \\mathbf{a} \\times \\mathbf{b} ||\\).\nArea of Triangle: Area \\(= \\frac{1}{2} || \\mathbf{a} \\times \\mathbf{b} ||\\).\nVolume of Parallelepiped: Volume \\(= |\\mathbf{a} \\cdot (\\mathbf{b} \\times \\mathbf{c})|\\).\n\n\n\n4. Mistakes\n\nAssuming Matrix Multiplication is Commutative: Always remember that \\(AB\\) is generally not equal to \\(BA\\). Why it’s wrong: The dot product of rows with columns is order-dependent. Swapping the matrices changes which rows are multiplied by which columns, leading to a completely different operation and result.\nIncorrectly Applying Determinant Properties: Assuming that \\(det(A + B) = det(A) + det(B)\\). Why it’s wrong: The determinant does not distribute over addition. This property simply does not hold true. The multiplicative property \\(det(AB) = det(A)det(B)\\) is valid, but an additive equivalent does not exist.\nForgetting the Sign Pattern in Cofactor Expansion: When calculating a determinant or a matrix of cofactors, it is easy to forget the \\((-1)^{i+j}\\) “checkerboard” pattern of signs. Why it’s wrong: These alternating signs are a fundamental part of the definition of the determinant. Omitting them will almost certainly lead to an incorrect value.\nMultiplying Matrices with Incompatible Dimensions: Trying to multiply an m x n matrix by a p x q matrix where n ≠ p. Why it’s wrong: Matrix multiplication is defined by the dot product of rows from the first matrix and columns from the second. The length of these rows (n) must match the length of these columns (p) for the dot product to be a valid operation.\nConfusing the Adjugate with the Cofactor Matrix: Using the cofactor matrix directly to find the inverse instead of its transpose (the adjugate). Why it’s wrong: The formula for the inverse explicitly requires the adjugate, \\(adj(A)\\), which is defined as the transpose of the cofactor matrix (\\(C^T\\)). Using C directly will produce an incorrect inverse.\nMisremembering the Vector Triple Product Rule: Switching the terms in the BAC-CAB rule, for example as \\((a \\cdot b)c - (a \\cdot c)b\\). Why it’s wrong: The rule is precise. The positive term is formed by the dot product of the “outer” vectors (\\(\\mathbf{a}, \\mathbf{c}\\)) scaling the “middle” vector (\\(\\mathbf{b}\\)). Getting the order or signs wrong changes the resulting vector completely.\n\n\n\n5. Examples\n\n5.1. Matrix Multiplication\nQuestion: Given matrices \\(A = \\begin{pmatrix} 2 & 1 & 0 \\\\ -1 & 3 & 4 \\end{pmatrix}\\) and \\(B = \\begin{pmatrix} 5 & -2 \\\\ 1 & 1 \\\\ 0 & -3 \\end{pmatrix}\\), compute the product \\(AB\\).\n\n\nClick to see the solution\n\n\nCheck dimensions: A is a 2x3 matrix and B is a 3x2 matrix. The inner dimensions match (3 and 3), so multiplication is possible. The resulting matrix will be 2x2.\nCalculate the element in the 1st row, 1st column: Take the dot product of the first row of A and the first column of B. \\[ (2)(5) + (1)(1) + (0)(0) = 10 + 1 + 0 = 11 \\]\nCalculate the element in the 1st row, 2nd column: Take the dot product of the first row of A and the second column of B. \\[ (2)(-2) + (1)(1) + (0)(-3) = -4 + 1 + 0 = -3 \\]\nCalculate the element in the 2nd row, 1st column: Take the dot product of the second row of A and the first column of B. \\[ (-1)(5) + (3)(1) + (4)(0) = -5 + 3 + 0 = -2 \\]\nCalculate the element in the 2nd row, 2nd column: Take the dot product of the second row of A and the second column of B. \\[ (-1)(-2) + (3)(1) + (4)(-3) = 2 + 3 - 12 = -7 \\]\nAssemble the final matrix: \\[ \\begin{pmatrix} 11 & -3 \\\\ -2 & -7 \\end{pmatrix} \\]\n\nAnswer: \\(AB = \\begin{pmatrix} 11 & -3 \\\\ -2 & -7 \\end{pmatrix}\\)\n\n\n\n5.2. Determinant of a 3x3 Matrix\nQuestion: Find the determinant of the matrix \\(A = \\begin{pmatrix} 1 & 2 & 3 \\\\ 0 & 1 & 4 \\\\ 5 & 6 & 0 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nUse cofactor expansion along the first row. The formula is \\(a_{11}C_{11} + a_{12}C_{12} + a_{13}C_{13}\\).\nCalculate the first term (\\(a_{11}C_{11}\\)): \\[ 1 \\cdot (-1)^{1+1} \\det \\begin{pmatrix} 1 & 4 \\\\ 6 & 0 \\end{pmatrix} = 1 \\cdot ((1)(0) - (4)(6)) = 1 \\cdot (-24) = -24 \\]\nCalculate the second term (\\(a_{12}C_{12}\\)): \\[ 2 \\cdot (-1)^{1+2} \\det \\begin{pmatrix} 0 & 4 \\\\ 5 & 0 \\end{pmatrix} = 2 \\cdot (-1) \\cdot ((0)(0) - (4)(5)) = -2 \\cdot (-20) = 40 \\]\nCalculate the third term (\\(a_{13}C_{13}\\)): \\[ 3 \\cdot (-1)^{1+3} \\det \\begin{pmatrix} 0 & 1 \\\\ 5 & 6 \\end{pmatrix} = 3 \\cdot (1) \\cdot ((0)(6) - (1)(5)) = 3 \\cdot (-5) = -15 \\]\nSum the terms: \\[ -24 + 40 - 15 = 1 \\]\n\nAnswer: \\(\\det(A) = 1\\)\n\n\n\n5.3. Inverse of a 3x3 Matrix\nQuestion: Find the inverse of the matrix \\(A = \\begin{pmatrix} 1 & 2 & 3 \\\\ 0 & 1 & 4 \\\\ 5 & 6 & 0 \\end{pmatrix}\\).\n\n\nClick to see the solution\n\n\nFind the determinant: From the previous example, we know \\(\\det(A) = 1\\). Since it’s not zero, the inverse exists.\nFind the matrix of minors: Calculate the determinant of the 2x2 sub-matrix for each element. \\[ M = \\begin{pmatrix} \\det\\begin{pmatrix}1&4\\\\6&0\\end{pmatrix} & \\det\\begin{pmatrix}0&4\\\\5&0\\end{pmatrix} & \\det\\begin{pmatrix}0&1\\\\5&6\\end{pmatrix} \\\\ \\det\\begin{pmatrix}2&3\\\\6&0\\end{pmatrix} & \\det\\begin{pmatrix}1&3\\\\5&0\\end{pmatrix} & \\det\\begin{pmatrix}1&2\\\\5&6\\end{pmatrix} \\\\ \\det\\begin{pmatrix}2&3\\\\1&4\\end{pmatrix} & \\det\\begin{pmatrix}1&3\\\\0&4\\end{pmatrix} & \\det\\begin{pmatrix}1&2\\\\0&1\\end{pmatrix} \\end{pmatrix} = \\begin{pmatrix} -24 & -20 & -5 \\\\ -18 & -15 & -4 \\\\ 5 & 4 & 1 \\end{pmatrix} \\]\nFind the matrix of cofactors by applying the checkerboard pattern of signs: \\[ C = \\begin{pmatrix} -24 & 20 & -5 \\\\ 18 & -15 & 4 \\\\ 5 & -4 & 1 \\end{pmatrix} \\]\nFind the adjugate matrix by transposing the cofactor matrix: \\[ \\text{adj}(A) = C^T = \\begin{pmatrix} -24 & 18 & 5 \\\\ 20 & -15 & -4 \\\\ -5 & 4 & 1 \\end{pmatrix} \\]\nCalculate the inverse using the formula \\(A^{-1} = \\frac{1}{\\det(A)}\\text{adj}(A)\\): \\[ A^{-1} = \\frac{1}{1} \\begin{pmatrix} -24 & 18 & 5 \\\\ 20 & -15 & -4 \\\\ -5 & 4 & 1 \\end{pmatrix} \\]\n\nAnswer: \\(A^{-1} = \\begin{pmatrix} -24 & 18 & 5 \\\\ 20 & -15 & -4 \\\\ -5 & 4 & 1 \\end{pmatrix}\\)\n\n\n\n5.4. Area of a Triangle in 3D\nQuestion: Find the area of the triangle with vertices at points A(1, 2, 0), B(3, 0, -3), and C(5, 2, 6).\n\n\nClick to see the solution\n\n\nDefine two vectors forming the sides of the triangle, originating from the same vertex: \\[ \\vec{AB} = B - A = \\langle 3-1, 0-2, -3-0 \\rangle = \\langle 2, -2, -3 \\rangle \\] \\[ \\vec{AC} = C - A = \\langle 5-1, 2-2, 6-0 \\rangle = \\langle 4, 0, 6 \\rangle \\]\nCompute the cross product \\(\\vec{AB} \\times \\vec{AC}\\). The magnitude of this vector will be the area of the parallelogram formed by \\(\\vec{AB}\\) and \\(\\vec{AC}\\). \\[ \\vec{AB} \\times \\vec{AC} = \\det \\begin{pmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\ 2 & -2 & -3 \\\\ 4 & 0 & 6 \\end{pmatrix} \\] \\[ = \\mathbf{i}((-2)(6) - (-3)(0)) - \\mathbf{j}((2)(6) - (-3)(4)) + \\mathbf{k}((2)(0) - (-2)(4)) \\] \\[ = \\mathbf{i}(-12 - 0) - \\mathbf{j}(12 + 12) + \\mathbf{k}(0 + 8) \\] \\[ = \\langle -12, -24, 8 \\rangle \\]\nFind the magnitude of the cross product vector: \\[ || \\langle -12, -24, 8 \\rangle || = \\sqrt{(-12)^2 + (-24)^2 + 8^2} = \\sqrt{144 + 576 + 64} = \\sqrt{784} = 28 \\]\nCalculate the triangle’s area, which is exactly half the area of the parallelogram: \\[ \\text{Area} = \\frac{1}{2} \\times 28 = 14 \\]\n\nAnswer: The area of the triangle is 14 square units.\n\n\n\n5.5. Volume of a Parallelepiped\nQuestion: Compute the volume of the parallelepiped formed by the vectors \\(\\mathbf{a} = \\langle 1, 1, 0 \\rangle\\), \\(\\mathbf{b} = \\langle 0, 1, 1 \\rangle\\), and \\(\\mathbf{c} = \\langle 1, 0, 1 \\rangle\\).\n\n\nClick to see the solution\n\n\nSet up the scalar triple product as the determinant of the matrix formed by the vectors. The absolute value of this determinant gives the volume. \\[ V = |\\mathbf{a} \\cdot (\\mathbf{b} \\times \\mathbf{c})| = \\left| \\det \\begin{pmatrix} 1 & 1 & 0 \\\\ 0 & 1 & 1 \\\\ 1 & 0 & 1 \\end{pmatrix} \\right| \\]\nCalculate the determinant using cofactor expansion along the first row: \\[ 1 \\det \\begin{pmatrix} 1 & 1 \\\\ 0 & 1 \\end{pmatrix} - 1 \\det \\begin{pmatrix} 0 & 1 \\\\ 1 & 1 \\end{pmatrix} + 0 \\det \\begin{pmatrix} 0 & 1 \\\\ 1 & 0 \\end{pmatrix} \\] \\[ = 1((1)(1) - (1)(0)) - 1((0)(1) - (1)(1)) + 0 \\] \\[ = 1(1) - 1(-1) = 1 + 1 = 2 \\]\nTake the absolute value: \\[ V = |2| = 2 \\]\n\nAnswer: The volume of the parallelepiped is 2 cubic units.\n\n\n\n5.6. Vector Triple Product\nQuestion: Let \\(\\mathbf{a} = \\langle 1, 2, 0 \\rangle\\), \\(\\mathbf{b} = \\langle 3, 0, 1 \\rangle\\), and \\(\\mathbf{c} = \\langle -1, 1, 4 \\rangle\\). Verify the identity \\(\\mathbf{a} \\times (\\mathbf{b} \\times \\mathbf{c}) = (\\mathbf{a} \\cdot \\mathbf{c})\\mathbf{b} - (\\mathbf{a} \\cdot \\mathbf{b})\\mathbf{c}\\).\n\n\nClick to see the solution\n\n\nCalculate the left side: \\(\\mathbf{a} \\times (\\mathbf{b} \\times \\mathbf{c})\\) First, find the inner cross product \\(\\mathbf{b} \\times \\mathbf{c}\\): \\[ \\mathbf{b} \\times \\mathbf{c} = \\det \\begin{pmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\ 3 & 0 & 1 \\\\ -1 & 1 & 4 \\end{pmatrix} = \\mathbf{i}(0-1) - \\mathbf{j}(12 - (-1)) + \\mathbf{k}(3-0) = \\langle -1, -13, 3 \\rangle \\] Next, find the outer cross product \\(\\mathbf{a} \\times (\\text{result})\\): \\[ \\mathbf{a} \\times \\langle -1, -13, 3 \\rangle = \\det \\begin{pmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\ 1 & 2 & 0 \\\\ -1 & -13 & 3 \\end{pmatrix} = \\mathbf{i}(6-0) - \\mathbf{j}(3-0) + \\mathbf{k}(-13 - (-2)) = \\langle 6, -3, -11 \\rangle \\]\nCalculate the right side: \\((\\mathbf{a} \\cdot \\mathbf{c})\\mathbf{b} - (\\mathbf{a} \\cdot \\mathbf{b})\\mathbf{c}\\) First, find the required dot products: \\[ \\mathbf{a} \\cdot \\mathbf{c} = (1)(-1) + (2)(1) + (0)(4) = -1 + 2 = 1 \\] \\[ \\mathbf{a} \\cdot \\mathbf{b} = (1)(3) + (2)(0) + (0)(1) = 3 \\] Next, use these scalars to weigh the vectors: \\[ (1)\\mathbf{b} - (3)\\mathbf{c} = 1\\langle 3, 0, 1 \\rangle - 3\\langle -1, 1, 4 \\rangle \\] \\[ = \\langle 3, 0, 1 \\rangle - \\langle -3, 3, 12 \\rangle = \\langle 3 - (-3), 0 - 3, 1 - 12 \\rangle = \\langle 6, -3, -11 \\rangle \\]\nCompare the results: Both sides evaluate to the same vector, \\(\\langle 6, -3, -11 \\rangle\\).\n\nAnswer: The identity is verified, as both sides of the equation result in the vector \\(\\langle 6, -3, -11 \\rangle\\).\n\n\n\n5.7. Jacobi Identity\nQuestion: Prove the Jacobi identity \\(\\mathbf{a} \\times (\\mathbf{b} \\times \\mathbf{c}) + \\mathbf{b} \\times (\\mathbf{c} \\times \\mathbf{a}) + \\mathbf{c} \\times (\\mathbf{a} \\times \\mathbf{b}) = \\mathbf{0}\\) for the standard basis vectors \\(\\mathbf{a} = \\mathbf{i} = \\langle 1, 0, 0 \\rangle\\), \\(\\mathbf{b} = \\mathbf{j} = \\langle 0, 1, 0 \\rangle\\), and \\(\\mathbf{c} = \\mathbf{k} = \\langle 0, 0, 1 \\rangle\\).\n\n\nClick to see the solution\n\n\nCalculate the first term: \\(\\mathbf{a} \\times (\\mathbf{b} \\times \\mathbf{c})\\) \\[ \\mathbf{b} \\times \\mathbf{c} = \\mathbf{j} \\times \\mathbf{k} = \\mathbf{i} = \\mathbf{a} \\] \\[ \\mathbf{a} \\times (\\mathbf{b} \\times \\mathbf{c}) = \\mathbf{a} \\times \\mathbf{a} = \\mathbf{0} \\] (The cross product of any vector with itself is the zero vector).\nCalculate the second term: \\(\\mathbf{b} \\times (\\mathbf{c} \\times \\mathbf{a})\\) \\[ \\mathbf{c} \\times \\mathbf{a} = \\mathbf{k} \\times \\mathbf{i} = \\mathbf{j} = \\mathbf{b} \\] \\[ \\mathbf{b} \\times (\\mathbf{c} \\times \\mathbf{a}) = \\mathbf{b} \\times \\mathbf{b} = \\mathbf{0} \\]\nCalculate the third term: \\(\\mathbf{c} \\times (\\mathbf{a} \\times \\mathbf{b})\\) \\[ \\mathbf{a} \\times \\mathbf{b} = \\mathbf{i} \\times \\mathbf{j} = \\mathbf{k} = \\mathbf{c} \\] \\[ \\mathbf{c} \\times (\\mathbf{a} \\times \\mathbf{b}) = \\mathbf{c} \\times \\mathbf{c} = \\mathbf{0} \\]\nSum the three resulting vectors: \\[ \\mathbf{0} + \\mathbf{0} + \\mathbf{0} = \\mathbf{0} \\]\n\nAnswer: The Jacobi identity holds, as the sum is the zero vector, \\(\\mathbf{0}\\).",
    "crumbs": [
      "Analytical Geometry and Linear Algebra I",
      "3. Matrices, Determinants, Vector Cross Product, and Triple Products"
    ]
  },
  {
    "objectID": "Academic Writing and Argumentation/lec_4.html",
    "href": "Academic Writing and Argumentation/lec_4.html",
    "title": "4. Paragraphs, Structure, Transitions",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 Defining the Paragraph\nA paragraph is the fundamental basic building block of any longer text. It is defined as a group of sentences focused entirely on a single subject. The core principle of effective writing dictates that one paragraph should contain only one idea. If a new idea or subtopic emerges, a new paragraph must be started.\n\n\n\n1.2 Characteristics of an Effective Paragraph\nAn effective paragraph must possess five critical characteristics:\n\nUnified: It focuses exclusively on one main idea (the controlling idea). All sentences must directly develop this central idea without deviation.\nLogical: The sentences must flow smoothly, establishing clear relationships between concepts. This is often achieved through the known-new contract.\nWell-structured: It follows a recognized format, typically including a head, a body, and a conclusion.\nClear: The language and ideas are immediately understandable to the reader.\nConcise: It is efficient, using only necessary words and sentences to fully develop the idea.\n\n\n\n1.3 Paragraph Structure: The Burger Model\nAn effective paragraph is usually organized into three distinct parts, often visualized using the burger analogy:\n\nParagraph Head (Top Bun): Typically one or two sentences that introduce the topic and the writer’s stance. This is the topic sentence.\nSupporting Sentences (Meat and Fillings): These form the body of the paragraph. They expand, explain, and prove the main idea stated in the head. This section generally makes up two-thirds of the paragraph’s word count and requires at least three supporting points.\nConcluding Sentence (Bottom Bun): The final sentence that wraps up the discussion of that single idea, often rephrasing the head or summarizing the supporting points.\n\n\n\n\n1.4 The Paragraph Head (Topic Sentence)\nThe Paragraph Head (or topic sentence) is crucial as it states the primary purpose of the paragraph and often provides a smooth transition from the preceding paragraph.\nA well-written paragraph head is composed of two elements:\n\nThe Topic: What the paragraph is generally about.\nThe Controlling Idea: What the writer intends to say or prove about that topic. This limits the scope and dictates what the supporting sentences must discuss.\n\nFor example, if the topic is “Video games,” the controlling idea might be that “they are beneficial for several reasons.” The resulting topic sentence would be: “Video games are beneficial for social, psychological, and physical reasons.”\n\n\n1.5 Writing Supporting Sentences\nSupporting sentences are the evidence and explanation that develop the controlling idea. They usually follow a two-part approach:\n1. Explanation The writer must explain the controlling idea multiple times (usually three) using different approaches, such as providing:\n\nExamples: Specific instances that illustrate the point.\nReasons: Causes or justifications for the main idea.\nSteps: If the paragraph describes a process.\n\n2. Details Each explanation must be grounded in specific details to provide credibility and depth. Details can take several forms:\n\nFacts: Information generally accepted as truth.\nAnecdotes: Short, relevant stories or incidents based on experience.\nStatistics: Numerical data, often derived from surveys or studies.\nExpert’s Opinion: References to statements or theories from knowledgeable authorities.\n\n\n\n\n1.6 The Concluding Sentence\nThe concluding sentence is the last sentence in the paragraph and serves to signal the end of the discussion on that particular topic.\nCrucially, it should never introduce new details or ideas.\nThere are two main strategies for writing an effective concluding sentence:\n\nRephrasing: Repeating the controlling idea found in the paragraph head, but using entirely different language and syntax.\nSummarizing: Synthesizing the main points made in the supporting sentences to create a unified final statement.\n\n\n\n1.7 Ensuring Logical Flow: Transitions\nFor sentences to flow smoothly, they must connect logically. This is managed through two main techniques: the known-new contract and the use of transitions.\n\n1.7.1 The Known-New Contract (Topic and Stress)\nTo maintain logical flow (cohesion), sentences should adhere to the known-new contract:\n\nBeginning of the sentence (Topic/Known): Start with information the reader already possesses (i.e., information carried over from the previous sentence’s ending).\nEnd of the sentence (Stress/New): Place the most unfamiliar, important, or new information at the end of the sentence.\n\nThis creates a chain effect, where the new information (stress) of one sentence becomes the known information (topic) of the next.\n\n\n1.7.2 Direct Transitions\nDirect transitions are specific set phrases or words used to indicate the logical relationship between two sentences or ideas. They help guide the reader through the argument.\n\nOrdering: First, Second, Finally, Primarily.\nAdding: Furthermore, Moreover, In addition.\nCausation: Therefore, Consequently, As a result.\nContrast: However, Nevertheless, On the other hand.\n\n\n\n1.7.3 Indirect Transitions (Links)\nIndirect transitions provide cohesion by linking ideas or words subtly throughout the paragraph:\n\nWord-links: Simple repetition of key words or phrases (e.g., repeating “Michael Schlotzky” or “student”).\nIdea-links: Using synonyms, pronouns, or descriptive phrases to refer back to previously mentioned people, objects, or concepts (e.g., referring to “Michael Schlotzky” as “the young man” or “this truant”).\n\n\n\n\n\n2. Mistakes\n\nAnnouncing the topic instead of stating the main idea: A weak paragraph head often states what the paper will do (e.g., “This paper will discuss the difference between A and B”). Why it’s wrong: The topic sentence should directly state the main argument or conclusion (e.g., “A and B are different”) so the reader immediately understands the purpose of the paragraph.\nCreating a paragraph head that lacks a controlling idea: Some topic sentences state only the subject (“The difference between authorization and authentication”). Why it’s wrong: This fails to limit the scope of the paragraph, leaving the reader unsure of the argument the supporting sentences will develop.\nIncluding sentences that deviate from the main idea (lack of unification): Inserting information that is interesting but irrelevant to the controlling idea of the paragraph. Why it’s wrong: This confuses the reader, weakens the argument, and violates the fundamental rule of one paragraph, one idea.\nIntroducing new supporting details in the concluding sentence: Using the final sentence to provide a new piece of evidence, example, or fact. Why it’s wrong: The concluding sentence must summarize or rephrase existing content; new details belong in the body of the paragraph and require explanation and development.\nFailing to establish a known-new contract across sentences: Arranging sentences such that the beginning of a sentence introduces an entirely new concept unrelated to the stress of the previous sentence. Why it’s wrong: This makes the prose choppy and difficult to follow, breaking the logical chain of thought for the reader.\nUsing insufficient supporting sentences: Writing a paragraph with only one or two brief supporting sentences to prove the controlling idea. Why it’s wrong: The main idea remains underdeveloped, unsubstantiated, and unconvincing. An effective paragraph requires several well-detailed supporting sentences (at least three) to fully develop the argument.",
    "crumbs": [
      "Academic Writing and Argumentation",
      "4. Paragraphs, Structure, Transitions"
    ]
  },
  {
    "objectID": "Academic Writing and Argumentation/lec_6.html",
    "href": "Academic Writing and Argumentation/lec_6.html",
    "title": "6. Descriptive Paragraph",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 Introduction to Descriptive Paragraphs\nA descriptive paragraph is a focused piece of writing that aims to create a clear and vivid picture of a subject in the reader’s mind. Its primary goal is to describe the main features of a person, object, place, or concept using clear, specific details. Rather than telling the reader something, it shows them by appealing to their senses and intellect, allowing them to form their own mental image of the topic.\n\n\n1.2 Common Applications\nDescriptive paragraphs are a fundamental tool in technical and academic writing. They are typically used in the following scenarios:\n\nDescribing an object: Explaining the physical or logical components of a piece of hardware, a tool, or any other tangible item.\nDescribing a process: Outlining the steps or stages of a procedure, workflow, or event in a logical sequence.\nProviding a classification or typology: Grouping items into categories based on shared characteristics and describing the features of each category, as seen in the malware example.\n\n\n\n1.3 The Structure of a Descriptive Paragraph\nA well-formed descriptive paragraph follows a clear and logical structure, ensuring the reader can easily understand the information presented. \n\nParagraph Head (Topic Sentence): This is the opening sentence that introduces the main subject of the paragraph. It should be direct and engaging, clearly stating what will be described without using announcing phrases like “This paragraph will describe…” or “I am going to tell you about…”.\nBody (Features and Details): The body of the paragraph is built around the main features or characteristics of the subject. Each feature is introduced and then supported by several details. These details must consist of relevant information—facts, explanations, or examples that are essential for the reader to understand the description. For instance, when describing a computer virus, a key feature is how it spreads, and a relevant detail would be its attachment to a file that executes when opened.\nConcluding Sentence: This is the final sentence of the paragraph. It provides closure by either summarizing the main features discussed or rephrasing the paragraph head in a new way, reinforcing the paragraph’s main idea.\n\n\n\n1.4 Key Writing Tips\nTo write an effective descriptive paragraph, especially in a technical or academic context, adhere to the following guidelines:\n\nUse Neutral Language: Rely on objective, neutral words that describe the subject accurately without arousing strong emotions. The goal is to inform, not to persuade.\nStrive for Clarity: Make your description as clear and unambiguous as possible. Avoid jargon where possible, and explain it if it’s necessary.\nAdd a Title: A concise title helps frame the topic for the reader.\nEnsure Grammatical Correctness: Check that all sentences are complete, containing both a subject and a verb.\nMaintain an Effective Academic Style: Your writing should be formal, concise, and logically structured.\nProofread Diligently: Ask a peer to proofread your first draft to catch errors you might have missed.\nLearn from Mistakes: Take note of frequent errors in your writing and make a conscious effort to avoid them in the future.\n\n\n\n\n2. Definitions\n\nDescriptive Paragraph: A paragraph focused on creating a clear, detailed picture of a person, place, object, or concept in the reader’s mind.\nParagraph Head: The topic sentence that introduces the subject of the paragraph.\nFeature: A main characteristic or distinct aspect of the subject being described.\nDetail: A specific piece of relevant information, such as a fact or an explanation, that elaborates on a feature.\nConcluding Sentence: The final sentence that summarizes the main points or restates the paragraph head to provide closure.\n\n\n\n3. Mistakes\n\nAnnouncing your topic directly: Using phrases like “I will now describe the CPU.” Why it’s wrong: This is considered poor style in academic writing. The paragraph head should introduce the topic naturally without explicitly stating the author’s intent.\nUsing vague or general language: Describing something as “good” or “interesting” without providing specific details. Why it’s wrong: Descriptive writing relies on precision. The reader cannot form a clear picture from terms that are subjective and lack concrete information.\nDisorganized information: Presenting features and details in a random, illogical order. Why it’s wrong: A lack of structure confuses the reader. Information should be organized logically (e.g., from general to specific, top to bottom, or by category) to be easily understood.\nOmitting a concluding sentence: Ending the paragraph abruptly after the last detail. Why it’s wrong: The concluding sentence is crucial for signaling that the description is complete and for reinforcing the main point, leaving the reader with a sense of closure.\nIncluding irrelevant information: Adding details that do not directly support the feature being described. Why it’s wrong: Extraneous information distracts the reader and weakens the paragraph’s focus and clarity.\nRelying on emotionally charged words: Using biased or subjective language instead of neutral, objective terms. Why it’s wrong: In technical and academic writing, the goal is objective clarity, not emotional persuasion. Emotional words can undermine the credibility of the description.\n\n\n\n4. Prompt for feedback on your TSA\nEvaluate the following single-paragraph assignment for strict compliance and quality. Be blunt,\ndirect, and unsparing. Do not praise. Identify every flaw. Then provide concrete, minimal edits\nand a corrected model paragraph.\n\nStudent’s paragraph:\n[PASTE THE STUDENT’S SINGLE PARAGRAPH HERE. ONE PARAGRAPH ONLY.]\n\nEvaluation constraints and scoring:\n1) Task match and scope\n- Must be exactly one descriptive paragraph about one of: a real-world object, a process, or a\nclassification/typology. If not, say “Fail: wrong task.”\n- No tables, bullet points, or headings inside the paragraph body. If present, say “Fail: format\nviolation.”\n\n2) Paragraph head (topic + controlling idea)\n- First 1–2 sentences must state the topic and a clear controlling idea without announcing (“This\nparagraph will…”). If missing/weak, rewrite one strong head sentence.\n- The head must preview the features (object: key attributes; process: major steps; classification:\nthe categories). If not, state exactly what is missing.\n\n3) Supporting sentences: explanation + details\n- At least 3 supporting sentences that explain the controlling idea and add relevant, concrete\ndetails: facts, examples, brief reasons, expert view, or simple statistics—kept concise and\nverifiable in tone. If details are vague or irrelevant, label them and replace with precise\nalternatives.\n- For processes: steps must be clear and sequential; for classifications: categories must be\ndistinct and exemplified; for objects: salient features must be described with measurable or\nobservable properties. If not, supply corrected content.\n\n4) Concluding sentence\n- Final sentence must restate the controlling idea or summarize the features; no new information.\nIf it adds new info or is missing, rewrite it correctly.\n\n5) Coherence and transitions\n- Enforce known–new contract: sentence openings should anchor known info; sentence endings\nshould introduce new info. Identify every violation and show one-line fixes.\n- Require explicit transitions every 2–3 sentences (e.g., First, Second, Finally; However;\nConsequently). Insert minimal, precise transitions where absent.\n\n6) Style, tone, and concision\n- Academic, neutral diction; no emotional language; no rhetorical questions. Flag and replace\nany inflated or vague phrasing.\n- Be concise and precise: remove redundancy, nominalizations that obscure meaning, and filler\nqualifiers. Show a tightened version with tracked minimal edits.\n- Grammar: every sentence must have a clear subject and finite verb; fix fragments, run-ons,\nand comma splices.\n\n7) Hard checks for the three descriptive options\n- If Object is described: identify three distinct, observable features with concrete detail. If fewer\nthan three or not concrete, fix.\n- If Process is described: identify and order three core steps with crisp, actionable phrasing. If out\nof order or blended, fix.\n- If Classification is described: present a clear set of categories; define each briefly; ensure\nmutual clarity. If overlapping or undefined, fix.\n\nDeliverables:\nA) Compliance verdicts: Pass/Fail for each criterion (1–7) with one-line justification.\nB) Line-by-line edits: show the student’s paragraph with minimal, necessary edits in brackets,\nreplacing weak words, tightening syntax, and inserting transitions; no rewrites beyond necessity.\nC) Rewritten model paragraph: produce a fully compliant, high-quality paragraph for the same\nchosen type and topic, using neutral academic style, strong head, three solid supports, correct\ntransitions, and a proper concluding sentence. Keep it under 150 words.\nD) Micro-lessons (max 3 bullets): one sentence each on the exact errors the student tends to\nmake and how to avoid them next time. Be specific and operational.",
    "crumbs": [
      "Academic Writing and Argumentation",
      "6. Descriptive Paragraph"
    ]
  },
  {
    "objectID": "Academic Writing and Argumentation/lec_3.html",
    "href": "Academic Writing and Argumentation/lec_3.html",
    "title": "3. Sentence Problems, Punctuation",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 Sentence Problems and How to Fix Them\nCorrect sentence structure is essential for clear and effective communication. Common problems can make writing confusing or unprofessional, but they are easily fixed once identified.\n\n\n1.1.1 Sentence Fragments\nA sentence fragment is an incomplete thought punctuated as if it were a complete sentence. It lacks a subject, a verb, or both, and cannot stand on its own.\n\nFragment: Three dogs and a goat. (Missing a verb/action).\nComplete Sentence: Three dogs and a goat ate all the food. (Now includes the verb “ate”).\nFragment: Because I could not find my shoes. (This is a dependent clause, an incomplete thought).\nComplete Sentence: I felt sad because I could not find my shoes. (The fragment is now attached to a complete sentence).\n\n\n\n1.1.2 Choppy Sentences\nChoppy sentences are short, simple sentences that occur one after another. While grammatically correct, they can make writing sound abrupt and disconnected. The solution is to combine these short sentences into longer, more fluid ones using conjunctions and transitions.\n\nChoppy: Our results were inconsistent. The program obviously contains an error. We need to talk to Paul Davis. We will ask him to review the program.\nImproved: We will ask Paul Davis to review the program for errors because it produced inconsistent results.\n\n\n\n1.1.3 Run-on Sentences\nA run-on sentence occurs when two or more independent clauses (complete thoughts) are joined together improperly.\n\nThere are two main types:\n\nFused Sentences: Two independent clauses are joined with no punctuation at all.\n\nFused: The experiment failed it had been left unobserved for too long.\nCorrected: The experiment failed because it had been left unobserved for too long. (Using a subordinating conjunction).\nCorrected: The experiment had been left unobserved for too long, so it failed. (Using a comma and a coordinating conjunction).\n\nComma-Splice Sentences: Two independent clauses are joined with only a comma, which is not strong enough punctuation to connect them.\n\nComma Splice: The experiment failed, it had been left unobserved for too long.\nCorrected: The experiment failed because it had been left unobserved for too long.\nCorrected: The experiment had been left unobserved for too long, so it failed.\n\n\n\n\n1.1.4 Loose Sentences\nA loose sentence is a long, rambling sentence that contains too many clauses and phrases, making the main point difficult to understand. The key ideas are often buried in a series of additions. To fix this, break the sentence into shorter, more direct sentences that clearly state the essential information.\n\nLoose: We got the contract, according to which we must be ready by June 1 with the necessary personnel and equipment to get the job done, so with this in mind a staff meeting that all group managers are expected to attend, is scheduled for February 12.\nImproved: We must close the contract by June 1, so a mandatory staff meeting is scheduled for February 12.\n\n\n\n1.1.5 Inappropriate or Excessive Coordination\nThis error occurs when too many independent clauses are linked together with coordinating conjunctions (like and, so, but), creating a long, stringy sentence that doesn’t show the proper relationship between ideas. The fix is to break the sentence into smaller ones or use subordination to clarify the relationship.\n\nInappropriate: Roses are a popular flower, and they are difficult to grow, so many people choose to purchase them as cut flowers instead, but that can be expensive.\nImproved: Roses are a popular flower that are difficult to grow. So, many people buy cut roses, but that can be expensive.\n\n\n\n1.1.6 Inappropriate or Excessive Subordination\nThis happens when a sentence has too many dependent clauses, creating a confusing and tangled structure. The main idea gets lost among less important details. The solution is to restructure the sentence into several shorter sentences, giving the main ideas more prominence.\n\nExcessive: Although Bwana thought that he was prepared, he failed the examination, which meant that he had to repeat the course before he could graduate which he did not want to do because it would conflict with his summer job.\nImproved: Bwana thought that he was prepared, but he failed the examination. Therefore, he would have to repeat the course before he could graduate. He did not want to do that because it would conflict with his summer job.\n\n\n\n1.1.7 Non-Parallel Structures\nParallel structure means using the same grammatical form for items in a list or series. When this rule is broken, the sentence has a non-parallel structure, which can be awkward and confusing.\n\nNon-Parallel: I like to swim, to sail, and rowing. (The items are a mix of infinitives and a gerund).\nParallel: I like to swim, to sail, and to row. (All infinitives).\nParallel: I like swimming, sailing, and rowing. (All gerunds).\n\n\n\n1.1.8 that vs. which\nThe choice between that and which depends on whether the clause that follows is essential or non-essential to the meaning of the sentence.\n\nUse that for Restrictive (Essential) Clauses: A restrictive clause provides information that is essential to identify the noun it describes. You cannot remove it without changing the sentence’s core meaning. These clauses are not set off by commas.\n\nExample: This animal is the pink elephant that I love. (The clause that I love is essential; it specifies which pink elephant we are talking about).\n\nUse which for Non-Restrictive (Non-Essential) Clauses: A non-restrictive clause provides extra, non-essential information. It can be removed without changing the sentence’s basic meaning. These clauses are always set off by commas.\n\nExample: This animal is a pink elephant, which I love. (The clause which I love is extra information. The main point is that the animal is a pink elephant).\n\n\n\n\n1.2 Using Commas\nCommas are punctuation marks that serve two main purposes: to tell readers where to pause and to separate groups of words to ensure clarity.\n\n\n1.2.1 Commas with Clauses\n\nIndependent Clauses: Use a comma before a coordinating conjunction (For, And, Nor, But, Or, Yet, So - FANBOYS) when it joins two independent clauses.\n\nExample: The student explained her question, yet the instructor still didn't seem to understand.\n\nDependent Clauses: Do not use a comma when two clauses are joined by a subordinating conjunction (like if, since, as, when, although, while, after, before, until, because) and the independent clause comes first.\n\nExample: A cannibal does not eat clowns because they taste funny.\n\nIntroductory Dependent Clauses: Use a comma after a dependent clause when it comes before the independent clause.\n\nExample: Since clowns taste funny, a cannibal does not eat them.\n\n\n\n\n1.2.2 Commas with Transitions\nUse a comma after a transitional word or phrase (e.g., Therefore, However, For example).\n\nExample: Clowns taste funny. Therefore, a cannibal does not eat them.\nExample: Dogs have masters. However, cats have servants.\n\n\n\n1.2.3 Commas in Lists\n\nUse commas to separate three or more items in a list. The comma before the and is known as the Oxford comma and is often used for clarity.\n\nExample: My bath toys were a hairdryer, a toaster, and a radio.\n\nIf a list contains only two items, do not use a comma.\n\nExample: My bath toys were a hairdryer and a toaster.\n\n\n\n\n1.2.4 Commas for Quotations\n\nReporting Clause First: He said, \"If you cannot see the bright side of life, polish the dull side.\"\nQuotation First: \"If you can't see the bright side of life, polish the dull side,\" he said.\nQuotation Divided: \"If you can't see the bright side of life,\" he said, \"polish the dull side.\"\n\n\n\n1.2.5 Commas with Parenthetical Expressions and Appositives\n\nA parenthetical expression is an extra piece of information that can be removed without changing the sentence’s meaning or grammar. It should be set off by commas.\n\nExample: Clowns, as most researchers know, taste funny.\n\nAn appositive is a word or phrase that renames a nearby noun. It provides more information about the noun and is also set off by commas.\n\nExample: Clowns, those sweaty artists, taste funny.\n\nImportant Note: Overusing parenthetical expressions and appositives can make text less readable by separating the subject and verb. For clearer writing, consider placing them at the beginning of a sentence or in a separate clause.\n\nLess Effective: Dogs, unlike cats, have masters.\nMore Effective: Unlike cats, dogs have masters.\nLess Effective: Dogs, the humans' best friends, have masters.\nMore Effective: Dogs are the humans' best friends, so dogs have masters.\n\n\n\n\n1.2.6 Commas for Contrast\nUse a comma to separate contrasting parts of a sentence.\n\nExample: Cats have servants, not masters.\nExample: Dogs have masters, not servants.\n\n\n\n1.3 Bulleted and Numbered Lists\nLists are an effective way to organize information. The punctuation rules depend on whether the list items are complete sentences.\n\n\n1.3.1 Incomplete Sentence Items\nWhen list items are phrases or fragments that complete an introductory stem, use the following format: * Introduce the list with a colon. * Begin each item with a lowercase letter. * Place a semicolon after each item. * Use a period after the final item.\n\nExample: My parents clearly hated me because they gave me the following toys to play in the bathtub with:\n\na hairdryer;\na toaster;\na radio.\n\n\n\n\n1.3.2 Complete Sentence Items\nWhen each item in the list is a complete sentence, use this format: * Introduce the list with a colon. * Begin each item with a capital letter. * Place a period after each item.\n\nExample: Cannibals do not eat clowns due to the following reasons:\n\nClowns run fast.\nClowns taste funny.\nClowns are scary.\n\n\n\n\n\n2. Mistakes\n\nComma Splice: Using only a comma to connect two complete sentences (independent clauses). Why it’s wrong: A comma is not strong enough to join two separate thoughts. You should use a period, a semicolon, or a comma followed by a coordinating conjunction (like and, but, so).\nFused Sentence: Joining two complete sentences with no punctuation at all. Why it’s wrong: This creates a run-on sentence that is confusing and forces the reader to guess where one idea ends and the next begins.\nSentence Fragment: Punctuating an incomplete thought as if it were a full sentence. Why it’s wrong: A sentence must contain at least one independent clause with a subject and a verb to be grammatically complete.\nNon-Parallel Structure: Mixing grammatical forms when listing items in a series (e.g., running, to jump, and played). Why it’s wrong: This disrupts the rhythm and logic of the sentence, making it harder to read and understand. All items in a series should have the same grammatical structure.\nSeparating Subject and Verb with a Comma: Placing a single comma between the subject of a sentence and its main verb. Why it’s wrong: The subject and verb are the core of a sentence and should not be separated. An exception is when a non-essential phrase (set off by two commas) is inserted between them.\nConfusing that and which: Using which for an essential (restrictive) clause or that for a non-essential (non-restrictive) clause. Why it’s wrong: This can change the fundamental meaning of the sentence. that is used for information necessary to identify the noun, while which (with a comma) adds extra, non-essential information.",
    "crumbs": [
      "Academic Writing and Argumentation",
      "3. Sentence Problems, Punctuation"
    ]
  },
  {
    "objectID": "Introduction to Programming/lec_2.html",
    "href": "Introduction to Programming/lec_2.html",
    "title": "2. Pointers, Strings, and Arrays in C",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 Memory, Values, and Addresses\nIn computing, a program’s data is stored in memory. It is helpful to visualize memory as a vast, single sequence of cells, much like a long row of mailboxes. Each cell has two key attributes:\n\nAn address: This is a unique numerical identifier for the cell’s location, similar to a mailbox number. Addresses are typically represented in hexadecimal format (e.g., 0x7ffc...).\nA value: This is the actual data stored inside the cell, like the letter inside a mailbox.\n\nEvery variable you declare in a program occupies one or more of these memory cells. The crucial concept is to distinguish between the address of a variable and the value it holds. For instance, an integer variable var1 with a value of 100 might be located at memory address 0xbff5a400.\n\n\n\n1.2 The Program Stack and Local Variables\nWhen a program runs, a region of memory called the stack is used to manage function calls. The stack operates on a last-in, first-out (LIFO) basis. Each time a function is called, a new block of memory, called a stack frame or activation record, is pushed onto the top of the stack.\nThis stack frame contains all the information needed for that specific function call, including:\n\nIts local variables (variables declared inside the function).\nThe function’s parameters.\nThe return address (where to resume execution after the function finishes).\n\nWhen the function completes, its entire stack frame is popped off the stack, and all of its local variables are destroyed. This process is automatic. This is why a local variable’s lifetime is limited to the execution of the function it was declared in.\n\n\n1.3 The Heap and Dynamic Memory Allocation\nSeparate from the stack is another memory region called the heap. The heap is used for dynamic memory allocation, which allows a program to request blocks of memory at runtime, when the exact size may not be known at compile time.\nUnlike stack variables, the lifetime of memory allocated on the heap is not tied to the scope of any function. The programmer has full control and responsibility for managing this memory.\n\nTo allocate memory on the heap, you use the malloc() function (short for memory allocate). It takes the number of bytes to allocate as an argument and returns a generic pointer (void*) to the start of that allocated block.\nTo release the memory once it’s no longer needed, you must explicitly call the free() function, passing it the same pointer.\n\nFailure to call free() results in a memory leak, where the program holds onto memory it no longer uses, which can exhaust available memory and crash the application.\n\n\n1.4 Pointers\nA pointer is a special type of variable designed to hold a memory address as its value. Instead of storing data like an integer or a character directly, it stores the location of other data. This makes pointers a powerful tool for indirect data manipulation, managing dynamic memory, and efficiently passing large data structures to functions.\nA pointer is declared by specifying the type of data it will point to, followed by an asterisk (*). For example, int* p; declares a pointer p that is intended to hold the address of an integer.\nThere are two fundamental operators for pointers:\n\nThe address-of operator (&): This unary operator, when placed before a variable name, returns its memory address. For example, &var1 gives the address where var1 is stored.\nThe dereference operator (*): This unary operator, when placed before a pointer variable, accesses the value at the address the pointer is holding. It essentially says, “go to the address stored in this pointer and get the value from there.”\n\nFor example, to make a pointer p point to an integer x, you would write p = &x;. To retrieve the value of x using the pointer, you would write *p.\nA pointer of type void* is a generic pointer that can hold the address of any data type but cannot be dereferenced directly. It must first be cast to a specific pointer type, like (int*), before the data it points to can be accessed.\n\n\n1.5 Arrays\nAn array is a data structure that stores a fixed-size, sequential collection of elements of the same data type. Imagine an array as a connected block of memory cells. You can access individual elements by their position, or index, which starts at 0.\nFor example, double balance[10]; declares an array named balance that can hold 10 elements of type double. The first element is balance[0] and the last is balance[9].\nA critical concept in C is the close relationship between arrays and pointers. The name of an array, when used in most expressions, decays into a pointer to its first element. This means that the expressions balance and &balance[0] are equivalent; both yield the memory address of the first element.\nBecause of this, you can use pointer arithmetic to navigate an array. If p is a pointer to the first element of an array, then *(p + i) is equivalent to array[i]. It’s important to note that pointer arithmetic is automatically scaled by the size of the data type. If p is an int*, p + 1 increments the address not by 1 byte, but by sizeof(int) bytes to point to the next integer in memory.\n\n\n1.6 Strings in C\nIn the C programming language, a string is not a built-in data type. Instead, a string is implemented as a one-dimensional array of characters that is terminated by a special character called the null terminator.\nThe null terminator, represented as \\0, is a character with the ASCII value 0. It serves as a marker to signal the end of the string. Standard library functions that work with strings (like printing or calculating length) rely on this null character to know where to stop processing.\nThere are two common ways to initialize a string:\n\nAs a character array: char greeting[] = {'H', 'e', 'l', 'l', 'o', '\\0'};. In this case, you must explicitly include the \\0 at the end.\nAs a string literal: char greeting[] = \"Hello\";. This is the more common method. When you use double quotes, the compiler automatically allocates enough space for the characters and appends the \\0 terminator for you. This is why “Hello” requires an array of 6 characters, not 5.\n\nFailure to properly null-terminate a character array will lead to undefined behavior when it is treated as a string, as functions will read past the end of the intended data into adjacent memory.\n\n\n1.7 Pointers to Functions\nJust as pointers can store the address of data, they can also store the address of functions. A function pointer can be used to call the function it points to indirectly. This is useful for implementing callbacks, creating function tables (e.g., for state machines), and passing functions as arguments to other functions.\nThe syntax for declaring a function pointer must match the function’s signature (return type and parameter types). For example, a pointer to a function that takes two integers and returns an integer is declared as: int (*my_func_ptr)(int, int);.\n\n\n\n2. Definitions\n\nPointer: A variable that stores the memory address of another variable or a location in memory.\nArray: A data structure consisting of a fixed-size, contiguous collection of elements of the same data type, accessed by an integer index.\nC-Style String: A sequence of characters stored in a character array and terminated by a null character (\\0).\nNull Terminator (\\0): A special character with an ASCII value of zero that marks the end of a C-style string.\nAddress-of Operator (&): A unary operator that returns the memory address of its operand (the variable it is applied to).\nDereference Operator (*): A unary operator that accesses the value stored at the memory address held by a pointer. It is used to “de-reference” the pointer to get to the data it points to.\nStack: A region of memory where local variables and function call information are stored in a last-in, first-out manner. Memory is managed automatically.\nHeap: A region of memory for dynamically allocated data, whose lifetime is controlled manually by the programmer using malloc() and free().\nDynamic Memory Allocation: The process of allocating memory from the heap at runtime.\nMemory Leak: A memory management error where a program allocates memory on the heap but fails to release it with free(), making it unusable for the remainder of the program’s execution.\nDangling Pointer: A pointer that refers to a memory location that has already been freed or is otherwise no longer valid (e.g., pointing to a local variable that has gone out of scope).\nPointer Arithmetic: The use of arithmetic operators on pointers, which is scaled by the size of the data type they point to. For example, incrementing an int pointer moves it forward by sizeof(int) bytes.\n\n\n\n3. Mistakes\n\nForgetting the Null Terminator: When manually building a string character by character in an array, it’s easy to forget to add the \\0 at the end. Why it’s wrong: Standard string functions will not know where the string ends and will continue reading into adjacent memory, causing bugs and potential crashes.\nDereferencing an Uninitialized Pointer: Declaring a pointer like int* p; and then immediately trying to use it like *p = 10;. Why it’s wrong: The pointer p holds a garbage memory address. Writing to this random location corrupts memory and leads to undefined behavior. A pointer must first be assigned a valid address.\nReturning a Pointer to a Local Variable: A function creates a local variable and returns its address. Why it’s wrong: The local variable exists on the function’s stack frame, which is destroyed upon the function’s return. The returned pointer becomes a “dangling pointer” that points to invalid memory.\nForgetting to free Dynamically Allocated Memory: Allocating memory with malloc but never calling free on the pointer. Why it’s wrong: This causes a memory leak. The program loses its only reference to the allocated heap memory, making it impossible to ever release it. Over time, this can exhaust all available memory.\nArray Out-of-Bounds Access: Trying to access an element beyond the defined size of an array, such as accessing arr[10] in an array declared as int arr[10];. Why it’s wrong: The valid indices are 0 through 9. Accessing arr[10] reads from or writes to memory that is not part of the array, which can corrupt other variables or cause the program to crash.\nConfusing Pointer Assignment with Value Assignment: Writing p = q; when you meant *p = *q;. Why it’s wrong: p = q; makes pointer p point to the same memory address as pointer q. In contrast, *p = *q; copies the value from the location pointed to by q to the location pointed to by p. These are fundamentally different operations.\n\n\n\n4. Examples\n\n4.1. Swap Two Integers using Pointers\nQuestion: Write a C function swap that takes pointers to two integers as arguments and swaps their values.\n\n\nClick to see the solution\n\n#include &lt;stdio.h&gt;\n\nvoid swap(int* a, int* b) {\n    // 1. Declare a temporary integer variable to hold one of the values.\n    int temp;\n\n    // 2. Dereference pointer 'a' to get its value and store it in 'temp'.\n    temp = *a;\n\n    // 3. Dereference pointer 'b' to get its value, then dereference 'a' again\n    //    to assign this value to the variable 'a' points to.\n    *a = *b;\n\n    // 4. Assign the value stored in 'temp' (the original value of *a) to the\n    //    variable that 'b' points to.\n    *b = temp;\n}\n\nint main() {\n    int x = 10;\n    int y = 20;\n    printf(\"Before swap: x = %d, y = %d\\n\", x, y);\n    swap(&x, &y); // Pass the addresses of x and y\n    printf(\"After swap: x = %d, y = %d\\n\", x, y);\n    return 0;\n}\nAnswer: The function uses a temporary variable to hold the value of the first integer. It then uses the dereference operator * to access and modify the values at the memory addresses passed into it, effectively swapping them in the main function’s scope. The output will be: Before swap: x = 10, y = 20 After swap: x = 20, y = 10\n\n\n\n4.2. Calculate String Length\nQuestion: Write a C function my_strlen that takes a constant character pointer (a string) and returns its length, excluding the null terminator. Do not use the standard strlen library function.\n\n\nClick to see the solution\n\n#include &lt;stdio.h&gt;\n\nint my_strlen(const char* str) {\n    // 1. Initialize a counter for the length to 0.\n    int length = 0;\n\n    // 2. Use a while loop that continues as long as the character\n    //    at the current pointer location is not the null terminator ('\\0').\n    //    The expression *(str + length) is equivalent to str[length].\n    while (*(str + length) != '\\0') {\n        // 3. Increment the length counter for each non-null character.\n        length++;\n    }\n\n    // 4. Return the final count.\n    return length;\n}\n\nint main() {\n    char my_string[] = \"Hello, World!\";\n    int len = my_strlen(my_string);\n    printf(\"The length of the string is: %d\\n\", len);\n    return 0;\n}\nAnswer: The function iterates through the character array using pointer arithmetic, incrementing a counter until it encounters the \\0 character. The final count is the length of the string. The output will be: The length of the string is: 13\n\n\n\n4.3. Reverse a String in Place\nQuestion: Write a C function that takes a character array (string) and reverses it in place using pointers.\n\n\nClick to see the solution\n\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt; // For strlen to find the end\n\nvoid reverse_string(char* str) {\n    // 1. Create two pointers. 'start' points to the beginning of the string.\n    char* start = str;\n    \n    // 2. 'end' points to the last character of the string (before the null terminator).\n    char* end = str + strlen(str) - 1;\n    \n    char temp;\n\n    // 3. Loop as long as the start pointer is before the end pointer.\n    while (start &lt; end) {\n        // 4. Swap the characters pointed to by 'start' and 'end'.\n        temp = *start;\n        *start = *end;\n        *end = temp;\n\n        // 5. Move the 'start' pointer forward and the 'end' pointer backward.\n        start++;\n        end--;\n    }\n}\n\nint main() {\n    char my_string[] = \"Quarto\";\n    printf(\"Original string: %s\\n\", my_string);\n    reverse_string(my_string);\n    printf(\"Reversed string: %s\\n\", my_string);\n    return 0;\n}\nAnswer: The function uses two pointers, one at the beginning and one at the end of the string. It swaps the characters they point to and then moves the pointers toward the center until they meet or cross, effectively reversing the entire string. The output will be: Original string: Quarto Reversed string: otrauQ\n\n\n\n4.4. Sum Array Elements using a Pointer\nQuestion: Write a C function that calculates the sum of all elements in an integer array using only pointer arithmetic to iterate through the array. The function should take a pointer to the first element and the size of the array.\n\n\nClick to see the solution\n\n#include &lt;stdio.h&gt;\n\nint sum_array(int* arr, int size) {\n    // 1. Initialize a sum variable to 0.\n    int sum = 0;\n    \n    // 2. Create a pointer 'ptr' and initialize it with the starting address of the array.\n    int* ptr = arr;\n    \n    // 3. Create a pointer 'end' that points to the memory location just after the last element.\n    //    This will serve as our loop termination condition.\n    int* end = arr + size;\n\n    // 4. Loop while the current pointer 'ptr' has not reached the 'end' pointer.\n    for (; ptr &lt; end; ptr++) {\n        // 5. Dereference the current pointer to get the integer value and add it to the sum.\n        sum += *ptr;\n    }\n\n    return sum;\n}\n\nint main() {\n    int numbers[] = {10, 20, 30, 40, 50};\n    int total = sum_array(numbers, 5);\n    printf(\"The sum of the array elements is: %d\\n\", total);\n    return 0;\n}\nAnswer: The function iterates through the array by incrementing a pointer from the start of the array to one element past the end. In each iteration, it dereferences the pointer to add the current element’s value to a running total. The output will be: The sum of the array elements is: 150\n\n\n\n4.5. Find the Maximum Value in an Array\nQuestion: Write a C function find_max that finds the largest integer in an array using pointers. The function should return a pointer to the element containing the maximum value.\n\n\nClick to see the solution\n\n#include &lt;stdio.h&gt;\n\nint* find_max(int* arr, int size) {\n    // 1. Handle the edge case of an empty or invalid array.\n    if (arr == NULL || size &lt;= 0) {\n        return NULL;\n    }\n\n    // 2. Create a pointer to hold the address of the maximum element found so far.\n    //    Initialize it to point to the first element of the array.\n    int* max_ptr = arr;\n    \n    // 3. Loop through the array from the second element to the end.\n    for (int i = 1; i &lt; size; i++) {\n        // 4. Compare the value at the current position (arr[i]) with the value\n        //    at the current maximum's position (*max_ptr).\n        if (arr[i] &gt; *max_ptr) {\n            // 5. If the current element is larger, update max_ptr to point to it.\n            max_ptr = &arr[i];\n        }\n    }\n\n    // 6. Return the pointer to the largest element.\n    return max_ptr;\n}\n\nint main() {\n    int numbers[] = {1, 99, 23, 56, 88};\n    int* max_element_ptr = find_max(numbers, 5);\n    \n    if (max_element_ptr != NULL) {\n        printf(\"The maximum value in the array is: %d\\n\", *max_element_ptr);\n    }\n    \n    return 0;\n}\nAnswer: The function assumes the first element is the maximum, then iterates through the rest of the array. If it finds a larger element, it updates its max_ptr to point to that new maximum element. It returns the final pointer. The output will be: The maximum value in the array is: 99\n\n\n\n4.6. Create and Populate a Dynamic Array\nQuestion: Write a C program that asks the user for a size, dynamically allocates an integer array of that size on the heap, fills it with the numbers from 0 to size-1, prints the array, and then frees the memory.\n\n\nClick to see the solution\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt; // Required for malloc and free\n\nint main() {\n    int size;\n    printf(\"Enter the size of the array: \");\n    scanf(\"%d\", &size);\n\n    // 1. Allocate memory on the heap.\n    //    Calculate the total bytes needed: size * sizeof(int).\n    //    Cast the returned void* to an int*.\n    int* arr = (int*)malloc(size * sizeof(int));\n\n    // 2. Check if malloc was successful. It returns NULL on failure.\n    if (arr == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1; // Exit with an error code\n    }\n\n    // 3. Populate the array using pointer arithmetic.\n    for (int i = 0; i &lt; size; i++) {\n        *(arr + i) = i; // Equivalent to arr[i] = i;\n    }\n\n    // 4. Print the array.\n    printf(\"Array elements: \");\n    for (int i = 0; i &lt; size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n\n    // 5. Free the dynamically allocated memory to prevent a memory leak.\n    free(arr);\n\n    return 0;\n}\nAnswer: The program uses malloc to request a block of memory from the heap based on user input. After checking for allocation success, it populates and prints the array. The crucial final step is calling free(arr) to return the memory to the system. If the user enters 5, the output will be: Enter the size of the array: 5 Array elements: 0 1 2 3 4\n\n\n\n4.7. Initialize and Print a 2D Array using Pointers\nQuestion: Declare a 2x3 integer array. Write a function that takes a pointer to this 2D array, its number of rows, and its number of columns to initialize it with sequential numbers. Write another function to print it using pointer notation.\n\n\nClick to see the solution\n\n#include &lt;stdio.h&gt;\n\n// Note the function parameter: int (*arr) is a pointer to an array of 3 integers.\nvoid initialize_array(int (*arr), int rows, int cols) {\n    int count = 1;\n    // 1. Iterate through each row.\n    for (int i = 0; i &lt; rows; i++) {\n        // 2. Iterate through each column in the current row.\n        for (int j = 0; j &lt; cols; j++) {\n            // 3. Use pointer notation to access the element.\n            //    *(arr + i) is a pointer to the i-th row.\n            //    *(*(arr + i) + j) is the element at row i, col j.\n            *(*(arr + i) + j) = count++;\n        }\n    }\n}\n\nvoid print_array(int (*arr), int rows, int cols) {\n    for (int i = 0; i &lt; rows; i++) {\n        for (int j = 0; j &lt; cols; j++) {\n            // 4. Print the element using the same pointer notation.\n            printf(\"%d\\t\", *(*(arr + i) + j));\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int my_array;\n    \n    initialize_array(my_array, 2, 3);\n    print_array(my_array, 2, 3);\n    \n    return 0;\n}\nAnswer: The key is the function signature int (*arr)[3], which correctly declares a pointer to a complete row (an array of 3 integers). Inside the functions, the expression *(*(arr + i) + j) is used. arr + i moves the pointer to the i-th row, *(arr + i) dereferences it to get a pointer to the first element of that row, adding j moves it to the j-th column, and the final dereference * gets the value. The output will be: 1 2 3\n4 5 6",
    "crumbs": [
      "Introduction to Programming",
      "2. Pointers, Strings, and Arrays in C"
    ]
  },
  {
    "objectID": "Introduction to Programming/lec_1.html",
    "href": "Introduction to Programming/lec_1.html",
    "title": "1. Compilation and Memory Management in C",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 The C Programming Language\nThe C programming language, developed by Dennis Ritchie and Brian Kernighan, is a foundational, general-purpose language celebrated for its efficiency and low-level control over system hardware. It is considered a middle-level language, bridging the gap between high-level languages that provide significant abstraction and low-level assembly languages that map directly to machine instructions. This unique position has earned it the nickname “universal assembly language.”\nA crucial concept in learning any language is the difference between syntax and semantics.\n\nSyntax refers to the set of rules that govern the structure and spelling of statements. For example, the rule that a statement must end with a semicolon is syntax.\nSemantics refers to the meaning of those statements—what the computer is instructed to do. While correct syntax is necessary for a program to compile, a deep understanding of semantics is essential for writing correct and efficient programs.\n\nKey characteristics of C include:\n\nCompiled Language: C source code must be translated by a compiler into machine code before it can be run.\nStatically Typed: Every variable has a specific data type (e.g., int, float) that is determined at compile time. However, C is not strongly typed, as it permits many kinds of type conversions.\nProcedural: Programs in C are built from procedures, also known as functions, which are blocks of code that perform specific tasks.\nSystem-Level Access: C allows for direct memory manipulation, giving the programmer the power to “exploit underlying features of the architecture.”\nUnsafe by Design: C trusts the programmer. It does not have built-in protections against common errors like accessing invalid memory locations. This “absence of restrictions” provides great power but also requires careful programming to avoid bugs and security flaws. It’s a best practice to always test code on your own machine to see how it behaves in a real environment.\n\n\n\n1.2 Essential Tools & The Compiler\nTo program in C, you only need two core tools: a text editor to write source code (e.g., VS Code, Notepad++) and a C compiler. An Integrated Development Environment (IDE) is a convenient package that bundles these tools with a debugger and other features, but it is not a requirement.\nThe most widely used C compiler is GCC (GNU Compiler Collection). Other common compilers include Clang and Microsoft Visual C++ (MSVC). To compile a program from a source file named program.c into an executable named program, you would use the following command in a terminal: gcc -Wall -o program program.c\n\ngcc: Invokes the compiler.\n-Wall: A critical flag that enables all compiler warnings. Heeding these warnings helps catch potential bugs.\n-o program: Specifies the name of the output (executable) file.\nprogram.c: The input source file.\n\n\n\n1.3 The Compilation and Linking Process\nA C program can be made of multiple source files (.c files), each known as a translation unit after being processed. Creating an executable from these files involves a multi-stage process:\n\nPreprocessing: The preprocessor scans the source code for directives (lines beginning with #). For instance, #include &lt;stdio.h&gt; copies the entire contents of the standard input/output header file into your source file.\nCompilation: The compiler translates the preprocessed code into assembly language, a human-readable representation of machine instructions.\nAssembly: The assembler converts the assembly code into pure machine code, creating an object file (with a .o or .obj extension). This file contains the code for its translation unit but is not yet runnable.\nLinking: The linker combines all object files into a single executable file. It resolves references between files (e.g., a function call in main.c to a function defined in utils.c) and incorporates necessary code from system libraries.\n\n\n\n\n\n\n\n\n\n\nFigure 1: The C compilation and linking process for multiple source files.\n\n\n\n\n\n\n\n1.4 Program Structure and Memory Model\nA running C program’s memory is organized into several distinct segments:\n\nCode Segment: Contains the program’s machine instructions. This area is typically read-only.\nStatic/Global Data Segment: Stores global and static variables, which exist for the program’s entire duration.\nHeap: A region for dynamic memory allocation. Data can be allocated on the heap at runtime (e.g., using malloc()) and must be manually deallocated (using free()). The heap grows upwards toward higher memory addresses.\nStack: Manages function calls using a Last-In, First-Out (LIFO) structure. When a function is called, a stack frame is pushed onto the stack. This frame holds the function’s parameters, return address, and local variables. When the function finishes, its frame is popped off. The stack grows downwards toward lower memory addresses.\n\n\n\n\n\n\n\n\n\n\nFigure 2: Program Memory Model showing the four main memory segments: Code, Static/Global Data, Heap, and Stack\n\n\n\n\n\n\n\n1.5 Variables, Types, Scope, and Storage Classes\nA variable is a named location in memory. More formally, a type defines a set of possible values a variable can hold, a set of operators that can be applied to it, and its relationships with other types.\nThe scope of a variable determines where in the code it is visible. C uses lexical scope, primarily defined by blocks (code enclosed in {}). A variable declared in an inner block can hide or shadow a variable with the same name from an outer block.\nStorage classes are keywords that define a variable’s lifetime (how long it exists) and linkage (its visibility across different files).\n\nauto: The default for local variables. They have a local lifetime (created and destroyed with their block) and are stored on the stack.\nstatic:\n\nLocal Static Variable: Has a static lifetime (exists for the whole program) but local scope (only visible inside its function). It is initialized only once and retains its value between function calls.\nGlobal Static Variable: Has a static lifetime and internal linkage, meaning it is only visible within the single file where it is declared.\n\nextern: A declaration that tells the compiler a global variable exists but is defined in another file. It is used to share variables across translation units. A standard global variable (without static) has external linkage by default.\n\n\n\n1.6 Debugging\nA debugger is a tool that allows you to run a program in a controlled manner to find and fix errors (bugs). It lets you pause execution, inspect the values of variables, and step through the code line by line. GDB (the GNU Debugger) is a powerful, command-line debugger for C.\nTo prepare a program for debugging, you must compile it with the -g flag, which includes debugging information in the executable: gcc -g -Wall -o program program.c\nCommon GDB commands include:\n\nrun (or r): Starts running your program.\nbreak &lt;line_number&gt; (or b): Sets a breakpoint, which pauses execution when it reaches that line.\nnext (or n): Executes the current line and moves to the next line in the same function. It steps over function calls.\nstep (or s): Executes the current line. If the line contains a function call, it steps into that function.\nprint &lt;variable&gt; (or p): Displays the current value of a variable.\ncontinue (or c): Resumes execution until the next breakpoint or the end of the program.\nquit (or q): Exits GDB.\n\n\n\n\n2. Definitions\n\nCompiler: A program that translates source code from a high-level language into low-level machine code.\nLinker: A program that combines object files and libraries into a single executable file.\nDebugger: A tool used to execute a program in a controlled way to find and diagnose errors.\nSource File: A text file (.c) containing human-readable programming instructions.\nObject File: A file (.o) containing machine code from a single source file; it is an intermediate step before linking.\nExecutable File: A file containing a complete machine code program that can be run by the operating system.\nTranslation Unit: A source file after the preprocessor has processed it; the basic unit of compilation.\nStack: A LIFO memory region for function calls, storing local variables, parameters, and return addresses.\nStack Frame: A block of memory on the stack created for a single function call.\nHeap: A memory region for dynamic allocation, managed manually by the programmer.\nSyntax vs. Semantics: Syntax is the grammatical structure of code; Semantics is its meaning and behavior.\nScope: The region of code where a variable is visible and accessible.\nLifetime: The duration for which a variable exists in memory.\nLinkage: The extent to which a variable or function can be shared across different files (translation units).\n\n\n\n4. Mistakes\n\nForgetting Semicolons (;): Every statement in C must end with a semicolon. Why it’s wrong: The semicolon is the statement terminator. Omitting it is a syntax error that prevents compilation.\nUsing Assignment (=) Instead of Comparison (==): In a condition like if (x = 5), the value 5 is assigned to x, and the expression itself evaluates to 5 (true), leading to incorrect logic. Why it’s wrong: The assignment operator changes a variable’s value, whereas the equality operator == is required to test if two values are the same.\nInteger Division Truncation: Dividing two integers results in an integer, with any fractional part discarded (e.g., 9 / 4 is 2). Why it’s wrong: This causes a loss of precision and leads to incorrect results in mathematical calculations that require floating-point accuracy.\nIgnoring Compiler Warnings: Treating warnings as non-critical and ignoring them. Why it’s wrong: Warnings often flag legally-valid code that is logically flawed or relies on undefined behavior (e.g., using an uninitialized variable). They are frequently indicators of hidden bugs.\nForgetting to Include Header Files: Using library functions like printf without #include &lt;stdio.h&gt;. Why it’s wrong: Header files provide function declarations, which tell the compiler the function’s signature (name, parameters, return type). Without this, the compiler cannot verify the function call and will issue an error.\nAccessing an Array Out of Bounds: Accessing an element outside the defined range of an array, such as arr[10] in an array declared as int arr[10] (valid indices are 0 through 9). Why it’s wrong: C does not perform bounds checking. This action reads from or writes to an arbitrary memory location, leading to undefined behavior that can corrupt data or crash the program.\n\n\n\n5. Examples\n\n5.1. Basic “Hello, World!” Program\nQuestion: Write, compile, and describe the output of a standard “Hello, World!” program in C.\n\n\nClick to see the solution\n\n\nWrite the C code and save it in a file named hello.c. The #include &lt;stdio.h&gt; directive includes the standard library for input/output functions like printf. The main function is the mandatory entry point for execution.\n#include &lt;stdio.h&gt;\n\nint main() {\n    printf(\"Hello, World!\\n\");\n    return 0; // Indicates successful execution\n}\nCompile the code using GCC, enabling warnings and specifying the output file name. sh     gcc -Wall -o hello hello.c\nRun the executable from the terminal. sh     ./hello\n\nAnswer: The program will print the following text to the console: Hello, World!\n\n\n\n5.2. Variable Declaration and Arithmetic\nQuestion: Write a C program that declares two integer variables, a and b, initializes them to 12 and 5, and then prints their sum, difference, product, and quotient.\n\n\nClick to see the solution\n\n\nInclude the standard I/O header for the printf function.\nDefine the main function.\nDeclare and initialize two int variables.\nUse printf for each operation. The %d format specifier acts as a placeholder for an integer value. The \\n character adds a newline for readability.\n#include &lt;stdio.h&gt;\n\nint main() {\n    int a = 12;\n    int b = 5;\n\n    printf(\"Sum: %d\\n\", a + b);\n    printf(\"Difference: %d\\n\", a - b);\n    printf(\"Product: %d\\n\", a * b);\n    printf(\"Quotient (Integer): %d\\n\", a / b); // Note: Integer division\n\n    return 0;\n}\n\nAnswer: The output of the program will be:\nSum: 17\nDifference: 7\nProduct: 60\nQuotient (Integer): 2\n\n\n\n5.3. Integer vs. Floating-Point Division\nQuestion: Write a program to show the difference between integer division and floating-point division using the numbers 9 and 4.\n\n\nClick to see the solution\n\n\nPerform integer division. Both operands are integers, so the result is truncated.\nPerform floating-point division. To trigger this, at least one of the operands must be a floating-point type. We can achieve this by writing 9.0 or by casting one of the integer variables to a float: (float)int_a.\nPrint both results using the correct format specifiers: %d for the integer result and %f for the float result.\n#include &lt;stdio.h&gt;\n\nint main() {\n    int int_a = 9;\n    int int_b = 4;\n\n    // Case 1: Integer division\n    int int_result = int_a / int_b;\n    printf(\"Integer Division (9 / 4): %d\\n\", int_result);\n\n    // Case 2: Floating-point division\n    float float_result = (float)int_a / int_b;\n    printf(\"Floating-Point Division ((float)9 / 4): %f\\n\", float_result);\n\n    return 0;\n}\n\nAnswer: The program’s output clearly shows the truncation:\nInteger Division (9 / 4): 2\nFloating-Point Division ((float)9 / 4): 2.250000\n\n\n\n5.4. Scope and Variable Shadowing\nQuestion: Predict the output of the following C code and explain the reasoning based on variable scope.\n#include &lt;stdio.h&gt;\n\nint main() {\n    int value = 100; // Outer 'value'\n\n    printf(\"1. At outer level, value is: %d\\n\", value);\n\n    { // Start of a new inner block\n        int value = 200; // Inner 'value', shadows the outer one\n        printf(\"2. Inside inner block, value is: %d\\n\", value);\n    } // Inner block ends, inner 'value' is destroyed\n\n    printf(\"3. Back at outer level, value is: %d\\n\", value);\n\n    return 0;\n}\n\n\nClick to see the solution\n\n\nFirst printf: This line is in the scope of the outer main block. It accesses the variable value declared in this scope, which is 100.\nSecond printf: This line is inside an inner block. A new, separate variable also named value is declared here and initialized to 200. Within this block, this inner variable shadows the outer one. Any reference to value here refers to the inner variable, so 200 is printed.\nEnd of Inner Block: When the closing brace } is reached, the inner block’s scope ends. All variables declared within it, including the inner value, are destroyed and cease to exist.\nThird printf: Execution is now back in the outer main block’s scope. The only value visible here is the original one, which was never modified. Its value is still 100.\n\nAnswer: The output will be:\n1. At outer level, value is: 100\n2. Inside inner block, value is: 200\n3. Back at outer level, value is: 100\n\n\n\n5.5. Using static to Retain State in a Function\nQuestion: Create a function that counts how many times it has been called. Use a static local variable for the counter. Demonstrate its behavior by calling it multiple times from main.\n\n\nClick to see the solution\n\n\nDefine a function count_calls.\nInside it, declare static int counter = 0;. The static keyword ensures that counter is initialized to 0 only once, when the program starts. Its value will be preserved across function calls.\nIncrement and print counter.\nIn main, call the function in a loop to see the counter increase.\n#include &lt;stdio.h&gt;\n\nvoid count_calls() {\n    // This variable is initialized only once and retains its value.\n    static int counter = 0;\n    counter++;\n    printf(\"Function has been called %d time(s).\\n\", counter);\n}\n\nint main() {\n    printf(\"Calling the function...\\n\");\n    count_calls();\n    count_calls();\n    count_calls();\n\n    return 0;\n}\n\nAnswer: The output shows that the counter’s state persists between calls:\nCalling the function...\nFunction has been called 1 time(s).\nFunction has been called 2 time(s).\nFunction has been called 3 time(s).\n\n\n\n5.6. Simple while Loop\nQuestion: Write a C program that uses a while loop to print the numbers from 5 down to 1.\n\n\nClick to see the solution\n\n\nInclude stdio.h.\nIn main, declare an integer counter variable and initialize it to 5.\nCreate a while loop with the condition that the counter must be greater than 0.\nInside the loop, print the counter’s current value.\nDecrement the counter (counter--). This step is essential to prevent an infinite loop.\n#include &lt;stdio.h&gt;\n\nint main() {\n    int counter = 5; // Initialize counter\n\n    while (counter &gt; 0) {\n        printf(\"%d\\n\", counter);\n        counter--; // Decrement counter to move toward the exit condition\n    }\n\n    return 0;\n}\n\nAnswer: The program will produce the following output:\n5\n4\n3\n2\n1\n\n\n\n5.7. Basic Debugging with GDB\nQuestion: The following program is supposed to calculate the sum of integers from 1 to 3, but it contains a bug. Explain how to use GDB to find it.\n// File: sum_bug.c\n#include &lt;stdio.h&gt;\n\nint main() {\n    int sum = 0;\n    int i;\n    for (i = 1; i &lt; 3; i++) { // Bug is here!\n        sum = sum + i;\n    }\n    printf(\"Sum is: %d\\n\", sum); // Expected: 6, Actual: 3\n    return 0;\n}\n\n\nClick to see the solution\n\n\nCompile with Debug Symbols: First, compile the program with the -g flag to include information GDB needs. sh     gcc -g -o sum_bug sum_bug.c\nStart GDB: Launch GDB with the executable file as an argument. sh     gdb ./sum_bug\nSet a Breakpoint: The interesting logic is inside the loop. Let’s set a breakpoint at the line where the sum is calculated (line 7) to watch how sum changes. gdb     (gdb) break 7\nRun the Program: Start the program inside GDB. It will run until it hits our breakpoint. gdb     (gdb) run\nInspect Variables: The program is now paused at line 7. Let’s check the values of i and sum. gdb     (gdb) print i     $1 = 1     (gdb) print sum     $2 = 0\nContinue Execution: Let the loop run one more time. gdb     (gdb) continue The program stops at the breakpoint again. Let’s inspect the variables now. gdb     (gdb) print i     $3 = 2     (gdb) print sum     $4 = 1\nContinue Again: gdb     (gdb) continue This time, the program finishes and prints “Sum is: 3”. It never stopped at the breakpoint for i = 3.\nIdentify the Bug: By stepping through the loop, we saw it execute for i = 1 and i = 2, but it terminated before i = 3. The bug is in the loop condition i &lt; 3. To include the number 3 in the sum, the condition must be i &lt;= 3.\n\nAnswer: GDB helps find the bug by allowing us to pause the program and observe that the loop terminates one iteration too early because of the incorrect condition i &lt; 3. The fix is to change it to i &lt;= 3.",
    "crumbs": [
      "Introduction to Programming",
      "1. Compilation and Memory Management in C"
    ]
  },
  {
    "objectID": "Discrete Mathematics/lec_2.html",
    "href": "Discrete Mathematics/lec_2.html",
    "title": "2. Logical Equivalence, Normal Forms (DNF, CNF, ANF)",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 Logical Formulas and Operators\nIn logic, a formula (or proposition) is a statement that can be definitively determined as either true or false. Simple formulas, often represented by variables like \\(p\\) or \\(q\\), can be combined using logical operators to form more complex formulas.\n\nNegation (\\(\\neg\\)): Reverses the truth value of a formula. \\(\\neg p\\) is read as “not p”. If \\(p\\) is true, \\(\\neg p\\) is false.\nConjunction (\\(\\land\\) or &): Represents logical “AND”. The formula \\(p \\land q\\) is true only if both \\(p\\) and \\(q\\) are true.\nDisjunction (\\(\\lor\\)): Represents logical “OR”. The formula \\(p \\lor q\\) is true if at least one of \\(p\\) or \\(q\\) is true. It is only false when both are false.\nImplication (\\(\\to\\)): Represents an “if-then” statement. \\(p \\to q\\) is read as “if p, then q”. It is only false when \\(p\\) is true and \\(q\\) is false. In all other cases, it is true.\nBi-implication (\\(\\leftrightarrow\\)): Represents “if and only if”. \\(p \\leftrightarrow q\\) is true only when \\(p\\) and \\(q\\) have the same truth value (both true or both false).\n\n\n\n1.2 Classification of Logical Formulas\nFormulas can be classified based on their truth values across all possible interpretations of their variables.\n\n\nTautology: A formula that is always true, regardless of the truth values of its constituent variables. For example, the formula \\(p \\lor \\neg p\\) is always true because a proposition must be either true or false.\nContradiction: A formula that is always false. For example, \\(p \\land \\neg p\\) is a contradiction because a proposition cannot be both true and false at the same time.\nContingency: A formula that is neither a tautology nor a contradiction. Its truth value depends on the truth values of its variables. For example, \\(p \\lor q\\) is a contingency because its truth depends on whether \\(p\\) or \\(q\\) is true.\nSatisfiability: A formula is considered satisfiable if there exists at least one assignment of truth values to its variables that makes the entire formula true. Tautologies and contingencies are satisfiable, while contradictions are not. The problem of determining if a formula is satisfiable is a famous problem in computer science known as the Boolean Satisfiability Problem (SAT), which the Cook-Levin theorem proved to be NP-complete.\n\n\n\n1.3 Logical Equivalence\nTwo formulas are logically equivalent if they have identical truth tables. This means that for every possible combination of truth values for their variables, the two formulas produce the same result. This relationship is denoted by the symbol \\(\\equiv\\). Understanding these equivalences is crucial for simplifying and manipulating logical expressions.\n\nIdentity Laws: A variable OR-ed with false is the variable itself. A variable AND-ed with true is the variable itself.\n\n\\(p \\lor F \\equiv p\\)\n\\(p \\land T \\equiv p\\)\n\nDomination Laws: Any variable OR-ed with true is always true. Any variable AND-ed with false is always false.\n\n\\(p \\lor T \\equiv T\\)\n\\(p \\land F \\equiv F\\)\n\nIdempotent Laws: OR-ing or AND-ing a variable with itself does not change its value.\n\n\\(p \\lor p \\equiv p\\)\n\\(p \\land p \\equiv p\\)\n\nDouble Negation Law: Negating a negation cancels out.\n\n\\(\\neg(\\neg p) \\equiv p\\)\n\nCommutative Laws: The order of variables does not matter for AND and OR operations.\n\n\\(p \\lor q \\equiv q \\lor p\\)\n\\(p \\land q \\equiv q \\land p\\)\n\nAssociative Laws: The grouping of variables does not matter for a sequence of the same operator (AND or OR).\n\n\\((p \\lor q) \\lor r \\equiv p \\lor (q \\lor r)\\)\n\\((p \\land q) \\land r \\equiv p \\land (q \\land r)\\)\n\nDistributive Laws: An operator can be distributed over another within parentheses.\n\n\\(p \\land (q \\lor r) \\equiv (p \\land q) \\lor (p \\land r)\\)\n\\(p \\lor (q \\land r) \\equiv (p \\lor q) \\land (p \\lor r)\\)\n\nDe Morgan’s Laws: These laws describe how to negate a conjunction or a disjunction. To do this, you negate each term and flip the operator.\n\n\\(\\neg(p \\land q) \\equiv \\neg p \\lor \\neg q\\)\n\\(\\neg(p \\lor q) \\equiv \\neg p \\land \\neg q\\)\n\nAbsorption Laws: These laws simplify expressions where a variable is combined with an expression containing that same variable.\n\n\\(p \\lor (p \\land q) \\equiv p\\)\n\\(p \\land (p \\lor q) \\equiv p\\)\n\nImplication and Bi-implication Equivalences: These are fundamental for rewriting conditional statements.\n\nImplication: \\(p \\to q \\equiv \\neg p \\lor q\\)\nContrapositive: \\(p \\to q \\equiv \\neg q \\to \\neg p\\)\nBi-implication: \\(p \\leftrightarrow q \\equiv (p \\to q) \\land (q \\to p)\\) and \\(p \\leftrightarrow q \\equiv (p \\land q) \\lor (\\neg p \\land \\neg q)\\)\n\n\n\n\n1.4 Normal Forms\nA normal form in logic is a standardized way of writing a formula. Two of the most common are Disjunctive Normal Form (DNF) and Conjunctive Normal Form (CNF).\n\nDisjunctive Normal Form (DNF): A formula is in DNF if it is a disjunction (ORs) of conjunctions (ANDs) of literals. A literal is a variable or its negation (e.g., \\(p\\) or \\(\\neg p\\)).\n\nExample: \\((p \\land q) \\lor (\\neg p \\land r)\\)\nTo create a DNF from a truth table, you identify all rows where the output is true. For each such row, you create a conjunction (an AND clause) that is true for that specific combination of inputs. Finally, you connect all these conjunctions with disjunctions (ORs).\n\nConjunctive Normal Form (CNF): A formula is in CNF if it is a conjunction (ANDs) of disjunctions (ORs) of literals.\n\nExample: \\((p \\lor q) \\land (\\neg p \\lor r)\\)\nTo create a CNF from a truth table, you identify all rows where the output is false. For each such row, you create a disjunction (an OR clause) that is false for that specific combination. Finally, you connect all these disjunctions with conjunctions (ANDs).\n\n\n\n\n1.5 Algebraic Normal Form (ANF)\nAlgebraic Normal Form (ANF), also known as a Zhegalkin polynomial, is a unique way to represent any logical formula using only two operators: XOR (\\(\\oplus\\)) and AND (\\(\\cdot\\)). The calculations are performed modulo 2, which means that \\(1 + 1 = 0\\). This form is a polynomial where variables can only have a power of 1 (since \\(x \\cdot x = x\\)).\nThe key conversion formulas are:\n\n\\(\\neg p \\equiv p \\oplus 1\\)\n\\(p \\land q \\equiv p \\cdot q\\) (or just \\(pq\\))\n\\(p \\lor q \\equiv p \\oplus q \\oplus pq\\)\n\\(p \\to q \\equiv 1 \\oplus p \\oplus pq\\)\n\\(p \\leftrightarrow q \\equiv 1 \\oplus x \\oplus y\\)\n\nImportant properties in modulo 2 arithmetic include: * \\(p \\oplus p \\equiv 0\\) * \\(p \\cdot p \\equiv p\\) (or \\(p^2 \\equiv p\\))\n\n\n\n\n2. Definitions\n\nTautology: A logical formula that is always true for any assignment of truth values to its variables.\nContradiction: A logical formula that is always false for any assignment of truth values to its variables.\nContingency: A logical formula that can be either true or false depending on the truth values of its variables.\nSatisfiability: The property of a formula for which there is at least one assignment of truth values that makes it true.\nLogical Equivalence: The relationship between two formulas that have identical truth tables.\nLiteral: A propositional variable or its negation (e.g., \\(p\\) or \\(\\neg p\\)).\nDisjunctive Normal Form (DNF): A logical formula expressed as a disjunction (OR) of one or more conjunctions (ANDs) of literals.\nConjunctive Normal Form (CNF): A logical formula expressed as a conjunction (AND) of one or more disjunctions (ORs) of literals.\nAlgebraic Normal Form (ANF): A canonical representation of a logical formula as a polynomial over a two-element field, using XOR (addition) and AND (multiplication). Also known as a Zhegalkin polynomial.\n\n\n\n\n3. Formulas\n\nDouble Negation: \\(\\neg(\\neg p) \\equiv p\\)\nDe Morgan’s Laws:\n\n\\(\\neg(p \\lor q) \\equiv \\neg p \\land \\neg q\\)\n\\(\\neg(p \\land q) \\equiv \\neg p \\lor \\neg q\\)\n\nDistributive Laws:\n\n\\(p \\land (q \\lor r) \\equiv (p \\land q) \\lor (p \\land r)\\)\n\\(p \\lor (q \\land r) \\equiv (p \\lor q) \\land (p \\lor r)\\)\n\nImplication Equivalence: \\(p \\to q \\equiv \\neg p \\lor q\\)\nBi-implication Equivalence: \\(p \\leftrightarrow q \\equiv (p \\land q) \\lor (\\neg p \\land \\neg q)\\)\nANF Conversions (Modulo 2):\n\n\\(\\neg p \\equiv p \\oplus 1\\)\n\\(p \\lor q \\equiv p \\oplus q \\oplus pq\\)\n\\(p \\to q \\equiv 1 \\oplus p \\oplus pq\\)\n\\(p \\leftrightarrow q \\equiv 1 \\oplus p \\oplus q\\)\n\\(p \\oplus p \\equiv 0\\)\n\\(p \\cdot p \\equiv p\\)\n\n\n\n\n\n4. Mistakes\n\nIncorrectly Applying De Morgan’s Law: A common error is only negating the variables but forgetting to flip the operator. For example, stating that \\(\\neg(p \\lor q)\\) is equivalent to \\(\\neg p \\lor \\neg q\\). Why it’s wrong: De Morgan’s Law requires both negating the terms and inverting the connective, so the correct equivalence is \\(\\neg p \\land \\neg q\\).\nConfusing the Distributive Laws: Incorrectly distributing OR over AND, or vice-versa. For example, assuming \\(p \\lor (q \\land r)\\) simplifies to \\((p \\lor q) \\land r\\). Why it’s wrong: The distribution must apply to both terms inside the parentheses, resulting in the correct form: \\((p \\lor q) \\land (p \\lor r)\\).\nTreating Implication as Commutative: Assuming that \\(p \\to q\\) is the same as \\(q \\to p\\). Why it’s wrong: These are different statements. \\(p \\to q\\) is the original implication, while \\(q \\to p\\) is its converse. They do not have the same truth table and are not logically equivalent.\nErrors in ANF Arithmetic: Forgetting that all arithmetic in ANF is modulo 2. For instance, simplifying \\(p \\oplus p\\) to \\(2p\\) instead of \\(0\\). Why it’s wrong: The XOR operation corresponds to addition in a field with only two elements, {0, 1}, where \\(1+1=0\\).\nIncorrectly Constructing DNF/CNF: Using the “false” rows of a truth table to construct DNF, or the “true” rows for CNF. Why it’s wrong: DNF is a disjunction of terms representing the true outcomes, so each term must correspond to a row where the function is true. CNF is a conjunction of clauses that rule out the false outcomes, so each clause must correspond to a row where the function is false.\nSimplifying \\(\\neg a \\to \\neg b\\) to \\(a \\to b\\): Assuming that negating both sides of an implication preserves the original meaning. Why it’s wrong: The statement \\(\\neg a \\to \\neg b\\) is the inverse of \\(a \\to b\\), not an equivalent form. The correct logical equivalence is the contrapositive: \\(\\neg b \\to \\neg a\\).\n\n\n\n\n5. Examples\n\n5.1. Proving Equivalence with a Truth Table\nQuestion: Prove the equivalence \\(p \\to q \\equiv \\neg p \\lor q\\).\n\n\nClick to see the solution\n\n\nSet up the table: Create columns for the variables \\(p\\) and \\(q\\), and for the expressions \\(p \\to q\\) and \\(\\neg p \\lor q\\). Include an intermediate column for \\(\\neg p\\).\nList all possible truth value combinations for \\(p\\) and \\(q\\).\nEvaluate \\(\\neg p\\): Fill in the column for \\(\\neg p\\) based on the values in the \\(p\\) column.\nEvaluate \\(p \\to q\\): This is false only when \\(p\\) is true and \\(q\\) is false.\nEvaluate \\(\\neg p \\lor q\\): This is true if either \\(\\neg p\\) is true or \\(q\\) is true.\nCompare the final columns: Check if the columns for \\(p \\to q\\) and \\(\\neg p \\lor q\\) are identical.\n\n\n\n\n\\(p\\)\n\\(q\\)\n\\(\\neg p\\)\n\\(p \\to q\\)\n\\(\\neg p \\lor q\\)\n\n\n\n\nT\nT\nF\nT\nT\n\n\nT\nF\nF\nF\nF\n\n\nF\nT\nT\nT\nT\n\n\nF\nF\nT\nT\nT\n\n\n\nAnswer: Since the truth columns for \\(p \\to q\\) and \\(\\neg p \\lor q\\) are identical, the two expressions are logically equivalent.\n\n\n\n5.2. Simplifying a Logical Expression\nQuestion: Simplify the expression \\(\\neg(p \\lor (\\neg p \\land q))\\).\n\n\nClick to see the solution\n\n\nApply De Morgan’s Law to the outermost negation: \\[ \\neg p \\land \\neg(\\neg p \\land q) \\]\nApply De Morgan’s Law to the second part of the expression: \\[ \\neg p \\land (\\neg(\\neg p) \\lor \\neg q) \\]\nApply the Double Negation Law to \\(\\neg(\\neg p)\\): \\[ \\neg p \\land (p \\lor \\neg q) \\]\nApply the Distributive Law: \\[ (\\neg p \\land p) \\lor (\\neg p \\land \\neg q) \\]\nApply the Contradiction Law (\\(\\neg p \\land p \\equiv F\\)): \\[ F \\lor (\\neg p \\land \\neg q) \\]\nApply the Identity Law (\\(F \\lor A \\equiv A\\)): \\[ \\neg p \\land \\neg q \\]\n\nAnswer: The simplified expression is \\(\\neg p \\land \\neg q\\).\n\n\n\n5.3. Finding Disjunctive Normal Form (DNF)\nQuestion: Find the DNF for the function \\(\\Phi(p, q, r)\\) defined by the following truth table:\n\n\n\n\\(p\\)\n\\(q\\)\n\\(r\\)\n\\(\\Phi\\)\n\n\n\n\nT\nT\nT\nT\n\n\nT\nT\nF\nF\n\n\nT\nF\nT\nT\n\n\nT\nF\nF\nF\n\n\nF\nT\nT\nF\n\n\nF\nT\nF\nF\n\n\nF\nF\nT\nT\n\n\nF\nF\nF\nF\n\n\n\n\n\nClick to see the solution\n\n\nIdentify the ‘true’ rows: The function \\(\\Phi\\) is true for the input combinations (T, T, T), (T, F, T), and (F, F, T).\nCreate a conjunction for each ‘true’ row:\n\nFor (T, T, T), the term is \\(p \\land q \\land r\\).\nFor (T, F, T), the term is \\(p \\land \\neg q \\land r\\).\nFor (F, F, T), the term is \\(\\neg p \\land \\neg q \\land r\\).\n\nCombine the conjunctions with disjunctions (ORs): \\[ (p \\land q \\land r) \\lor (p \\land \\neg q \\land r) \\lor (\\neg p \\land \\neg q \\land r) \\]\n\nAnswer: The DNF is \\((p \\land q \\land r) \\lor (p \\land \\neg q \\land r) \\lor (\\neg p \\land \\neg q \\land r)\\).\n\n\n\n5.4. Finding Conjunctive Normal Form (CNF)\nQuestion: Find the CNF for the function \\(\\Psi(p, q)\\) defined by \\(p \\leftrightarrow q\\).\n\n\n\n\\(p\\)\n\\(q\\)\n\\(p \\leftrightarrow q\\)\n\n\n\n\nT\nT\nT\n\n\nT\nF\nF\n\n\nF\nT\nF\n\n\nF\nF\nT\n\n\n\n\n\nClick to see the solution\n\n\nIdentify the ‘false’ rows: The function is false for the input combinations (T, F) and (F, T).\nCreate a disjunction for each ‘false’ row that is false for that specific input. To do this, negate each literal in the row and combine them with OR.\n\nFor (T, F), we negate the literals to get \\(\\neg p\\) and \\(\\neg(\\neg q) = q\\). The clause is \\(\\neg p \\lor q\\).\nFor (F, T), we negate the literals to get \\(\\neg(\\neg p) = p\\) and \\(\\neg q\\). The clause is \\(p \\lor \\neg q\\).\n\nCombine the disjunctions with conjunctions (ANDs): \\[ (\\neg p \\lor q) \\land (p \\lor \\neg q) \\]\n\nAnswer: The CNF is \\((\\neg p \\lor q) \\land (p \\lor \\neg q)\\).\n\n\n\n5.5. Converting to Algebraic Normal Form (ANF)\nQuestion: Convert the expression \\((a \\land \\neg b) \\to a\\) to ANF.\n\n\nClick to see the solution\n\n\nSubstitute the logical operators with their ANF equivalents.\n\n\\(\\neg b \\equiv b \\oplus 1\\)\n\\(X \\to Y \\equiv 1 \\oplus X \\oplus XY\\)\n\nFirst, convert the term inside the parenthesis, \\(a \\land \\neg b\\): \\[ a \\land (b \\oplus 1) = a(b \\oplus 1) = ab \\oplus a \\]\nNow, substitute this result into the implication formula, where \\(X = ab \\oplus a\\) and \\(Y = a\\): \\[ 1 \\oplus (ab \\oplus a) \\oplus (ab \\oplus a)a \\]\nDistribute the final \\(a\\) term: \\[ 1 \\oplus ab \\oplus a \\oplus (aba \\oplus aa) \\]\nSimplify using \\(a \\cdot a = a^2 = a\\): \\[ 1 \\oplus ab \\oplus a \\oplus (ab \\oplus a) \\]\nGroup like terms. Remember that \\(X \\oplus X = 0\\) in modulo 2 arithmetic: \\[ 1 \\oplus (ab \\oplus ab) \\oplus (a \\oplus a) \\] \\[ 1 \\oplus 0 \\oplus 0 \\]\nFinal simplification: \\[ 1 \\]\n\nAnswer: The ANF is \\(1\\), which means the original expression is a tautology.\n\n\n\n5.6. Negating a Complex Expression\nQuestion: Apply De Morgan’s laws to negate and simplify the expression \\((\\neg a \\lor b) \\land (c \\lor \\neg d)\\).\n\n\nClick to see the solution\n\n\nEnclose the entire expression in a negation: \\[ \\neg((\\neg a \\lor b) \\land (c \\lor \\neg d)) \\]\nApply De Morgan’s Law to the central AND (\\(\\land\\)) operator. This splits the negation and flips the operator to OR (\\(\\lor\\)): \\[ \\neg(\\neg a \\lor b) \\lor \\neg(c \\lor \\neg d) \\]\nApply De Morgan’s Law to the first part, \\(\\neg(\\neg a \\lor b)\\): \\[ (\\neg(\\neg a) \\land \\neg b) \\lor \\neg(c \\lor \\neg d) \\]\nApply the Double Negation Law to \\(\\neg(\\neg a)\\): \\[ (a \\land \\neg b) \\lor \\neg(c \\lor \\neg d) \\]\nApply De Morgan’s Law to the second part, \\(\\neg(c \\lor \\neg d)\\): \\[ (a \\land \\neg b) \\lor (\\neg c \\land \\neg(\\neg d)) \\]\nApply the Double Negation Law to \\(\\neg(\\neg d)\\): \\[ (a \\land \\neg b) \\lor (\\neg c \\land d) \\]\n\nAnswer: The negated and simplified expression is \\((a \\land \\neg b) \\lor (\\neg c \\land d)\\).\n\n\n\n5.7. Simplification Using Logical Laws\nQuestion: Prove that \\((p \\to q) \\land (p \\to r) \\equiv p \\to (q \\land r)\\).\n\n\nClick to see the solution\n\n\nStart with the left-hand side (LHS) and convert implications to their \\(\\neg p \\lor q\\) form: \\[ (\\neg p \\lor q) \\land (\\neg p \\lor r) \\]\nThis expression is in the form \\((A \\lor B) \\land (A \\lor C)\\). We can use the Distributive Law in reverse, where \\(A = \\neg p\\), \\(B = q\\), and \\(C = r\\): \\[ \\neg p \\lor (q \\land r) \\]\nNow, convert this expression back from its OR form into an implication, using the equivalence \\(\\neg X \\lor Y \\equiv X \\to Y\\): \\[ p \\to (q \\land r) \\]\nThis matches the right-hand side (RHS) of the original statement.\n\nAnswer: Since the left-hand side can be transformed into the right-hand side using logical equivalence laws, the equivalence is proven.",
    "crumbs": [
      "Discrete Mathematics",
      "2. Logical Equivalence, Normal Forms (DNF, CNF, ANF)"
    ]
  },
  {
    "objectID": "Discrete Mathematics/lec_1.html",
    "href": "Discrete Mathematics/lec_1.html",
    "title": "1. Truth Tables, Normal Forms (DNF, CNF)",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 Propositions and Logical Values\nIn logic, a proposition is a statement that can be definitively determined as either True or False, but not both. It is the fundamental building block of logical expressions. For example, “The sky is blue” is a proposition. “What time is it?” is not, because it’s a question and cannot be assigned a truth value. In discrete mathematics and computing, we represent these values numerically:\n\nTrue is represented by 1.\nFalse is represented by 0.\n\n\n\n1.2 Logical Operators\nLogical operators are symbols used to connect propositions and form more complex logical expressions. Each operator has a specific rule for determining the truth value of the expression it forms.\n\n1.2.1 Negation (NOT)\nThe Negation operator, denoted by ¬ (e.g., ¬P), inverts the truth value of a proposition. If P is true, ¬P is false. If P is false, ¬P is true. It corresponds to the word “not”.\n\n\n1.2.2 Conjunction (AND)\nThe Conjunction operator, denoted by & or ∧ (e.g., P ∧ Q), connects two propositions. The result is True only if both propositions are true. If either or both are false, the result is false. It corresponds to the word “and”.\n\n\n1.2.3 Disjunction (OR)\nThe Disjunction operator, denoted by ∨ (e.g., P ∨ Q), connects two propositions. The result is True if at least one of the propositions is true. It is only false when both propositions are false. This is also known as an inclusive OR.\n\n\n1.2.4 Implication (IF…THEN)\nThe Implication operator, denoted by → (e.g., P → Q), represents a conditional statement. It is read as “if P, then Q”. The expression P → Q is only False when P is true and Q is false. In all other cases, it is true. This can seem counter-intuitive. Think of it as a promise: “If I pass the exam (P), then I will celebrate (Q)”. The only way the promise is broken is if I pass the exam but do not celebrate. If I don’t pass the exam, the promise is not broken, regardless of whether I celebrate or not.\n\n\n1.2.5 Equivalence (IF AND ONLY IF)\nThe Equivalence operator, denoted by ↔︎ (e.g., P ↔︎ Q), is also known as a biconditional. The result is True only when both propositions have the same truth value (both true or both false).\n\n\n\n1.3 Truth Tables\nA truth table is a tool used to systematically determine the truth value of a complex logical formula for every possible combination of truth values of its component propositions.\n\nConstruction: To build a truth table for a formula with n distinct propositional variables, you need \\(2^n\\) rows to cover all possible scenarios.\nStructure: The initial columns list all combinations of truth values for the variables. Subsequent columns break down the complex formula into smaller parts, building up to the final result in the last column.\n\n\n\n\n1.4 Normal Forms\nA normal form in logic is a standardized way of writing a logical formula. Having a standard representation is useful for comparing formulas, simplifying them, and for automated processing in computer science. The two most common are Disjunctive Normal Form (DNF) and Conjunctive Normal Form (CNF).\n\n1.4.1 Disjunctive Normal Form (DNF)\nA formula is in Disjunctive Normal Form (DNF) if it is a disjunction (ORs) of conjuncts (ANDs of literals). A literal is a variable or its negation.\n\nStructure: \\((A \\land \\neg B) \\lor (C \\land D) \\lor (\\neg E)\\)\nIntuition: Think of DNF as describing the specific conditions that make the formula True. Each conjunct represents one “true” scenario. The entire formula is true if any one of these scenarios is met.\n\n\n\nAlgorithm to Find DNF from a Truth Table:\n\nIdentify all rows in the truth table where the final result is 1 (True).\nFor each of these rows, create a conjunct (an AND clause).\nWithin each conjunct, if a variable’s value in that row is 1, use the variable directly (e.g., A).\nIf a variable’s value is 0, use its negation (e.g., ¬A).\nConnect all the resulting conjuncts with the disjunction (∨) operator.\n\n\n\n1.4.2 Conjunctive Normal Form (CNF)\nA formula is in Conjunctive Normal Form (CNF) if it is a conjunction (ANDs) of disjuncts (ORs of literals).\n\nStructure: \\((A \\lor \\neg B) \\land (C \\lor D) \\land (\\neg E)\\)\nIntuition: Think of CNF as a set of rules or constraints, all of which must be satisfied for the formula to be true. The formula is made false if any single clause is false.\n\n\n\nAlgorithm to Find CNF from a Truth Table:\n\nIdentify all rows in the truth table where the final result is 0 (False).\nFor each of these rows, create a disjunct (an OR clause).\nWithin each disjunct, if a variable’s value in that row is 0, use the variable directly (e.g., A).\nIf a variable’s value is 1, use its negation (e.g., ¬A). (This is the opposite of the DNF rule).\nConnect all the resulting disjuncts with the conjunction (∧) operator.\n\n\n\n\n\n2. Definitions\n\nProposition: A declarative statement that is unambiguously either true or false.\nTruth Table: A table that displays the truth values of a logical formula for all possible combinations of truth values of its component variables.\nLiteral: A propositional variable (e.g., A) or its negation (e.g., ¬A).\nConjunct (Minterm): A conjunction (AND) of one or more literals. For example, A ∧ ¬B ∧ C.\nDisjunct (Maxterm): A disjunction (OR) of one or more literals. For example, A ∨ ¬B ∨ C.\nDisjunctive Normal Form (DNF): A logical formula written as a disjunction of conjuncts. It is an OR of ANDs.\nConjunctive Normal Form (CNF): A logical formula written as a conjunction of disjuncts. It is an AND of ORs.\n\n\n\n3. Formulas\n\nImplication Equivalence: The implication P → Q is logically equivalent to ¬P ∨ Q.\nBiconditional Equivalence: The equivalence P ↔︎ Q is logically equivalent to (P → Q) ∧ (Q → P), which further expands to (¬P ∨ Q) ∧ (P ∨ ¬Q).\nDe Morgan’s Laws:\n\n¬(P ∧ Q) ≡ ¬P ∨ ¬Q\n¬(P ∨ Q) ≡ ¬P ∧ ¬Q\n\nGeneral Formula for DNF: For a function \\(f(x_1, ..., x_n)\\): \\[ f = \\bigvee_{f(\\sigma_1, ..., \\sigma_n)=1} (x_1^{\\sigma_1} \\land ... \\land x_n^{\\sigma_n}) \\] Where \\(x^1\\) means \\(x\\) and \\(x^0\\) means \\(\\neg x\\).\nGeneral Formula for CNF: For a function \\(f(x_1, ..., x_n)\\): \\[ f = \\bigwedge_{f(\\sigma_1, ..., \\sigma_n)=0} (x_1^{\\overline{\\sigma_1}} \\lor ... \\lor x_n^{\\overline{\\sigma_n}}) \\] Where \\(x^{\\overline{1}}\\) means \\(\\neg x\\) and \\(x^{\\overline{0}}\\) means \\(x\\).\n\n\n\n4. Mistakes\n\nConfusing the Direction of Implication: Assuming that if P → Q is true, then Q → P must also be true. Why it’s wrong: “If it is raining, the ground is wet” is true. However, “If the ground is wet, it is raining” is not necessarily true (e.g., a sprinkler could be on). The implication is not symmetric.\nIncorrectly Negating Expressions: Writing ¬(A ∧ B) as ¬A ∧ ¬B. Why it’s wrong: This violates De Morgan’s laws. The correct negation is ¬A ∨ ¬B. The negation of “it is cold AND raining” is “it is NOT cold OR it is NOT raining”.\nMixing up DNF and CNF Creation Rules: Using the wrong rule for variables when constructing normal forms from a truth table. For example, using A for a 1 when building a CNF clause. Why it’s wrong: The rules are inverted. For CNF, you look at the 0 (false) rows, and a 1 in the input corresponds to a negated literal (¬A) in the clause.\nCreating Invalid Normal Form Structures: Writing a DNF with disjunctions (ORs) inside the conjuncts, such as (A ∨ B) ∧ C. Why it’s wrong: A DNF must be strictly an OR of ANDs. The term (A ∨ B) is not a valid conjunct.\nForgetting Rows in a Truth Table: Not listing all \\(2^n\\) possible combinations of inputs. Why it’s wrong: An incomplete truth table can lead to an incorrect analysis of the formula and incorrect DNF/CNF representations.\nMisinterpreting the P → Q case where P is False: Believing that if the premise P is false, the implication P → Q is also false. Why it’s wrong: In classical logic, an implication with a false premise is always considered true. This is known as the principle of “ex falso quodlibet” (from falsehood, anything follows).\n\n\n\n5. Examples\n\n5.1. Construct a Truth Table\nQuestion: Construct the full truth table for the expression (A ∨ B) → ¬A.\n\n\nClick to see the solution\n\n\nSet up columns: We need columns for the variables A and B, the intermediate expression A ∨ B, the negation ¬A, and the final expression (A ∨ B) → ¬A.\nList input combinations: For two variables, there are \\(2^2=4\\) combinations.\nEvaluate A ∨ B: This is true if A or B (or both) are true.\nEvaluate ¬A: This is the opposite of the value of A.\nEvaluate the final implication: The result is false only when the left side (A ∨ B) is true and the right side (¬A) is false.\n\n\n\n\nA\nB\nA ∨ B\n¬A\n(A ∨ B) → ¬A\n\n\n\n\n0\n0\n0\n1\n1\n\n\n0\n1\n1\n1\n1\n\n\n1\n0\n1\n0\n0\n\n\n1\n1\n1\n0\n0\n\n\n\nAnswer: The final truth values for the expression are (1, 1, 0, 0).\n\n\n\n5.2. Truth Table with Equivalence\nQuestion: Construct the truth table for (A → B) ↔︎ (¬B → ¬A).\n\n\nClick to see the solution\n\n\nSet up columns: We need columns for A, B, A → B, ¬B, ¬A, ¬B → ¬A, and the final expression.\nList input combinations: Four rows for variables A and B.\nEvaluate A → B: False only when A=1 and B=0.\nEvaluate negations: ¬A and ¬B.\nEvaluate ¬B → ¬A: False only when ¬B=1 and ¬A=0 (which means B=0 and A=1).\nEvaluate the final equivalence: The result is true when A → B and ¬B → ¬A have the same truth value.\n\n\n\n\nA\nB\nA → B\n¬B\n¬A\n¬B → ¬A\n(A → B) ↔︎ (¬B → ¬A)\n\n\n\n\n0\n0\n1\n1\n1\n1\n1\n\n\n0\n1\n1\n0\n1\n1\n1\n\n\n1\n0\n0\n1\n0\n0\n1\n\n\n1\n1\n1\n0\n0\n1\n1\n\n\n\nAnswer: The expression is a tautology; its truth values are (1, 1, 1, 1).\n\n\n\n5.3. Find DNF from a Truth Table\nQuestion: A function of two variables, T(x, y), has the truth table result (0, 1, 1, 0). Find its Disjunctive Normal Form (DNF). The input order is (0,0), (0,1), (1,0), (1,1).\n\n\nClick to see the solution\n\n\nIdentify the ‘True’ rows: The function T(x, y) is true (1) for the input combinations (x=0, y=1) and (x=1, y=0).\nCreate a conjunct for the first ‘True’ row (0, 1):\n\nx is 0, so we use ¬x.\ny is 1, so we use y.\nThe conjunct is (¬x ∧ y).\n\nCreate a conjunct for the second ‘True’ row (1, 0):\n\nx is 1, so we use x.\ny is 0, so we use ¬y.\nThe conjunct is (x ∧ ¬y).\n\nCombine the conjuncts with OR: Join the terms from steps 2 and 3 with ∨.\n\nAnswer: The DNF is (¬x ∧ y) ∨ (x ∧ ¬y). (This is the formula for XOR).\n\n\n\n5.4. Find CNF from a Truth Table\nQuestion: A function of two variables, T(x, y), has the truth table result (0, 1, 1, 0). Find its Conjunctive Normal Form (CNF).\n\n\nClick to see the solution\n\n\nIdentify the ‘False’ rows: The function T(x, y) is false (0) for the input combinations (x=0, y=0) and (x=1, y=1).\nCreate a disjunct for the first ‘False’ row (0, 0):\n\nx is 0, so we use x.\ny is 0, so we use y.\nThe disjunct is (x ∨ y).\n\nCreate a disjunct for the second ‘False’ row (1, 1):\n\nx is 1, so we use ¬x.\ny is 1, so we use ¬y.\nThe disjunct is (¬x ∨ ¬y).\n\nCombine the disjuncts with AND: Join the terms from steps 2 and 3 with ∧.\n\nAnswer: The CNF is (x ∨ y) ∧ (¬x ∨ ¬y).\n\n\n\n5.5. DNF and CNF for Three Variables\nQuestion: Find both the DNF and CNF for the function T(A, B, C) given by the result vector (0, 1, 0, 1, 1, 0, 1, 0).\n\n\nClick to see the solution\n\nPart 1: Disjunctive Normal Form (DNF)\n\nIdentify ‘True’ rows: The output is 1 for inputs: (0,0,1), (0,1,1), (1,0,0), and (1,1,0).\nCreate conjuncts for each ‘True’ row:\n\n(0,0,1) → (¬A ∧ ¬B ∧ C)\n(0,1,1) → (¬A ∧ B ∧ C)\n(1,0,0) → (A ∧ ¬B ∧ ¬C)\n(1,1,0) → (A ∧ B ∧ ¬C)\n\nCombine with OR: (¬A ∧ ¬B ∧ C) ∨ (¬A ∧ B ∧ C) ∨ (A ∧ ¬B ∧ ¬C) ∨ (A ∧ B ∧ ¬C)\n\nPart 2: Conjunctive Normal Form (CNF)\n\nIdentify ‘False’ rows: The output is 0 for inputs: (0,0,0), (0,1,0), (1,0,1), and (1,1,1).\nCreate disjuncts for each ‘False’ row:\n\n(0,0,0) → (A ∨ B ∨ C)\n(0,1,0) → (A ∨ ¬B ∨ C)\n(1,0,1) → (¬A ∨ B ∨ ¬C)\n(1,1,1) → (¬A ∨ ¬B ∨ ¬C)\n\nCombine with AND: (A ∨ B ∨ C) ∧ (A ∨ ¬B ∨ C) ∧ (¬A ∨ B ∨ ¬C) ∧ (¬A ∨ ¬B ∨ ¬C)\n\nAnswer: * DNF: (¬A ∧ ¬B ∧ C) ∨ (¬A ∧ B ∧ C) ∨ (A ∧ ¬B ∧ ¬C) ∨ (A ∧ B ∧ ¬C) * CNF: (A ∨ B ∨ C) ∧ (A ∨ ¬B ∨ C) ∧ (¬A ∨ B ∨ ¬C) ∧ (¬A ∨ ¬B ∨ ¬C)\n\n\n\n5.6. Convert Formula to DNF\nQuestion: Convert the formula P → (P ∧ Q) to its DNF by first creating its truth table.\n\n\nClick to see the solution\n\n\nCreate the truth table:\n\n\n\n\nP\nQ\nP ∧ Q\nP → (P ∧ Q)\n\n\n\n\n0\n0\n0\n1\n\n\n0\n1\n0\n1\n\n\n1\n0\n0\n0\n\n\n1\n1\n1\n1\n\n\n\n\nIdentify the ‘True’ rows: The final expression is true for inputs (0,0), (0,1), and (1,1).\nCreate conjuncts:\n\n(0,0) → (¬P ∧ ¬Q)\n(0,1) → (¬P ∧ Q)\n(1,1) → (P ∧ Q)\n\nCombine with OR: (¬P ∧ ¬Q) ∨ (¬P ∧ Q) ∨ (P ∧ Q)\n\nAnswer: The DNF is (¬P ∧ ¬Q) ∨ (¬P ∧ Q) ∨ (P ∧ Q).\n\n\n\n5.7. Convert Formula to CNF\nQuestion: Convert the formula P ↔︎ ¬Q to its CNF by first creating its truth table.\n\n\nClick to see the solution\n\n\nCreate the truth table:\n\n\n\n\nP\nQ\n¬Q\nP ↔︎ ¬Q\n\n\n\n\n0\n0\n1\n0\n\n\n0\n1\n0\n1\n\n\n1\n0\n1\n1\n\n\n1\n1\n0\n0\n\n\n\n\nIdentify the ‘False’ rows: The final expression is false for inputs (0,0) and (1,1).\nCreate disjuncts:\n\n(0,0) → (P ∨ Q)\n(1,1) → (¬P ∨ ¬Q)\n\nCombine with AND: (P ∨ Q) ∧ (¬P ∨ ¬Q)\n\nAnswer: The CNF is (P ∨ Q) ∧ (¬P ∨ ¬Q).",
    "crumbs": [
      "Discrete Mathematics",
      "1. Truth Tables, Normal Forms (DNF, CNF)"
    ]
  },
  {
    "objectID": "Computer Architecture/lec_3.html",
    "href": "Computer Architecture/lec_3.html",
    "title": "3. Von Neumann and Harvard Architectures, Performance Metrics of Computers, Combinational Logic Circuits",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 Computer Architectures\n\n1.1.1 Harvard Architecture\nThe Harvard Architecture is a computer architecture that utilizes physically separate storage and signal pathways for instructions and data. The CPU can read an instruction and perform a data memory access at the same time, even without a cache.\n\nPrinciple: Instructions and data are stored in different physical memory units, each with dedicated buses.\nMemory Access: The instruction memory is typically read-only, while the data memory is read-write.\nPros: It features lower performance overheads because instructions and data can be fetched concurrently, leading to faster execution.\nCons: The primary drawback is the increased hardware complexity and cost required to implement separate memory systems and buses.\nUsage: It is commonly found in specialized systems like microcontrollers and Digital Signal Processors (DSPs), as well as in the internal cache structure of most modern CPUs.\n\n\n\n\n1.1.2 Von Neumann Architecture\nAlso known as the Princeton or Stored-Program architecture, the Von Neumann Architecture is the dominant design for general-purpose computers. It is based on the concept of storing both program instructions and the data they operate on in the same memory.\n\nPrinciple: A single memory unit and a single bus are used for both instructions and data. Instructions are typically executed sequentially.\nPros: This design simplifies memory management and hardware implementation, making it more cost-effective and flexible.\nCons: It creates a performance limitation known as the Von Neumann bottleneck, where the shared bus becomes a chokepoint as the CPU cannot fetch instructions and data simultaneously.\nUsage: This architecture is used in virtually all modern general-purpose computers, including desktops, laptops, and servers.\n\n\n\n\n\n1.2 Performance Metrics\n\n1.2.1 Program-Level Metrics\nThese metrics evaluate the performance of a specific program’s execution.\n\nLatency (or Delay/Response Time): This is the time elapsed between a program’s invocation (the call) and the start of its actual execution. This delay is often caused by preparatory activities such as operating system overhead or memory allocation.\nExecution Time: This measures the total time from the program’s invocation until its completion. It includes both latency and the actual program execution time.\n\n\n\n1.2.2 Hardware-Level Metrics\nThese metrics describe the capabilities of the hardware platform.\n\nBandwidth: The theoretical maximum number of jobs (or instructions) that can be executed concurrently. For example, a single-core processor has a bandwidth of 1, while a multi-core processor has a bandwidth equal to the number of cores.\nThroughput: The average number of concurrently executing jobs over a period of time. It reflects the actual performance, which is often lower than the theoretical bandwidth.\nUtilization: The percentage of time a specific hardware component is actively in use. For example, a CPU utilization of 57% means the CPU was busy for 57% of the measurement period.\n\n\n\n1.2.3 CPU vs. GPU Performance Philosophy\nCPUs and GPUs are designed with different performance goals.\n\nCPU (Latency Optimized): A CPU is like a sports car. It is designed to execute a small number of tasks (or threads) as quickly as possible, minimizing latency for each one.\nGPU (Throughput Optimized): A GPU is like a bus. It is designed to handle a massive number of tasks simultaneously, maximizing overall throughput, even if the latency for any single task is higher than a CPU’s.\n\n\n\n\n1.3 Processor and System Performance Characteristics\n\n1.3.1 CPU Clock\nThe speed of a processor is governed by its internal clock.\n\nClock Cycle: A CPU operates on a periodic clock signal. The time it takes to complete one on-off cycle is the clock cycle time or period, denoted as \\(T_c\\) (measured in nanoseconds).\nClock Frequency (or Rate): This is the inverse of the clock cycle time (\\(F_c = 1 / T_c\\)) and represents the number of cycles the CPU can execute per second, measured in Hertz (Hz) or Gigahertz (GHz). The duration of a clock cycle is determined by the time required for the slowest instruction to complete.\n\n\n\n1.3.2 Average Performance of Computer Components\nThe following are typical performance characteristics for modern desktop and laptop components.\n\nCPU (Central Processing Unit):\n\nCores: 4-6\nSpeed: 2.0-3.5 GHz (up to 5.0 GHz in Turbo mode)\nCapacity: 32 or 64 bits per register\n\nCache Memory:\n\nL1 Cache: Operates at CPU speed (~100x faster than RAM) with a capacity of 32-128 KB.\nL2 Cache: About 25x faster than RAM, with a capacity of 256-512 KB.\nL3 Cache: About 2x faster than RAM, with a capacity of 32-64 MB.\n\nSystem Memory (RAM):\n\nSpeed: 18-36 GB/sec\nCapacity: 8-32 GB\n\nStorage Devices:\n\nSSD (Solid State Drive): Speed of 0.5-2 GB/sec, capacity of 250-500 GB.\nHDD (Hard Disk Drive): Speed of 0.1-0.15 GB/sec, capacity of 100-150 GB.\n\nGPU (Graphics Processing Unit):\n\nCores: 700-2000 (structurally simpler than CPU cores)\nSpeed: 1.5-2.0 GHz\nArchitecture: Optimized for parallel execution (SIMD), making it ~100x faster than a CPU for highly parallel tasks.\nGPU Memory Speed: 300-500 GB/sec\nGPU Memory Capacity: 8-16 GB\n\n\n\n\n\n1.4 Amdahl’s Law\nAmdahl’s Law provides a formula to find the maximum expected improvement to an overall system when only part of the system is improved. It is often used to predict the theoretical maximum speedup of a program when using multiple processors.\n\nConcept: Any program consists of two parts: a serial portion that must be executed sequentially and a parallel portion that can be divided among multiple cores.\nImplication: The speedup gained from adding more cores is ultimately limited by the serial portion of the program. Even with an infinite number of processors, the total execution time can never be less than the time required to run the serial part.\nFormula: The speedup of a program is given by: \\[ \\text{speedup} = \\frac{1}{x + \\frac{1-x}{m}} \\] where \\(x\\) is the proportion of the program that is serial, and \\(m\\) is the number of processor cores.\n\n\n\n1.5 Combinational Logic Circuits\n\n1.5.1 Foundational Terminology\n\nBoolean Function: A function that takes one or more binary inputs (0 or 1) and produces a single binary output. It is the mathematical foundation of digital circuits, introduced by George Boole.\nTruth Table: A table that exhaustively lists all possible input combinations to a Boolean function and shows the corresponding output for each combination.\nLogic Gate: An electronic device, typically built from transistors, that implements a basic Boolean function. Examples include AND, OR, and NOT gates.\nLogic Circuit: A collection of interconnected logic gates designed to perform a more complex Boolean function. The output of one gate can become the input for another.\n\n\n\n1.5.2 Basic Logic Gates\n\nAND: Outputs 1 only if all of its inputs are 1.\nOR: Outputs 1 if at least one of its inputs is 1.\nNOT: Outputs the inverse of its single input (1 becomes 0, 0 becomes 1).\nNAND (Not-AND): Outputs the inverse of an AND gate. It is 0 only when all inputs are 1.\nNOR (Not-OR): Outputs the inverse of an OR gate. It is 1 only when all inputs are 0.\nXOR (Exclusive-OR): Outputs 1 only if the inputs are different. Unlike an OR gate, it outputs 0 if both inputs are 1.\nXNOR (Exclusive-NOR): Outputs the inverse of an XOR gate. It outputs 1 only if the inputs are the same.\n\n\n\n\n1.5.3 Universal Logic Gates\nA universal gate is a logic gate that can be used to implement any other logic gate or Boolean function without needing any other type of gate.\n\nNAND and NOR Gates: Both NAND and NOR gates are universal. For instance, a NOT gate can be made from a NAND gate by connecting its inputs together. An AND gate can be made from two NAND gates, and an OR gate from three.\nSignificance: This property is crucial in digital circuit design because it means that any complex logic circuit can be constructed using only one type of gate, which simplifies the manufacturing process.\n\n\n\n\n\n2. Definitions\n\nBoolean Function: A mathematical function that takes binary inputs (values of 0 or 1) and produces a single binary output.\nTruth Table: A tabular representation of a Boolean function that lists all possible input combinations and their corresponding outputs.\nLogic Gate: A physical electronic device that performs a basic logical operation, implementing a Boolean function.\nLogic Circuit: A structure composed of interconnected logic gates designed to implement a more complex Boolean function.\nUniversal Gate: A logic gate (such as NAND or NOR) from which any other logic gate can be constructed.\nHarvard Architecture: A computer architecture with separate memory and buses for instructions and data, allowing for simultaneous access.\nVon Neumann Architecture: A computer architecture that uses a single memory storage system for both instructions and data.\nVon Neumann Bottleneck: A performance limitation in Von Neumann architectures caused by the shared bus between the CPU and memory, which prevents simultaneous fetching of instructions and data.\nLatency: The time delay between the initiation of a process and the start of its actual execution.\nExecution Time: The total time required for a program to run from invocation to completion.\nBandwidth: The theoretical maximum rate at which data or instructions can be processed by a system.\nThroughput: The actual average rate at which data or instructions are processed over a given period.\nAmdahl’s Law: A formula used to calculate the maximum potential speedup of a system when only a part of it is improved.\n\n\n\n3. Formulas\n\nClock Frequency: \\(F_c = \\frac{1}{T_c}\\), where \\(T_c\\) is the clock cycle time.\nAmdahl’s Law Speedup: \\(\\text{speedup} = \\frac{1}{x + \\frac{1-x}{m}}\\), where \\(x\\) is the serial portion and \\(m\\) is the number of cores.\nBoolean AND: \\(F(A, B) = A \\cdot B\\)\nBoolean OR: \\(F(A, B) = A + B\\)\nBoolean NOT: \\(F(A) = A'\\)\n\n\n\n4. Mistakes\n\nConfusing Harvard and Von Neumann architectures: A common error is mixing up their core principles. Why it’s wrong: Harvard uses separate memories for instructions and data, whereas Von Neumann uses a single, shared memory. This fundamental difference dictates their respective strengths and weaknesses.\nMisinterpreting Amdahl’s Law: Believing that doubling the number of cores will double a program’s speed. Why it’s wrong: Amdahl’s Law shows that the serial portion of a program creates a hard limit on the maximum achievable speedup, which is often far less than linear.\nUsing Throughput and Bandwidth interchangeably: Treating these terms as synonyms. Why it’s wrong: Bandwidth is the theoretical peak performance (e.g., the speed limit on a highway), while throughput is the actual, measured performance (e.g., the average speed of traffic), which is affected by real-world factors.\nTreating an XOR gate as an OR gate: Forgetting the “exclusive” property of XOR. Why it’s wrong: An OR gate outputs true (1) if one or both inputs are true. An XOR gate outputs true (1) only if the inputs are different; it outputs false (0) if both inputs are true.\nUnderestimating the Von Neumann Bottleneck: Ignoring the performance impact of the shared bus for data and instructions. Why it’s wrong: This bottleneck is a critical constraint in modern computing, as CPUs often have to wait for the bus to be free, and it is a primary motivation for developing complex memory hierarchies like caches.\n\n\n\n5. Examples\n\n5.1. Truth Table for a Boolean Function\nQuestion: Create a truth table for the Boolean function \\(F(A, B, C) = (A \\cdot B) + C\\).\n\n\nClick to see the solution\n\nWe need to evaluate the function for all 8 possible combinations of inputs A, B, and C. We first compute the AND term (\\(A \\cdot B\\)) and then OR it with C.\n\n\n\nA\nB\nC\nA · B\n(A · B) + C\n\n\n\n\n0\n0\n0\n0\n0\n\n\n0\n0\n1\n0\n1\n\n\n0\n1\n0\n0\n0\n\n\n0\n1\n1\n0\n1\n\n\n1\n0\n0\n0\n0\n\n\n1\n0\n1\n0\n1\n\n\n1\n1\n0\n1\n1\n\n\n1\n1\n1\n1\n1\n\n\n\n\n\n\n5.2. Implementing an OR Gate with NAND Gates\nQuestion: Show how to construct an OR gate using only two-input NAND gates.\n\n\nClick to see the solution\n\nThe Boolean expression for an OR gate is \\(A + B\\). Using De Morgan’s laws, we know that \\(A + B = \\overline{\\overline{A} \\cdot \\overline{B}}\\). This expression can be implemented with NAND gates.\n\nCreate NOT gates: To get \\(\\overline{A}\\) (NOT A) and \\(\\overline{B}\\) (NOT B), we use two NAND gates. For the first gate, connect both inputs to A. For the second, connect both inputs to B.\nCombine the results: Feed the outputs of these two NOT gates (\\(\\overline{A}\\) and \\(\\overline{B}\\)) into a third NAND gate. The output of this final gate will be \\(\\overline{\\overline{A} \\cdot \\overline{B}}\\), which is equivalent to \\(A + B\\).\n\n\nAnswer: It requires three NAND gates to implement a two-input OR gate.\n\n\n\n5.3. Amdahl’s Law Calculation\nQuestion: A program spends 80% of its execution time in a parallelizable section. What is the maximum possible speedup if you run this program on a machine with 4 cores?\n\n\nClick to see the solution\n\n\nIdentify variables:\n\nThe parallelizable portion is 80%, so \\(1 - x = 0.8\\).\nThe serial portion is the remainder, so \\(x = 0.2\\).\nThe number of cores is \\(m = 4\\).\n\nApply Amdahl’s Law formula: \\[ \\text{speedup} = \\frac{1}{x + \\frac{1-x}{m}} \\] \\[ \\text{speedup} = \\frac{1}{0.2 + \\frac{0.8}{4}} \\]\nCalculate the result: \\[ \\text{speedup} = \\frac{1}{0.2 + 0.2} = \\frac{1}{0.4} = 2.5 \\]\n\nAnswer: The maximum speedup with 4 cores is 2.5x.\n\n\n\n5.4. Clock Cycle Time Calculation\nQuestion: A CPU has a clock rate of 3.2 GHz. What is its clock cycle time in nanoseconds?\n\n\nClick to see the solution\n\n\nConvert GHz to Hz:\n\n\\(3.2 \\text{ GHz} = 3.2 \\times 10^9 \\text{ Hz}\\)\n\nUse the formula \\(T_c = 1 / F_c\\):\n\n\\(T_c = \\frac{1}{3.2 \\times 10^9 \\text{ Hz}} \\approx 0.3125 \\times 10^{-9} \\text{ seconds}\\)\n\nConvert seconds to nanoseconds:\n\nSince \\(1 \\text{ ns} = 10^{-9} \\text{ s}\\), the clock cycle time is \\(0.3125\\) ns.\n\n\nAnswer: The clock cycle time is 0.3125 ns.\n\n\n\n5.5. Architecture Identification\nQuestion: A microcontroller for an industrial robot has two separate memory blocks: one for the control program (firmware) and one for storing sensor readings. Which computer architecture does this design follow?\n\n\nClick to see the solution\n\nThe design uses separate memory for the program (instructions) and for sensor readings (data). This is the defining characteristic of the Harvard architecture, which allows the controller to fetch the next instruction while simultaneously accessing sensor data, improving real-time performance.\nAnswer: The Harvard Architecture.\n\n\n\n5.6. XOR Gate Logic\nQuestion: A logic circuit uses an XOR gate to compare two 1-bit inputs, A and B. When will the output be 1?\n\n\nClick to see the solution\n\nAn XOR (Exclusive-OR) gate outputs 1 only when its inputs are different. We can verify this with its truth table:\n\n\n\nA\nB\nOutput\n\n\n\n\n0\n0\n0\n\n\n0\n1\n1\n\n\n1\n0\n1\n\n\n1\n1\n0\n\n\n\nAnswer: The output will be 1 when A=0 and B=1, or when A=1 and B=0.\n\n\n\n5.7. Performance Metric Analysis\nQuestion: System A can process a video file in 10 minutes. System B can process the same file in 15 minutes, but it can process two such files simultaneously, finishing both in 30 minutes. Which system has better latency, and which has better throughput?\n\n\nClick to see the solution\n\n\nLatency Analysis: Latency refers to the time to complete a single task.\n\nSystem A finishes one file in 10 minutes.\nSystem B finishes one file in 15 minutes.\nTherefore, System A has better (lower) latency.\n\nThroughput Analysis: Throughput refers to the total work done over time.\n\nIn 30 minutes, System A processes 3 files (\\(30 / 10 = 3\\)).\nIn 30 minutes, System B processes 2 files.\nTherefore, System A has better (higher) throughput.\n\n\nAnswer: System A is superior in both latency and throughput for this specific workload.",
    "crumbs": [
      "Computer Architecture",
      "3. Von Neumann and Harvard Architectures, Performance Metrics of Computers, Combinational Logic Circuits"
    ]
  },
  {
    "objectID": "Mathematical Analysis I/lec_2.html",
    "href": "Mathematical Analysis I/lec_2.html",
    "title": "2. Functions and Their Graphs, Elementary Functions and Properties",
    "section": "",
    "text": "Quiz | Flashcards\n\n1. Summary\n\n1.1 Core Concepts of Functions\nA function is a rule that assigns a single, unique output to every input. The set of all permissible inputs is called the domain, and the set of all resulting outputs is the range. If a function f takes an input x to produce an output y, we write \\(y = f(x)\\).\n\nImplicit Domain: When a function is defined by a formula without a specified domain, the domain is assumed to be the largest set of real numbers for which the formula gives real-valued outputs. For example, for \\(f(x) = \\frac{1}{x-2}\\), the domain is all real numbers except \\(x=2\\).\nGraph of a Function: The graph is a visual representation consisting of all points \\((x, f(x))\\) on the Cartesian plane. The value \\(f(x)\\) represents the height of the graph at point \\(x\\). The formal definition of the graph is the set \\(\\{(x, f(x)) | x \\in D\\}\\), where \\(D\\) is the domain.\n\n\n\n\n1.2 Special Step Functions: Floor and Ceiling\n\nFloor Function (Greatest Integer Function): Denoted \\(\\lfloor x \\rfloor\\), this function rounds a number down to the greatest integer less than or equal to \\(x\\). For example, \\(\\lfloor 3.7 \\rfloor = 3\\) and \\(\\lfloor -2.1 \\rfloor = -3\\).\nCeiling Function (Least Integer Function): Denoted \\(\\lceil x \\rceil\\), this function rounds a number up to the smallest integer greater than or equal to \\(x\\). For example, \\(\\lceil 3.7 \\rceil = 4\\) and \\(\\lceil -2.1 \\rceil = -2\\).\n\n\n\n\n1.3 Function Behavior: Monotonicity\nA function is monotone on an interval if it consistently increases or decreases.\n\nIncreasing: \\(f(x_1) \\le f(x_2)\\) whenever \\(x_1 &lt; x_2\\).\nStrictly Increasing: \\(f(x_1) &lt; f(x_2)\\) whenever \\(x_1 &lt; x_2\\).\nDecreasing: \\(f(x_1) \\ge f(x_2)\\) whenever \\(x_1 &lt; x_2\\).\nStrictly Decreasing: \\(f(x_1) &gt; f(x_2)\\) whenever \\(x_1 &lt; x_2\\).\n\nA function that is strictly monotone (either strictly increasing or strictly decreasing) on its domain is guaranteed to be one-to-one.\n\n\n1.4 Combining Functions\nFunctions can be combined arithmetically or through composition. For arithmetic combinations, the domain is the intersection of the individual domains.\n\nArithmetic Operations: \\((f+g)(x) = f(x)+g(x)\\); \\((f-g)(x) = f(x)-g(x)\\); \\((fg)(x) = f(x)g(x)\\); and \\((f/g)(x) = f(x)/g(x)\\), with the added domain restriction that \\(g(x) \\neq 0\\).\nComposition: The composition \\((f \\circ g)(x)\\) is defined as \\(f(g(x))\\). The input \\(x\\) must be in the domain of \\(g\\), and the output \\(g(x)\\) must be in the domain of \\(f\\). The order of composition is critical, as \\((f \\circ g)(x)\\) is generally not equal to \\((g \\circ f)(x)\\).\n\n\n\n\n1.5 Inverse Functions\n\nOne-to-One Function: A function is one-to-one if no two distinct inputs produce the same output. This can be verified visually with the horizontal line test—if no horizontal line intersects the graph more than once, the function is one-to-one.\nInverse Function: If a function \\(f\\) is one-to-one, it has an inverse function, denoted \\(f^{-1}\\), that “reverses” its action. If \\(f(a) = b\\), then \\(f^{-1}(b) = a\\). The domain of \\(f^{-1}\\) is the range of \\(f\\), and the range of \\(f^{-1}\\) is the domain of \\(f\\). The graph of \\(f^{-1}\\) is a reflection of the graph of \\(f\\) across the line \\(y=x\\).\n\n\n\n1.6 Function Symmetry: Even and Odd Functions\nFor a function to be even or odd, its domain must be symmetric about the origin (if \\(x\\) is in the domain, \\(-x\\) must also be).\n\nEven Function: \\(f\\) is even if \\(f(-x) = f(x)\\). Its graph is symmetric with respect to the y-axis (e.g., \\(f(x) = x^2\\), \\(f(x) = \\cos x\\)).\nOdd Function: \\(f\\) is odd if \\(f(-x) = -f(x)\\). Its graph is symmetric with respect to the origin (e.g., \\(f(x) = x^3\\), \\(f(x) = \\sin x\\)).\n\nAny function with a symmetric domain can be uniquely decomposed into the sum of an even and an odd function:\n\nEven Part: \\(f_{\\text{even}}(x) = \\frac{f(x) + f(-x)}{2}\\)\nOdd Part: \\(f_{\\text{odd}}(x) = \\frac{f(x) - f(-x)}{2}\\)\n\n\n\n1.7 Elementary Functions\n\n1.7.1 Power, Polynomial, and Rational Functions\n\nPower Function: A function of the form \\(f(x) = x^a\\), where \\(a\\) is a real number. This includes integer powers (\\(x^2\\)), roots (\\(x^{1/2} = \\sqrt{x}\\)), and reciprocals (\\(x^{-1} = 1/x\\)).\nPolynomial Function: A sum of power functions with non-negative integer exponents: \\(p(x) = a_n x^n + \\dots + a_1 x + a_0\\). The highest exponent \\(n\\) is the degree of the polynomial.\nRational Function: A ratio of two polynomials, \\(f(x) = \\frac{p(x)}{q(x)}\\). Its domain excludes any values of \\(x\\) for which \\(q(x)=0\\).\n\n\n\n1.7.2 Exponential and Logarithmic Functions\n\nExponential Function: \\(f(x) = a^x\\), where the base \\(a &gt; 0\\) and \\(a \\neq 1\\). Its domain is all real numbers, and its range is \\((0, \\infty)\\).\nLogarithmic Function: \\(f(x) = \\log_a(x)\\), the inverse of the exponential function. The expression \\(\\log_a(x)\\) gives the exponent to which the base \\(a\\) must be raised to obtain \\(x\\). Its domain is \\((0, \\infty)\\), and its range is all real numbers.\n\n\n\n1.7.3 Trigonometric Functions and Their Inverses\nTrigonometric functions relate an angle \\(\\theta\\) to the coordinates \\((x, y)\\) of a point on a circle of radius \\(r\\). They are periodic, meaning their values repeat.\n\nDefinitions: \\(\\sin \\theta = y/r\\), \\(\\cos \\theta = x/r\\), \\(\\tan \\theta = y/x\\), etc.\nPeriodicity: The period of \\(\\sin x, \\cos x, \\sec x, \\csc x\\) is \\(2\\pi\\). The period of \\(\\tan x\\) and \\(\\cot x\\) is \\(\\pi\\).\nInverse Trigonometric Functions: Because they are not one-to-one, we must restrict the domain of trigonometric functions to create their inverses (e.g., \\(\\arcsin x\\), \\(\\arccos x\\)). For example, \\(\\arcsin x\\) is defined for inputs in \\([-1, 1]\\) and produces an angle in \\([-\\pi/2, \\pi/2]\\).\n\n\n\n\n1.7.4 Hyperbolic Functions and Their Inverses\nHyperbolic functions are combinations of exponential functions and are analogous to trigonometric functions.\n\nDefinitions: \\(\\sinh x = \\frac{e^x - e^{-x}}{2}\\) and \\(\\cosh x = \\frac{e^x + e^{-x}}{2}\\). The other four are defined similarly to their trigonometric counterparts (e.g., \\(\\tanh x = \\sinh x / \\cosh x\\)).\nInverse Hyperbolic Functions: These are the inverses of the hyperbolic functions (with domain restrictions where needed, like for \\(\\cosh x\\)). They can be expressed using natural logarithms. For instance, \\(\\text{arsinh}(x) = \\ln(x + \\sqrt{x^2+1})\\).\n\n\n\n\n\n2. Definitions\n\nFunction: A rule assigning each input from a domain to exactly one output.\nDomain: The set of all possible input values for a function.\nRange: The set of all possible output values of a function.\nOne-to-One Function: A function where each output corresponds to a unique input.\nInverse Function (\\(f^{-1}\\)): A function that reverses the mapping of a one-to-one function.\nEven Function: A function satisfying \\(f(-x) = f(x)\\), symmetric about the y-axis.\nOdd Function: A function satisfying \\(f(-x) = -f(x)\\), symmetric about the origin.\nPeriodic Function: A function that repeats its values at regular intervals (the period).\nPolynomial: A function expressed as a sum of non-negative integer powers of a variable.\nDegree of a Polynomial: The highest exponent of the variable in a polynomial.\nRational Function: A function that is the ratio of two polynomials.\nExponential Function: A function of the form \\(f(x) = a^x\\) where \\(a\\) is a positive constant.\nLogarithmic Function: The inverse of an exponential function, \\(f(x) = \\log_a(x)\\).\nHyperbolic Functions: Functions defined as combinations of \\(e^x\\) and \\(e^{-x}\\), such as \\(\\sinh x\\) and \\(\\cosh x\\).\nComposition of Functions: An operation \\((f \\circ g)(x) = f(g(x))\\) where one function is applied to the result of another.\n\n\n\n3. Formulas\n\nEven Part of a Function: \\(f_{\\text{even}}(x) = \\frac{f(x) + f(-x)}{2}\\)\nOdd Part of a Function: \\(f_{\\text{odd}}(x) = \\frac{f(x) - f(-x)}{2}\\)\nComposition: \\((f \\circ g)(x) = f(g(x))\\)\nPythagorean Identities:\n\n\\(\\sin^2 x + \\cos^2 x = 1\\)\n\\(1 + \\tan^2 x = \\sec^2 x\\)\n\\(1 + \\cot^2 x = \\csc^2 x\\)\n\nAngle Addition Formulas:\n\n\\(\\sin(x \\pm y) = \\sin x \\cos y \\pm \\cos x \\sin y\\)\n\\(\\cos(x \\pm y) = \\cos x \\cos y \\mp \\sin x \\sin y\\)\n\nHyperbolic Identity: \\(\\cosh^2 x - \\sinh^2 x = 1\\)\nHyperbolic Definitions:\n\n\\(\\sinh x = \\frac{e^x - e^{-x}}{2}\\)\n\\(\\cosh x = \\frac{e^x + e^{-x}}{2}\\)\n\nInverse Trig Complementary Angles: \\(\\arcsin x + \\arccos x = \\frac{\\pi}{2}\\)\nLogarithmic Forms of Inverse Hyperbolic Functions:\n\n\\(\\text{arsinh}(x) = \\ln(x + \\sqrt{x^2+1})\\)\n\\(\\text{arcosh}(x) = \\ln(x + \\sqrt{x^2-1})\\) for \\(x \\ge 1\\)\n\\(\\text{artanh}(x) = \\frac{1}{2} \\ln\\left(\\frac{1+x}{1-x}\\right)\\) for \\(|x| &lt; 1\\)\n\nChange of Logarithm Base: \\(\\log_b a = \\frac{\\ln a}{\\ln b}\\)\n\n\n\n4. Mistakes\n\nConfusing Inverse Notation for a Reciprocal: Interpreting \\(f^{-1}(x)\\) as \\(1/f(x)\\). Why it’s wrong: The \\(-1\\) superscript denotes an inverse function, which “undoes” the function’s operation. For example, \\(\\sin^{-1}(x)\\) is \\(\\arcsin(x)\\), whereas \\((\\sin x)^{-1}\\) is \\(1/\\sin x = \\csc x\\).\nAssuming Function Composition is Commutative: Thinking that \\(f(g(x))\\) is always the same as \\(g(f(x))\\). Why it’s wrong: The order of operations matters. Applying function \\(g\\) then function \\(f\\) is a different sequence of transformations than applying \\(f\\) then \\(g\\).\nIncorrectly Simplifying Logarithms: Applying rules that don’t exist, such as writing \\(\\ln(a+b)\\) as \\(\\ln(a) + \\ln(b)\\). Why it’s wrong: Logarithm rules apply to products, quotients, and powers, not sums or differences. The correct rule is \\(\\ln(ab) = \\ln(a) + \\ln(b)\\).\nMixing Up Trigonometric and Hyperbolic Identities: Believing that \\(\\sinh^2 x + \\cosh^2 x = 1\\). Why it’s wrong: While analogous, the main hyperbolic identity has a minus sign: \\(\\cosh^2 x - \\sinh^2 x = 1\\). This difference stems from their definitions using exponential functions.\nIgnoring the Domain and Range of Inverse Trig Functions: Calculating \\(\\arcsin(\\sin(2\\pi))\\) as \\(2\\pi\\). Why it’s wrong: The range of \\(\\arcsin(x)\\) is restricted to \\([-\\pi/2, \\pi/2]\\). The correct evaluation is \\(\\sin(2\\pi) = 0\\), and \\(\\arcsin(0) = 0\\). The formula \\(\\arcsin(\\sin(x)) = x\\) is only valid for \\(x\\) within the restricted range.\nForgetting to Find the Domain of a Composite Function Correctly: To find the domain of \\(f(g(x))\\), only considering the domain of the final simplified function. Why it’s wrong: The domain must satisfy two conditions: \\(x\\) must be in the domain of the inner function \\(g\\), and the output \\(g(x)\\) must be in the domain of the outer function \\(f\\).\n\n\n\n5. Examples\n\n5.1. Domain of a Composite Function\nQuestion: Let \\(f(x) = \\sqrt{x-4}\\) and \\(g(x) = x^2\\). Find the domain of \\((f \\circ g)(x)\\).\n\n\nClick to see the solution\n\n\nWrite the composite function: \\[ (f \\circ g)(x) = f(g(x)) = f(x^2) = \\sqrt{x^2 - 4} \\]\nDetermine the domain condition for the outer function f: The input to \\(f(u) = \\sqrt{u-4}\\) must be greater than or equal to 4. So, \\(u \\ge 4\\).\nApply this condition to the inner function g(x): The output of \\(g(x)\\), which is \\(x^2\\), becomes the input for \\(f\\). Therefore, we must have: \\[ x^2 \\ge 4 \\]\nSolve the inequality: Taking the square root of both sides gives \\(|x| \\ge 2\\). This means \\(x \\ge 2\\) or \\(x \\le -2\\).\nCheck the domain of g(x): The domain of \\(g(x)=x^2\\) is all real numbers, so this adds no further restrictions.\n\nAnswer: The domain is \\((-\\infty, -2] \\cup [2, \\infty)\\).\n\n\n\n5.2. Decomposing a Function into Even and Odd Parts\nQuestion: Decompose the function \\(f(x) = e^x\\) into its even and odd parts.\n\n\nClick to see the solution\n\n\nFind \\(f(-x)\\): \\[ f(-x) = e^{-x} \\]\nUse the formula for the even part: \\[ f_{\\text{even}}(x) = \\frac{f(x) + f(-x)}{2} = \\frac{e^x + e^{-x}}{2} \\]\nRecognize the result: This is the definition of the hyperbolic cosine. \\[ f_{\\text{even}}(x) = \\cosh(x) \\]\nUse the formula for the odd part: \\[ f_{\\text{odd}}(x) = \\frac{f(x) - f(-x)}{2} = \\frac{e^x - e^{-x}}{2} \\]\nRecognize the result: This is the definition of the hyperbolic sine. \\[ f_{\\text{odd}}(x) = \\sinh(x) \\]\n\nAnswer: The even part is \\(\\cosh(x)\\) and the odd part is \\(\\sinh(x)\\). (Thus, \\(e^x = \\cosh x + \\sinh x\\)).\n\n\n\n5.3. Proving a Trigonometric Identity\nQuestion: Prove the identity \\(\\frac{\\sin(2x)}{1 + \\cos(2x)} = \\tan(x)\\).\n\n\nClick to see the solution\n\n\nRecall the double-angle formulas:\n\n\\(\\sin(2x) = 2 \\sin x \\cos x\\)\n\\(\\cos(2x) = \\cos^2 x - \\sin^2 x\\). Another useful form is \\(2\\cos^2 x - 1\\).\n\nSubstitute the formulas into the left-hand side: Using the form \\(\\cos(2x) = 2\\cos^2 x - 1\\) will be helpful for simplifying the denominator. \\[ \\frac{2 \\sin x \\cos x}{1 + (2\\cos^2 x - 1)} \\]\nSimplify the denominator: \\[ \\frac{2 \\sin x \\cos x}{2\\cos^2 x} \\]\nCancel common terms: Cancel the 2 and one factor of cos x from the numerator and denominator. \\[ \\frac{\\sin x}{\\cos x} \\]\nRecognize the result: This is the definition of \\(\\tan x\\). The left side equals the right side.\n\nAnswer: The identity is proven.\n\n\n\n5.4. Finding an Inverse Function\nQuestion: Find the inverse of the function \\(f(x) = 5e^{2x} - 3\\).\n\n\nClick to see the solution\n\n\nReplace \\(f(x)\\) with \\(y\\): \\[ y = 5e^{2x} - 3 \\]\nSwap \\(x\\) and \\(y\\): \\[ x = 5e^{2y} - 3 \\]\nSolve for \\(y\\) by isolating the exponential term: \\[ x + 3 = 5e^{2y} \\] \\[ \\frac{x+3}{5} = e^{2y} \\]\nTake the natural logarithm of both sides: \\[ \\ln\\left(\\frac{x+3}{5}\\right) = \\ln(e^{2y}) \\] \\[ \\ln\\left(\\frac{x+3}{5}\\right) = 2y \\]\nIsolate \\(y\\): \\[ y = \\frac{1}{2} \\ln\\left(\\frac{x+3}{5}\\right) \\]\nReplace \\(y\\) with \\(f^{-1}(x)\\): \\[ f^{-1}(x) = \\frac{1}{2} \\ln\\left(\\frac{x+3}{5}\\right) \\]\n\nAnswer: The inverse function is \\(f^{-1}(x) = \\frac{1}{2} \\ln\\left(\\frac{x+3}{5}\\right)\\).\n\n\n\n5.5. Using Inverse Trigonometric Relationships\nQuestion: Find the exact value of \\(\\tan(\\arccos(\\frac{3}{5}))\\).\n\n\nClick to see the solution\n\n\nSet up the problem: Let \\(\\theta = \\arccos(\\frac{3}{5})\\). This means \\(\\cos(\\theta) = \\frac{3}{5}\\) and \\(\\theta\\) is in the interval \\([0, \\pi]\\).\nVisualize with a right triangle: Since \\(\\cos(\\theta)\\) is positive, \\(\\theta\\) is in Quadrant I. We can draw a right triangle where the adjacent side is 3 and the hypotenuse is 5.\n\n\n\nFind the missing side: Use the Pythagorean theorem to find the opposite side (\\(o\\)). \\[ 3^2 + o^2 = 5^2 \\] \\[ 9 + o^2 = 25 \\] \\[ o^2 = 16 \\implies o = 4 \\]\nCalculate the tangent: The problem is now to find \\(\\tan(\\theta)\\). From the triangle, \\(\\tan(\\theta) = \\frac{\\text{opposite}}{\\text{adjacent}}\\). \\[ \\tan(\\theta) = \\frac{4}{3} \\]\n\nAnswer: \\(\\frac{4}{3}\\).\n\n\n\n5.6. Converting Inverse Hyperbolic Functions\nQuestion: Express \\(\\text{artanh}(1/2)\\) in terms of a natural logarithm.\n\n\nClick to see the solution\n\n\nRecall the logarithmic formula for artanh(x): \\[ \\text{artanh}(x) = \\frac{1}{2} \\ln\\left(\\frac{1+x}{1-x}\\right) \\]\nSubstitute \\(x = 1/2\\) into the formula: \\[ \\text{artanh}(1/2) = \\frac{1}{2} \\ln\\left(\\frac{1+1/2}{1-1/2}\\right) \\]\nSimplify the fraction inside the logarithm: \\[ \\frac{1+1/2}{1-1/2} = \\frac{3/2}{1/2} = 3 \\]\nWrite the final expression: \\[ \\text{artanh}(1/2) = \\frac{1}{2} \\ln(3) \\]\n\nAnswer: \\(\\frac{1}{2} \\ln(3)\\) or \\(\\ln(\\sqrt{3})\\).\n\n\n\n5.7. Proving an Inverse Trig Identity\nQuestion: Prove that \\(\\arcsin(-x) = -\\arcsin(x)\\).\n\n\nClick to see the solution\n\n\nStart with the definition: Let \\(\\theta = \\arcsin(-x)\\). By definition, this means:\n\n\\(\\sin(\\theta) = -x\\)\n\\(-\\frac{\\pi}{2} \\le \\theta \\le \\frac{\\pi}{2}\\)\n\nManipulate the equation: Multiply both sides of \\(\\sin(\\theta) = -x\\) by -1 to get: \\[ -\\sin(\\theta) = x \\]\nUse the property of the sine function: Sine is an odd function, so \\(-\\sin(\\theta) = \\sin(-\\theta)\\). \\[ \\sin(-\\theta) = x \\]\nConsider the range: Since \\(-\\frac{\\pi}{2} \\le \\theta \\le \\frac{\\pi}{2}\\), multiplying by -1 reverses the inequalities, giving \\(\\frac{\\pi}{2} \\ge -\\theta \\ge -\\frac{\\pi}{2}\\). The angle \\(-\\theta\\) is also in the valid range for the output of arcsin.\nTake the arcsin of both sides: From \\(\\sin(-\\theta) = x\\), we can conclude that: \\[ -\\theta = \\arcsin(x) \\]\nSubstitute back: We started with \\(\\theta = \\arcsin(-x)\\). Substitute this back into the equation. \\[ -(\\arcsin(-x)) = \\arcsin(x) \\] Multiplying by -1 gives the desired identity. \\[ \\arcsin(-x) = -\\arcsin(x) \\]\n\nAnswer: The identity is proven.",
    "crumbs": [
      "Mathematical Analysis I",
      "2. Functions and Their Graphs, Elementary Functions and Properties"
    ]
  }
]